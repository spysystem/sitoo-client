<?php
/**
 * ProductImagesAndFilesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
#region SPY Code
use GuzzleHttp\Cookie\CookieJar;
#endregion
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Spy\SitooClient\ApiException;
use Spy\SitooClient\Configuration;
use Spy\SitooClient\HeaderSelector;
use Spy\SitooClient\ObjectSerializer;

/**
 * ProductImagesAndFilesApi Class Doc Comment
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductImagesAndFilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

	#region SPY Code
	protected $bXDebugOnInstance	= false;
	protected $bXDebugOnNextRequest;

	/**
	 * @param bool $bXDebugOnInstance
	 * @return $this
	 */
	public function setXDebugOnInstance(bool $bXDebugOnInstance)
	{
		$this->bXDebugOnInstance	= $bXDebugOnInstance;

		return $this;
	}

	/**
	 * @return $this
	 */
	public function setXDebugOnNextRequest()
	{
		$this->bXDebugOnNextRequest	= true;

		return $this;
	}

	/**
	 * Gets the OpenAPI Spec Version
	 *
	 * @return string
	 */
	public static function getSpecVersion()
	{
		return '1.0.0';
	}
	#endregion

    /**
    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addProductFile' => [
            'application/json',
        ],
        'addProductImage' => [
            'application/json',
        ],
        'deleteProductFile' => [
            'application/json',
        ],
        'deleteProductImage' => [
            'application/json',
        ],
        'getProductFile' => [
            'application/json',
        ],
        'getProductFiles' => [
            'application/json',
        ],
        'getProductImage' => [
            'application/json',
        ],
        'getProductImages' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addProductFile
     *
     * @param  int $siteid siteid (required)
     * @param  int $productid productid (required)
     * @param  \Spy\SitooClient\Model\ResourceWrite $resourceWrite resourceWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProductFile'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function addProductFile($siteid, $productid, $resourceWrite, string $contentType = self::contentTypes['addProductFile'][0])
    {
        list($response) = $this->addProductFileWithHttpInfo($siteid, $productid, $resourceWrite, $contentType);
        return $response;
    }

    /**
     * Operation addProductFileWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  \Spy\SitooClient\Model\ResourceWrite $resourceWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProductFile'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function addProductFileWithHttpInfo($siteid, $productid, $resourceWrite, string $contentType = self::contentTypes['addProductFile'][0])
    {
        $request = $this->addProductFileRequest($siteid, $productid, $resourceWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addProductFileAsync
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  \Spy\SitooClient\Model\ResourceWrite $resourceWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProductFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addProductFileAsync($siteid, $productid, $resourceWrite, string $contentType = self::contentTypes['addProductFile'][0])
    {
        return $this->addProductFileAsyncWithHttpInfo($siteid, $productid, $resourceWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addProductFileAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  \Spy\SitooClient\Model\ResourceWrite $resourceWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProductFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addProductFileAsyncWithHttpInfo($siteid, $productid, $resourceWrite, string $contentType = self::contentTypes['addProductFile'][0])
    {
        $returnType = 'bool';
        $request = $this->addProductFileRequest($siteid, $productid, $resourceWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addProductFile'
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  \Spy\SitooClient\Model\ResourceWrite $resourceWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProductFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addProductFileRequest($siteid, $productid, $resourceWrite, string $contentType = self::contentTypes['addProductFile'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling addProductFile'
            );
        }

        // verify the required parameter 'productid' is set
        if ($productid === null || (is_array($productid) && count($productid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productid when calling addProductFile'
            );
        }

        // verify the required parameter 'resourceWrite' is set
        if ($resourceWrite === null || (is_array($resourceWrite) && count($resourceWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resourceWrite when calling addProductFile'
            );
        }


        $resourcePath = '/sites/{siteid}/products/{productid}/files.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($productid !== null) {
            $resourcePath = str_replace(
                '{' . 'productid' . '}',
                ObjectSerializer::toPathValue($productid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resourceWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($resourceWrite));
            } else {
                $httpBody = $resourceWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addProductImage
     *
     * @param  int $siteid siteid (required)
     * @param  int $productid productid (required)
     * @param  \Spy\SitooClient\Model\ResourceWrite $resourceWrite resourceWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProductImage'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function addProductImage($siteid, $productid, $resourceWrite, string $contentType = self::contentTypes['addProductImage'][0])
    {
        list($response) = $this->addProductImageWithHttpInfo($siteid, $productid, $resourceWrite, $contentType);
        return $response;
    }

    /**
     * Operation addProductImageWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  \Spy\SitooClient\Model\ResourceWrite $resourceWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProductImage'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function addProductImageWithHttpInfo($siteid, $productid, $resourceWrite, string $contentType = self::contentTypes['addProductImage'][0])
    {
        $request = $this->addProductImageRequest($siteid, $productid, $resourceWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addProductImageAsync
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  \Spy\SitooClient\Model\ResourceWrite $resourceWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProductImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addProductImageAsync($siteid, $productid, $resourceWrite, string $contentType = self::contentTypes['addProductImage'][0])
    {
        return $this->addProductImageAsyncWithHttpInfo($siteid, $productid, $resourceWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addProductImageAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  \Spy\SitooClient\Model\ResourceWrite $resourceWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProductImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addProductImageAsyncWithHttpInfo($siteid, $productid, $resourceWrite, string $contentType = self::contentTypes['addProductImage'][0])
    {
        $returnType = 'bool';
        $request = $this->addProductImageRequest($siteid, $productid, $resourceWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addProductImage'
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  \Spy\SitooClient\Model\ResourceWrite $resourceWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProductImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addProductImageRequest($siteid, $productid, $resourceWrite, string $contentType = self::contentTypes['addProductImage'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling addProductImage'
            );
        }

        // verify the required parameter 'productid' is set
        if ($productid === null || (is_array($productid) && count($productid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productid when calling addProductImage'
            );
        }

        // verify the required parameter 'resourceWrite' is set
        if ($resourceWrite === null || (is_array($resourceWrite) && count($resourceWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resourceWrite when calling addProductImage'
            );
        }


        $resourcePath = '/sites/{siteid}/products/{productid}/images.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($productid !== null) {
            $resourcePath = str_replace(
                '{' . 'productid' . '}',
                ObjectSerializer::toPathValue($productid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($resourceWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($resourceWrite));
            } else {
                $httpBody = $resourceWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProductFile
     *
     * @param  int $siteid siteid (required)
     * @param  int $productid productid (required)
     * @param  int $fileid fileid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductFile'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function deleteProductFile($siteid, $productid, $fileid, string $contentType = self::contentTypes['deleteProductFile'][0])
    {
        list($response) = $this->deleteProductFileWithHttpInfo($siteid, $productid, $fileid, $contentType);
        return $response;
    }

    /**
     * Operation deleteProductFileWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $fileid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductFile'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductFileWithHttpInfo($siteid, $productid, $fileid, string $contentType = self::contentTypes['deleteProductFile'][0])
    {
        $request = $this->deleteProductFileRequest($siteid, $productid, $fileid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProductFileAsync
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $fileid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductFileAsync($siteid, $productid, $fileid, string $contentType = self::contentTypes['deleteProductFile'][0])
    {
        return $this->deleteProductFileAsyncWithHttpInfo($siteid, $productid, $fileid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProductFileAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $fileid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductFileAsyncWithHttpInfo($siteid, $productid, $fileid, string $contentType = self::contentTypes['deleteProductFile'][0])
    {
        $returnType = 'bool';
        $request = $this->deleteProductFileRequest($siteid, $productid, $fileid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProductFile'
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $fileid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProductFileRequest($siteid, $productid, $fileid, string $contentType = self::contentTypes['deleteProductFile'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling deleteProductFile'
            );
        }

        // verify the required parameter 'productid' is set
        if ($productid === null || (is_array($productid) && count($productid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productid when calling deleteProductFile'
            );
        }

        // verify the required parameter 'fileid' is set
        if ($fileid === null || (is_array($fileid) && count($fileid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileid when calling deleteProductFile'
            );
        }


        $resourcePath = '/sites/{siteid}/products/{productid}/files/{fileid}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($productid !== null) {
            $resourcePath = str_replace(
                '{' . 'productid' . '}',
                ObjectSerializer::toPathValue($productid),
                $resourcePath
            );
        }
        // path params
        if ($fileid !== null) {
            $resourcePath = str_replace(
                '{' . 'fileid' . '}',
                ObjectSerializer::toPathValue($fileid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProductImage
     *
     * @param  int $siteid siteid (required)
     * @param  int $productid productid (required)
     * @param  int $imageid imageid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductImage'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function deleteProductImage($siteid, $productid, $imageid, string $contentType = self::contentTypes['deleteProductImage'][0])
    {
        list($response) = $this->deleteProductImageWithHttpInfo($siteid, $productid, $imageid, $contentType);
        return $response;
    }

    /**
     * Operation deleteProductImageWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $imageid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductImage'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductImageWithHttpInfo($siteid, $productid, $imageid, string $contentType = self::contentTypes['deleteProductImage'][0])
    {
        $request = $this->deleteProductImageRequest($siteid, $productid, $imageid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProductImageAsync
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $imageid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductImageAsync($siteid, $productid, $imageid, string $contentType = self::contentTypes['deleteProductImage'][0])
    {
        return $this->deleteProductImageAsyncWithHttpInfo($siteid, $productid, $imageid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProductImageAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $imageid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductImageAsyncWithHttpInfo($siteid, $productid, $imageid, string $contentType = self::contentTypes['deleteProductImage'][0])
    {
        $returnType = 'bool';
        $request = $this->deleteProductImageRequest($siteid, $productid, $imageid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProductImage'
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $imageid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProductImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProductImageRequest($siteid, $productid, $imageid, string $contentType = self::contentTypes['deleteProductImage'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling deleteProductImage'
            );
        }

        // verify the required parameter 'productid' is set
        if ($productid === null || (is_array($productid) && count($productid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productid when calling deleteProductImage'
            );
        }

        // verify the required parameter 'imageid' is set
        if ($imageid === null || (is_array($imageid) && count($imageid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imageid when calling deleteProductImage'
            );
        }


        $resourcePath = '/sites/{siteid}/products/{productid}/images/{imageid}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($productid !== null) {
            $resourcePath = str_replace(
                '{' . 'productid' . '}',
                ObjectSerializer::toPathValue($productid),
                $resourcePath
            );
        }
        // path params
        if ($imageid !== null) {
            $resourcePath = str_replace(
                '{' . 'imageid' . '}',
                ObjectSerializer::toPathValue($imageid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductFile
     *
     * @param  int $siteid siteid (required)
     * @param  int $productid productid (required)
     * @param  int $fileid fileid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductFile'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\ResourceRead
     */
    public function getProductFile($siteid, $productid, $fileid, string $contentType = self::contentTypes['getProductFile'][0])
    {
        list($response) = $this->getProductFileWithHttpInfo($siteid, $productid, $fileid, $contentType);
        return $response;
    }

    /**
     * Operation getProductFileWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $fileid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductFile'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\ResourceRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductFileWithHttpInfo($siteid, $productid, $fileid, string $contentType = self::contentTypes['getProductFile'][0])
    {
        $request = $this->getProductFileRequest($siteid, $productid, $fileid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\ResourceRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\ResourceRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\ResourceRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\ResourceRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\ResourceRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductFileAsync
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $fileid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductFileAsync($siteid, $productid, $fileid, string $contentType = self::contentTypes['getProductFile'][0])
    {
        return $this->getProductFileAsyncWithHttpInfo($siteid, $productid, $fileid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductFileAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $fileid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductFileAsyncWithHttpInfo($siteid, $productid, $fileid, string $contentType = self::contentTypes['getProductFile'][0])
    {
        $returnType = '\Spy\SitooClient\Model\ResourceRead';
        $request = $this->getProductFileRequest($siteid, $productid, $fileid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductFile'
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $fileid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductFileRequest($siteid, $productid, $fileid, string $contentType = self::contentTypes['getProductFile'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling getProductFile'
            );
        }

        // verify the required parameter 'productid' is set
        if ($productid === null || (is_array($productid) && count($productid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productid when calling getProductFile'
            );
        }

        // verify the required parameter 'fileid' is set
        if ($fileid === null || (is_array($fileid) && count($fileid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fileid when calling getProductFile'
            );
        }


        $resourcePath = '/sites/{siteid}/products/{productid}/files/{fileid}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($productid !== null) {
            $resourcePath = str_replace(
                '{' . 'productid' . '}',
                ObjectSerializer::toPathValue($productid),
                $resourcePath
            );
        }
        // path params
        if ($fileid !== null) {
            $resourcePath = str_replace(
                '{' . 'fileid' . '}',
                ObjectSerializer::toPathValue($fileid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductFiles
     *
     * @param  int $siteid siteid (required)
     * @param  int $productid productid (required)
     * @param  int $start start (optional)
     * @param  int $num num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductFiles'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\GetProductFilesResponse
     */
    public function getProductFiles($siteid, $productid, $start = null, $num = null, $fields = null, string $contentType = self::contentTypes['getProductFiles'][0])
    {
        list($response) = $this->getProductFilesWithHttpInfo($siteid, $productid, $start, $num, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getProductFilesWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductFiles'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\GetProductFilesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductFilesWithHttpInfo($siteid, $productid, $start = null, $num = null, $fields = null, string $contentType = self::contentTypes['getProductFiles'][0])
    {
        $request = $this->getProductFilesRequest($siteid, $productid, $start, $num, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\GetProductFilesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\GetProductFilesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\GetProductFilesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\GetProductFilesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\GetProductFilesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductFilesAsync
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductFilesAsync($siteid, $productid, $start = null, $num = null, $fields = null, string $contentType = self::contentTypes['getProductFiles'][0])
    {
        return $this->getProductFilesAsyncWithHttpInfo($siteid, $productid, $start, $num, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductFilesAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductFilesAsyncWithHttpInfo($siteid, $productid, $start = null, $num = null, $fields = null, string $contentType = self::contentTypes['getProductFiles'][0])
    {
        $returnType = '\Spy\SitooClient\Model\GetProductFilesResponse';
        $request = $this->getProductFilesRequest($siteid, $productid, $start, $num, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductFiles'
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductFilesRequest($siteid, $productid, $start = null, $num = null, $fields = null, string $contentType = self::contentTypes['getProductFiles'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling getProductFiles'
            );
        }

        // verify the required parameter 'productid' is set
        if ($productid === null || (is_array($productid) && count($productid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productid when calling getProductFiles'
            );
        }





        $resourcePath = '/sites/{siteid}/products/{productid}/files.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $num,
            'num', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($productid !== null) {
            $resourcePath = str_replace(
                '{' . 'productid' . '}',
                ObjectSerializer::toPathValue($productid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductImage
     *
     * @param  int $siteid siteid (required)
     * @param  int $productid productid (required)
     * @param  int $imageid imageid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductImage'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\ResourceRead
     */
    public function getProductImage($siteid, $productid, $imageid, string $contentType = self::contentTypes['getProductImage'][0])
    {
        list($response) = $this->getProductImageWithHttpInfo($siteid, $productid, $imageid, $contentType);
        return $response;
    }

    /**
     * Operation getProductImageWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $imageid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductImage'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\ResourceRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductImageWithHttpInfo($siteid, $productid, $imageid, string $contentType = self::contentTypes['getProductImage'][0])
    {
        $request = $this->getProductImageRequest($siteid, $productid, $imageid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\ResourceRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\ResourceRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\ResourceRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\ResourceRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\ResourceRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductImageAsync
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $imageid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductImageAsync($siteid, $productid, $imageid, string $contentType = self::contentTypes['getProductImage'][0])
    {
        return $this->getProductImageAsyncWithHttpInfo($siteid, $productid, $imageid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductImageAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $imageid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductImageAsyncWithHttpInfo($siteid, $productid, $imageid, string $contentType = self::contentTypes['getProductImage'][0])
    {
        $returnType = '\Spy\SitooClient\Model\ResourceRead';
        $request = $this->getProductImageRequest($siteid, $productid, $imageid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductImage'
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $imageid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductImageRequest($siteid, $productid, $imageid, string $contentType = self::contentTypes['getProductImage'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling getProductImage'
            );
        }

        // verify the required parameter 'productid' is set
        if ($productid === null || (is_array($productid) && count($productid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productid when calling getProductImage'
            );
        }

        // verify the required parameter 'imageid' is set
        if ($imageid === null || (is_array($imageid) && count($imageid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imageid when calling getProductImage'
            );
        }


        $resourcePath = '/sites/{siteid}/products/{productid}/images/{imageid}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($productid !== null) {
            $resourcePath = str_replace(
                '{' . 'productid' . '}',
                ObjectSerializer::toPathValue($productid),
                $resourcePath
            );
        }
        // path params
        if ($imageid !== null) {
            $resourcePath = str_replace(
                '{' . 'imageid' . '}',
                ObjectSerializer::toPathValue($imageid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductImages
     *
     * @param  int $siteid siteid (required)
     * @param  int $productid productid (required)
     * @param  int $start start (optional)
     * @param  int $num num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductImages'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\GetProductImagesResponse
     */
    public function getProductImages($siteid, $productid, $start = null, $num = null, $fields = null, string $contentType = self::contentTypes['getProductImages'][0])
    {
        list($response) = $this->getProductImagesWithHttpInfo($siteid, $productid, $start, $num, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getProductImagesWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductImages'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\GetProductImagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductImagesWithHttpInfo($siteid, $productid, $start = null, $num = null, $fields = null, string $contentType = self::contentTypes['getProductImages'][0])
    {
        $request = $this->getProductImagesRequest($siteid, $productid, $start, $num, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\GetProductImagesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\GetProductImagesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\GetProductImagesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\GetProductImagesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\GetProductImagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductImagesAsync
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductImages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductImagesAsync($siteid, $productid, $start = null, $num = null, $fields = null, string $contentType = self::contentTypes['getProductImages'][0])
    {
        return $this->getProductImagesAsyncWithHttpInfo($siteid, $productid, $start, $num, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductImagesAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductImages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductImagesAsyncWithHttpInfo($siteid, $productid, $start = null, $num = null, $fields = null, string $contentType = self::contentTypes['getProductImages'][0])
    {
        $returnType = '\Spy\SitooClient\Model\GetProductImagesResponse';
        $request = $this->getProductImagesRequest($siteid, $productid, $start, $num, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductImages'
     *
     * @param  int $siteid (required)
     * @param  int $productid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductImages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductImagesRequest($siteid, $productid, $start = null, $num = null, $fields = null, string $contentType = self::contentTypes['getProductImages'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling getProductImages'
            );
        }

        // verify the required parameter 'productid' is set
        if ($productid === null || (is_array($productid) && count($productid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productid when calling getProductImages'
            );
        }





        $resourcePath = '/sites/{siteid}/products/{productid}/images.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $num,
            'num', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($productid !== null) {
            $resourcePath = str_replace(
                '{' . 'productid' . '}',
                ObjectSerializer::toPathValue($productid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

		#region SPY Code
		$options[RequestOptions::HEADERS]	= [
			'X-OpenAPISpecVersion'	=> '1.0.0',
		];
		$bEnableXDebug	= $this->bXDebugOnNextRequest;

		if($bEnableXDebug === null)
		{
			$bEnableXDebug	= $this->bXDebugOnInstance;
		}

		$this->bXDebugOnNextRequest	= null;

		if($bEnableXDebug)
		{
			if(preg_match('/^(?:https?:\/\/)?([^\/:]+\.[^\/:]+)/i', $this->getConfig()->getHost(), $arrMatches) === 1)
			{
				$options['cookies'] = CookieJar::fromArray(
					[
						'XDEBUG_SESSION'	=> 'PHPSTORM',
					],
					$arrMatches[1]
				);
			}
		}
		#endregion

        return $options;
    }
}
