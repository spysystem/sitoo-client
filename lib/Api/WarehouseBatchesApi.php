<?php
/**
 * WarehouseBatchesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
#region SPY Code
use GuzzleHttp\Cookie\CookieJar;
#endregion
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Spy\SitooClient\ApiException;
use Spy\SitooClient\Configuration;
use Spy\SitooClient\HeaderSelector;
use Spy\SitooClient\ObjectSerializer;

/**
 * WarehouseBatchesApi Class Doc Comment
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WarehouseBatchesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

	#region SPY Code
	protected $bXDebugOnInstance	= false;
	protected $bXDebugOnNextRequest;

	/**
	 * @param bool $bXDebugOnInstance
	 * @return $this
	 */
	public function setXDebugOnInstance(bool $bXDebugOnInstance)
	{
		$this->bXDebugOnInstance	= $bXDebugOnInstance;

		return $this;
	}

	/**
	 * @return $this
	 */
	public function setXDebugOnNextRequest()
	{
		$this->bXDebugOnNextRequest	= true;

		return $this;
	}

	/**
	 * Gets the OpenAPI Spec Version
	 *
	 * @return string
	 */
	public static function getSpecVersion()
	{
		return '1.0.0';
	}
	#endregion

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addWarehouseBatch
     *
     * @param  int $siteid siteid (required)
     * @param  int $warehouseid warehouseid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchWrite $warehousebatchWrite warehousebatchWrite (required)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addWarehouseBatch($siteid, $warehouseid, $warehousebatchWrite)
    {
        $this->addWarehouseBatchWithHttpInfo($siteid, $warehouseid, $warehousebatchWrite);
    }

    /**
     * Operation addWarehouseBatchWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchWrite $warehousebatchWrite (required)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addWarehouseBatchWithHttpInfo($siteid, $warehouseid, $warehousebatchWrite)
    {
        $request = $this->addWarehouseBatchRequest($siteid, $warehouseid, $warehousebatchWrite);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addWarehouseBatchAsync
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchWrite $warehousebatchWrite (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWarehouseBatchAsync($siteid, $warehouseid, $warehousebatchWrite)
    {
        return $this->addWarehouseBatchAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchWrite)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addWarehouseBatchAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchWrite $warehousebatchWrite (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWarehouseBatchAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchWrite)
    {
        $returnType = '';
        $request = $this->addWarehouseBatchRequest($siteid, $warehouseid, $warehousebatchWrite);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addWarehouseBatch'
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchWrite $warehousebatchWrite (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addWarehouseBatchRequest($siteid, $warehouseid, $warehousebatchWrite)
    {
        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling addWarehouseBatch'
            );
        }
        // verify the required parameter 'warehouseid' is set
        if ($warehouseid === null || (is_array($warehouseid) && count($warehouseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouseid when calling addWarehouseBatch'
            );
        }
        // verify the required parameter 'warehousebatchWrite' is set
        if ($warehousebatchWrite === null || (is_array($warehousebatchWrite) && count($warehousebatchWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehousebatchWrite when calling addWarehouseBatch'
            );
        }

        $resourcePath = '/sites/{siteid}/warehouses/{warehouseid}/warehousebatches.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($warehouseid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseid' . '}',
                ObjectSerializer::toPathValue($warehouseid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($warehousebatchWrite)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($warehousebatchWrite));
            } else {
                $httpBody = $warehousebatchWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );


        $operationHost = $this->config->getHost();

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchDeleteWarehouseBatchItems
     *
     * @param  int $siteid siteid (required)
     * @param  int $warehouseid warehouseid (required)
     * @param  int $warehousebatchid warehousebatchid (required)
     * @param  object[] $requestBody requestBody (required)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function batchDeleteWarehouseBatchItems($siteid, $warehouseid, $warehousebatchid, $requestBody)
    {
        $this->batchDeleteWarehouseBatchItemsWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $requestBody);
    }

    /**
     * Operation batchDeleteWarehouseBatchItemsWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  object[] $requestBody (required)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchDeleteWarehouseBatchItemsWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $requestBody)
    {
        $request = $this->batchDeleteWarehouseBatchItemsRequest($siteid, $warehouseid, $warehousebatchid, $requestBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation batchDeleteWarehouseBatchItemsAsync
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  object[] $requestBody (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchDeleteWarehouseBatchItemsAsync($siteid, $warehouseid, $warehousebatchid, $requestBody)
    {
        return $this->batchDeleteWarehouseBatchItemsAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $requestBody)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchDeleteWarehouseBatchItemsAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  object[] $requestBody (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchDeleteWarehouseBatchItemsAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $requestBody)
    {
        $returnType = '';
        $request = $this->batchDeleteWarehouseBatchItemsRequest($siteid, $warehouseid, $warehousebatchid, $requestBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchDeleteWarehouseBatchItems'
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  object[] $requestBody (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchDeleteWarehouseBatchItemsRequest($siteid, $warehouseid, $warehousebatchid, $requestBody)
    {
        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling batchDeleteWarehouseBatchItems'
            );
        }
        // verify the required parameter 'warehouseid' is set
        if ($warehouseid === null || (is_array($warehouseid) && count($warehouseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouseid when calling batchDeleteWarehouseBatchItems'
            );
        }
        // verify the required parameter 'warehousebatchid' is set
        if ($warehousebatchid === null || (is_array($warehousebatchid) && count($warehousebatchid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehousebatchid when calling batchDeleteWarehouseBatchItems'
            );
        }
        // verify the required parameter 'requestBody' is set
        if ($requestBody === null || (is_array($requestBody) && count($requestBody) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestBody when calling batchDeleteWarehouseBatchItems'
            );
        }

        $resourcePath = '/sites/{siteid}/warehouses/{warehouseid}/warehousebatches/{warehousebatchid}/warehousebatchitems.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($warehouseid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseid' . '}',
                ObjectSerializer::toPathValue($warehouseid),
                $resourcePath
            );
        }
        // path params
        if ($warehousebatchid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehousebatchid' . '}',
                ObjectSerializer::toPathValue($warehousebatchid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($requestBody)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($requestBody));
            } else {
                $httpBody = $requestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );


        $operationHost = $this->config->getHost();

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation batchSetWarehouseBatchItems
     *
     * @param  int $siteid siteid (required)
     * @param  int $warehouseid warehouseid (required)
     * @param  int $warehousebatchid warehousebatchid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchitemWrite[] $warehousebatchitemWrite warehousebatchitemWrite (required)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function batchSetWarehouseBatchItems($siteid, $warehouseid, $warehousebatchid, $warehousebatchitemWrite)
    {
        $this->batchSetWarehouseBatchItemsWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $warehousebatchitemWrite);
    }

    /**
     * Operation batchSetWarehouseBatchItemsWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchitemWrite[] $warehousebatchitemWrite (required)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function batchSetWarehouseBatchItemsWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $warehousebatchitemWrite)
    {
        $request = $this->batchSetWarehouseBatchItemsRequest($siteid, $warehouseid, $warehousebatchid, $warehousebatchitemWrite);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation batchSetWarehouseBatchItemsAsync
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchitemWrite[] $warehousebatchitemWrite (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchSetWarehouseBatchItemsAsync($siteid, $warehouseid, $warehousebatchid, $warehousebatchitemWrite)
    {
        return $this->batchSetWarehouseBatchItemsAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $warehousebatchitemWrite)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation batchSetWarehouseBatchItemsAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchitemWrite[] $warehousebatchitemWrite (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function batchSetWarehouseBatchItemsAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $warehousebatchitemWrite)
    {
        $returnType = '';
        $request = $this->batchSetWarehouseBatchItemsRequest($siteid, $warehouseid, $warehousebatchid, $warehousebatchitemWrite);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'batchSetWarehouseBatchItems'
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchitemWrite[] $warehousebatchitemWrite (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function batchSetWarehouseBatchItemsRequest($siteid, $warehouseid, $warehousebatchid, $warehousebatchitemWrite)
    {
        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling batchSetWarehouseBatchItems'
            );
        }
        // verify the required parameter 'warehouseid' is set
        if ($warehouseid === null || (is_array($warehouseid) && count($warehouseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouseid when calling batchSetWarehouseBatchItems'
            );
        }
        // verify the required parameter 'warehousebatchid' is set
        if ($warehousebatchid === null || (is_array($warehousebatchid) && count($warehousebatchid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehousebatchid when calling batchSetWarehouseBatchItems'
            );
        }
        // verify the required parameter 'warehousebatchitemWrite' is set
        if ($warehousebatchitemWrite === null || (is_array($warehousebatchitemWrite) && count($warehousebatchitemWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehousebatchitemWrite when calling batchSetWarehouseBatchItems'
            );
        }

        $resourcePath = '/sites/{siteid}/warehouses/{warehouseid}/warehousebatches/{warehousebatchid}/warehousebatchitems.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($warehouseid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseid' . '}',
                ObjectSerializer::toPathValue($warehouseid),
                $resourcePath
            );
        }
        // path params
        if ($warehousebatchid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehousebatchid' . '}',
                ObjectSerializer::toPathValue($warehousebatchid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($warehousebatchitemWrite)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($warehousebatchitemWrite));
            } else {
                $httpBody = $warehousebatchitemWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );


        $operationHost = $this->config->getHost();

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWarehouseBatch
     *
     * @param  int $siteid siteid (required)
     * @param  int $warehouseid warehouseid (required)
     * @param  int $warehousebatchid warehousebatchid (required)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\WarehousebatchRead
     */
    public function getWarehouseBatch($siteid, $warehouseid, $warehousebatchid)
    {
        list($response) = $this->getWarehouseBatchWithHttpInfo($siteid, $warehouseid, $warehousebatchid);
        return $response;
    }

    /**
     * Operation getWarehouseBatchWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\WarehousebatchRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWarehouseBatchWithHttpInfo($siteid, $warehouseid, $warehousebatchid)
    {
        $request = $this->getWarehouseBatchRequest($siteid, $warehouseid, $warehousebatchid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\WarehousebatchRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\WarehousebatchRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\WarehousebatchRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\WarehousebatchRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\WarehousebatchRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWarehouseBatchAsync
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWarehouseBatchAsync($siteid, $warehouseid, $warehousebatchid)
    {
        return $this->getWarehouseBatchAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWarehouseBatchAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWarehouseBatchAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchid)
    {
        $returnType = '\Spy\SitooClient\Model\WarehousebatchRead';
        $request = $this->getWarehouseBatchRequest($siteid, $warehouseid, $warehousebatchid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWarehouseBatch'
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWarehouseBatchRequest($siteid, $warehouseid, $warehousebatchid)
    {
        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling getWarehouseBatch'
            );
        }
        // verify the required parameter 'warehouseid' is set
        if ($warehouseid === null || (is_array($warehouseid) && count($warehouseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouseid when calling getWarehouseBatch'
            );
        }
        // verify the required parameter 'warehousebatchid' is set
        if ($warehousebatchid === null || (is_array($warehousebatchid) && count($warehousebatchid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehousebatchid when calling getWarehouseBatch'
            );
        }

        $resourcePath = '/sites/{siteid}/warehouses/{warehouseid}/warehousebatches/{warehousebatchid}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($warehouseid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseid' . '}',
                ObjectSerializer::toPathValue($warehouseid),
                $resourcePath
            );
        }
        // path params
        if ($warehousebatchid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehousebatchid' . '}',
                ObjectSerializer::toPathValue($warehousebatchid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );


        $operationHost = $this->config->getHost();

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWarehouseBatchItems
     *
     * @param  int $siteid siteid (required)
     * @param  int $warehouseid warehouseid (required)
     * @param  int $warehousebatchid warehousebatchid (required)
     * @param  int $start start (optional)
     * @param  int $num num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\GetWarehouseBatchItemsResponse
     */
    public function getWarehouseBatchItems($siteid, $warehouseid, $warehousebatchid, $start = null, $num = null, $fields = null)
    {
        list($response) = $this->getWarehouseBatchItemsWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $start, $num, $fields);
        return $response;
    }

    /**
     * Operation getWarehouseBatchItemsWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\GetWarehouseBatchItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWarehouseBatchItemsWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $start = null, $num = null, $fields = null)
    {
        $request = $this->getWarehouseBatchItemsRequest($siteid, $warehouseid, $warehousebatchid, $start, $num, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\GetWarehouseBatchItemsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\GetWarehouseBatchItemsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\GetWarehouseBatchItemsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\GetWarehouseBatchItemsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\GetWarehouseBatchItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWarehouseBatchItemsAsync
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWarehouseBatchItemsAsync($siteid, $warehouseid, $warehousebatchid, $start = null, $num = null, $fields = null)
    {
        return $this->getWarehouseBatchItemsAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $start, $num, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWarehouseBatchItemsAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWarehouseBatchItemsAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $start = null, $num = null, $fields = null)
    {
        $returnType = '\Spy\SitooClient\Model\GetWarehouseBatchItemsResponse';
        $request = $this->getWarehouseBatchItemsRequest($siteid, $warehouseid, $warehousebatchid, $start, $num, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWarehouseBatchItems'
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWarehouseBatchItemsRequest($siteid, $warehouseid, $warehousebatchid, $start = null, $num = null, $fields = null)
    {
        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling getWarehouseBatchItems'
            );
        }
        // verify the required parameter 'warehouseid' is set
        if ($warehouseid === null || (is_array($warehouseid) && count($warehouseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouseid when calling getWarehouseBatchItems'
            );
        }
        // verify the required parameter 'warehousebatchid' is set
        if ($warehousebatchid === null || (is_array($warehousebatchid) && count($warehousebatchid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehousebatchid when calling getWarehouseBatchItems'
            );
        }

        $resourcePath = '/sites/{siteid}/warehouses/{warehouseid}/warehousebatches/{warehousebatchid}/warehousebatchitems.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($start)) {
            $start = ObjectSerializer::serializeCollection($start, '', true);
        }
        if ($start !== null) {
            $queryParams['start'] = $start;
        }
        // query params
        if (is_array($num)) {
            $num = ObjectSerializer::serializeCollection($num, '', true);
        }
        if ($num !== null) {
            $queryParams['num'] = $num;
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'form', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $fields;
        }


        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($warehouseid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseid' . '}',
                ObjectSerializer::toPathValue($warehouseid),
                $resourcePath
            );
        }
        // path params
        if ($warehousebatchid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehousebatchid' . '}',
                ObjectSerializer::toPathValue($warehousebatchid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );


        $operationHost = $this->config->getHost();

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWarehouseBatches
     *
     * @param  int $siteid siteid (required)
     * @param  int $warehouseid warehouseid (required)
     * @param  int $transactiontype transactiontype (optional)
     * @param  int $warehousebatchstate warehousebatchstate (optional)
     * @param  int $start start (optional)
     * @param  int $num num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\GetWarehouseBatchesResponse
     */
    public function getWarehouseBatches($siteid, $warehouseid, $transactiontype = null, $warehousebatchstate = null, $start = null, $num = null, $fields = null)
    {
        list($response) = $this->getWarehouseBatchesWithHttpInfo($siteid, $warehouseid, $transactiontype, $warehousebatchstate, $start, $num, $fields);
        return $response;
    }

    /**
     * Operation getWarehouseBatchesWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $transactiontype (optional)
     * @param  int $warehousebatchstate (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\GetWarehouseBatchesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWarehouseBatchesWithHttpInfo($siteid, $warehouseid, $transactiontype = null, $warehousebatchstate = null, $start = null, $num = null, $fields = null)
    {
        $request = $this->getWarehouseBatchesRequest($siteid, $warehouseid, $transactiontype, $warehousebatchstate, $start, $num, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\GetWarehouseBatchesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\GetWarehouseBatchesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\GetWarehouseBatchesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\GetWarehouseBatchesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\GetWarehouseBatchesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWarehouseBatchesAsync
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $transactiontype (optional)
     * @param  int $warehousebatchstate (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWarehouseBatchesAsync($siteid, $warehouseid, $transactiontype = null, $warehousebatchstate = null, $start = null, $num = null, $fields = null)
    {
        return $this->getWarehouseBatchesAsyncWithHttpInfo($siteid, $warehouseid, $transactiontype, $warehousebatchstate, $start, $num, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWarehouseBatchesAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $transactiontype (optional)
     * @param  int $warehousebatchstate (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWarehouseBatchesAsyncWithHttpInfo($siteid, $warehouseid, $transactiontype = null, $warehousebatchstate = null, $start = null, $num = null, $fields = null)
    {
        $returnType = '\Spy\SitooClient\Model\GetWarehouseBatchesResponse';
        $request = $this->getWarehouseBatchesRequest($siteid, $warehouseid, $transactiontype, $warehousebatchstate, $start, $num, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWarehouseBatches'
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $transactiontype (optional)
     * @param  int $warehousebatchstate (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWarehouseBatchesRequest($siteid, $warehouseid, $transactiontype = null, $warehousebatchstate = null, $start = null, $num = null, $fields = null)
    {
        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling getWarehouseBatches'
            );
        }
        // verify the required parameter 'warehouseid' is set
        if ($warehouseid === null || (is_array($warehouseid) && count($warehouseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouseid when calling getWarehouseBatches'
            );
        }

        $resourcePath = '/sites/{siteid}/warehouses/{warehouseid}/warehousebatches.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($transactiontype)) {
            $transactiontype = ObjectSerializer::serializeCollection($transactiontype, '', true);
        }
        if ($transactiontype !== null) {
            $queryParams['transactiontype'] = $transactiontype;
        }
        // query params
        if (is_array($warehousebatchstate)) {
            $warehousebatchstate = ObjectSerializer::serializeCollection($warehousebatchstate, '', true);
        }
        if ($warehousebatchstate !== null) {
            $queryParams['warehousebatchstate'] = $warehousebatchstate;
        }
        // query params
        if (is_array($start)) {
            $start = ObjectSerializer::serializeCollection($start, '', true);
        }
        if ($start !== null) {
            $queryParams['start'] = $start;
        }
        // query params
        if (is_array($num)) {
            $num = ObjectSerializer::serializeCollection($num, '', true);
        }
        if ($num !== null) {
            $queryParams['num'] = $num;
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'form', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $fields;
        }


        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($warehouseid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseid' . '}',
                ObjectSerializer::toPathValue($warehouseid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );


        $operationHost = $this->config->getHost();

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWarehouseBatch
     *
     * @param  int $siteid siteid (required)
     * @param  int $warehouseid warehouseid (required)
     * @param  int $warehousebatchid warehousebatchid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchWrite $warehousebatchWrite warehousebatchWrite (required)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function updateWarehouseBatch($siteid, $warehouseid, $warehousebatchid, $warehousebatchWrite)
    {
        list($response) = $this->updateWarehouseBatchWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $warehousebatchWrite);
        return $response;
    }

    /**
     * Operation updateWarehouseBatchWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchWrite $warehousebatchWrite (required)
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWarehouseBatchWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $warehousebatchWrite)
    {
        $request = $this->updateWarehouseBatchRequest($siteid, $warehouseid, $warehousebatchid, $warehousebatchWrite);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWarehouseBatchAsync
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchWrite $warehousebatchWrite (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWarehouseBatchAsync($siteid, $warehouseid, $warehousebatchid, $warehousebatchWrite)
    {
        return $this->updateWarehouseBatchAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $warehousebatchWrite)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWarehouseBatchAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchWrite $warehousebatchWrite (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWarehouseBatchAsyncWithHttpInfo($siteid, $warehouseid, $warehousebatchid, $warehousebatchWrite)
    {
        $returnType = 'bool';
        $request = $this->updateWarehouseBatchRequest($siteid, $warehouseid, $warehousebatchid, $warehousebatchWrite);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWarehouseBatch'
     *
     * @param  int $siteid (required)
     * @param  int $warehouseid (required)
     * @param  int $warehousebatchid (required)
     * @param  \Spy\SitooClient\Model\WarehousebatchWrite $warehousebatchWrite (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateWarehouseBatchRequest($siteid, $warehouseid, $warehousebatchid, $warehousebatchWrite)
    {
        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling updateWarehouseBatch'
            );
        }
        // verify the required parameter 'warehouseid' is set
        if ($warehouseid === null || (is_array($warehouseid) && count($warehouseid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouseid when calling updateWarehouseBatch'
            );
        }
        // verify the required parameter 'warehousebatchid' is set
        if ($warehousebatchid === null || (is_array($warehousebatchid) && count($warehousebatchid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehousebatchid when calling updateWarehouseBatch'
            );
        }
        // verify the required parameter 'warehousebatchWrite' is set
        if ($warehousebatchWrite === null || (is_array($warehousebatchWrite) && count($warehousebatchWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehousebatchWrite when calling updateWarehouseBatch'
            );
        }

        $resourcePath = '/sites/{siteid}/warehouses/{warehouseid}/warehousebatches/{warehousebatchid}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($warehouseid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehouseid' . '}',
                ObjectSerializer::toPathValue($warehouseid),
                $resourcePath
            );
        }
        // path params
        if ($warehousebatchid !== null) {
            $resourcePath = str_replace(
                '{' . 'warehousebatchid' . '}',
                ObjectSerializer::toPathValue($warehousebatchid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($warehousebatchWrite)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($warehousebatchWrite));
            } else {
                $httpBody = $warehousebatchWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );


        $operationHost = $this->config->getHost();

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

		#region SPY Code
		$options[RequestOptions::HEADERS]	= [
			'X-OpenAPISpecVersion'	=> '1.0.0',
		];
		$bEnableXDebug	= $this->bXDebugOnNextRequest;

		if($bEnableXDebug === null)
		{
			$bEnableXDebug	= $this->bXDebugOnInstance;
		}

		$this->bXDebugOnNextRequest	= null;

		if($bEnableXDebug)
		{
			if(preg_match('/^(?:https?:\/\/)?([^\/:]+\.[^\/:]+)/i', $this->getConfig()->getHost(), $arrMatches) === 1)
			{
				$options['cookies'] = CookieJar::fromArray(
					[
						'XDEBUG_SESSION'	=> 'PHPSTORM',
					],
					$arrMatches[1]
				);
			}
		}
		#endregion

        return $options;
    }
}
