<?php
/**
 * OrdersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
#region SPY Code
use GuzzleHttp\Cookie\CookieJar;
#endregion
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Spy\SitooClient\ApiException;
use Spy\SitooClient\Configuration;
use Spy\SitooClient\HeaderSelector;
use Spy\SitooClient\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

	#region SPY Code
	protected $bXDebugOnInstance	= false;
	protected $bXDebugOnNextRequest;

	/**
	 * @param bool $bXDebugOnInstance
	 * @return $this
	 */
	public function setXDebugOnInstance(bool $bXDebugOnInstance)
	{
		$this->bXDebugOnInstance	= $bXDebugOnInstance;

		return $this;
	}

	/**
	 * @return $this
	 */
	public function setXDebugOnNextRequest()
	{
		$this->bXDebugOnNextRequest	= true;

		return $this;
	}

	/**
	 * Gets the OpenAPI Spec Version
	 *
	 * @return string
	 */
	public static function getSpecVersion()
	{
		return '1.0.0';
	}
	#endregion

    /**
    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addOrder' => [
            'application/json',
        ],
        'addOrderDelivery' => [
            'application/json',
        ],
        'addOrderLogItem' => [
            'application/json',
        ],
        'getAllOrders' => [
            'application/json',
        ],
        'getOrder' => [
            'application/json',
        ],
        'getOrderDeliveries' => [
            'application/json',
        ],
        'getOrderLogItems' => [
            'application/json',
        ],
        'getOrders' => [
            'application/json',
        ],
        'updateOrder' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addOrder
     *
     * @param  int $siteid siteid (required)
     * @param  \Spy\SitooClient\Model\OrderWrite $orderWrite orderWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrder'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addOrder($siteid, $orderWrite, string $contentType = self::contentTypes['addOrder'][0])
    {
        $this->addOrderWithHttpInfo($siteid, $orderWrite, $contentType);
    }

    /**
     * Operation addOrderWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  \Spy\SitooClient\Model\OrderWrite $orderWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrder'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addOrderWithHttpInfo($siteid, $orderWrite, string $contentType = self::contentTypes['addOrder'][0])
    {
        $request = $this->addOrderRequest($siteid, $orderWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addOrderAsync
     *
     * @param  int $siteid (required)
     * @param  \Spy\SitooClient\Model\OrderWrite $orderWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addOrderAsync($siteid, $orderWrite, string $contentType = self::contentTypes['addOrder'][0])
    {
        return $this->addOrderAsyncWithHttpInfo($siteid, $orderWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addOrderAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  \Spy\SitooClient\Model\OrderWrite $orderWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addOrderAsyncWithHttpInfo($siteid, $orderWrite, string $contentType = self::contentTypes['addOrder'][0])
    {
        $returnType = '';
        $request = $this->addOrderRequest($siteid, $orderWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addOrder'
     *
     * @param  int $siteid (required)
     * @param  \Spy\SitooClient\Model\OrderWrite $orderWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addOrderRequest($siteid, $orderWrite, string $contentType = self::contentTypes['addOrder'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling addOrder'
            );
        }

        // verify the required parameter 'orderWrite' is set
        if ($orderWrite === null || (is_array($orderWrite) && count($orderWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderWrite when calling addOrder'
            );
        }


        $resourcePath = '/sites/{siteid}/orders.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($orderWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderWrite));
            } else {
                $httpBody = $orderWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addOrderDelivery
     *
     * @param  int $siteid siteid (required)
     * @param  int $orderid orderid (required)
     * @param  \Spy\SitooClient\Model\OrderdeliveryWrite $orderdeliveryWrite orderdeliveryWrite (required)
     * @param  bool $ignorestock ignorestock (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrderDelivery'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addOrderDelivery($siteid, $orderid, $orderdeliveryWrite, $ignorestock = null, string $contentType = self::contentTypes['addOrderDelivery'][0])
    {
        $this->addOrderDeliveryWithHttpInfo($siteid, $orderid, $orderdeliveryWrite, $ignorestock, $contentType);
    }

    /**
     * Operation addOrderDeliveryWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderdeliveryWrite $orderdeliveryWrite (required)
     * @param  bool $ignorestock (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrderDelivery'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addOrderDeliveryWithHttpInfo($siteid, $orderid, $orderdeliveryWrite, $ignorestock = null, string $contentType = self::contentTypes['addOrderDelivery'][0])
    {
        $request = $this->addOrderDeliveryRequest($siteid, $orderid, $orderdeliveryWrite, $ignorestock, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addOrderDeliveryAsync
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderdeliveryWrite $orderdeliveryWrite (required)
     * @param  bool $ignorestock (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrderDelivery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addOrderDeliveryAsync($siteid, $orderid, $orderdeliveryWrite, $ignorestock = null, string $contentType = self::contentTypes['addOrderDelivery'][0])
    {
        return $this->addOrderDeliveryAsyncWithHttpInfo($siteid, $orderid, $orderdeliveryWrite, $ignorestock, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addOrderDeliveryAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderdeliveryWrite $orderdeliveryWrite (required)
     * @param  bool $ignorestock (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrderDelivery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addOrderDeliveryAsyncWithHttpInfo($siteid, $orderid, $orderdeliveryWrite, $ignorestock = null, string $contentType = self::contentTypes['addOrderDelivery'][0])
    {
        $returnType = '';
        $request = $this->addOrderDeliveryRequest($siteid, $orderid, $orderdeliveryWrite, $ignorestock, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addOrderDelivery'
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderdeliveryWrite $orderdeliveryWrite (required)
     * @param  bool $ignorestock (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrderDelivery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addOrderDeliveryRequest($siteid, $orderid, $orderdeliveryWrite, $ignorestock = null, string $contentType = self::contentTypes['addOrderDelivery'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling addOrderDelivery'
            );
        }

        // verify the required parameter 'orderid' is set
        if ($orderid === null || (is_array($orderid) && count($orderid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderid when calling addOrderDelivery'
            );
        }

        // verify the required parameter 'orderdeliveryWrite' is set
        if ($orderdeliveryWrite === null || (is_array($orderdeliveryWrite) && count($orderdeliveryWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderdeliveryWrite when calling addOrderDelivery'
            );
        }



        $resourcePath = '/sites/{siteid}/orders/{orderid}/orderdeliveries.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignorestock,
            'ignorestock', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($orderid !== null) {
            $resourcePath = str_replace(
                '{' . 'orderid' . '}',
                ObjectSerializer::toPathValue($orderid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($orderdeliveryWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderdeliveryWrite));
            } else {
                $httpBody = $orderdeliveryWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addOrderLogItem
     *
     * @param  int $siteid siteid (required)
     * @param  int $orderid orderid (required)
     * @param  \Spy\SitooClient\Model\OrderlogitemWrite $orderlogitemWrite orderlogitemWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrderLogItem'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function addOrderLogItem($siteid, $orderid, $orderlogitemWrite, string $contentType = self::contentTypes['addOrderLogItem'][0])
    {
        list($response) = $this->addOrderLogItemWithHttpInfo($siteid, $orderid, $orderlogitemWrite, $contentType);
        return $response;
    }

    /**
     * Operation addOrderLogItemWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderlogitemWrite $orderlogitemWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrderLogItem'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function addOrderLogItemWithHttpInfo($siteid, $orderid, $orderlogitemWrite, string $contentType = self::contentTypes['addOrderLogItem'][0])
    {
        $request = $this->addOrderLogItemRequest($siteid, $orderid, $orderlogitemWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addOrderLogItemAsync
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderlogitemWrite $orderlogitemWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrderLogItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addOrderLogItemAsync($siteid, $orderid, $orderlogitemWrite, string $contentType = self::contentTypes['addOrderLogItem'][0])
    {
        return $this->addOrderLogItemAsyncWithHttpInfo($siteid, $orderid, $orderlogitemWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addOrderLogItemAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderlogitemWrite $orderlogitemWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrderLogItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addOrderLogItemAsyncWithHttpInfo($siteid, $orderid, $orderlogitemWrite, string $contentType = self::contentTypes['addOrderLogItem'][0])
    {
        $returnType = 'bool';
        $request = $this->addOrderLogItemRequest($siteid, $orderid, $orderlogitemWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addOrderLogItem'
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderlogitemWrite $orderlogitemWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrderLogItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addOrderLogItemRequest($siteid, $orderid, $orderlogitemWrite, string $contentType = self::contentTypes['addOrderLogItem'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling addOrderLogItem'
            );
        }

        // verify the required parameter 'orderid' is set
        if ($orderid === null || (is_array($orderid) && count($orderid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderid when calling addOrderLogItem'
            );
        }

        // verify the required parameter 'orderlogitemWrite' is set
        if ($orderlogitemWrite === null || (is_array($orderlogitemWrite) && count($orderlogitemWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderlogitemWrite when calling addOrderLogItem'
            );
        }


        $resourcePath = '/sites/{siteid}/orders/{orderid}/orderlogitems.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($orderid !== null) {
            $resourcePath = str_replace(
                '{' . 'orderid' . '}',
                ObjectSerializer::toPathValue($orderid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($orderlogitemWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderlogitemWrite));
            } else {
                $httpBody = $orderlogitemWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllOrders
     *
     * @param  int[] $eshopid eshopid (optional)
     * @param  string[] $externalid externalid (optional)
     * @param  int[] $orderid orderid (optional)
     * @param  int $orderidfrom orderidfrom (optional)
     * @param  int $orderidto orderidto (optional)
     * @param  int $orderdatefrom orderdatefrom (optional)
     * @param  int $orderdateto orderdateto (optional)
     * @param  int[] $orderstate orderstate (optional)
     * @param  int[] $paymentstate paymentstate (optional)
     * @param  int[] $ordertype ordertype (optional)
     * @param  string $email email (optional)
     * @param  int $start start (optional)
     * @param  int $num num (optional)
     * @param  string $sort sort (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllOrders'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\GetAllOrdersResponse
     */
    public function getAllOrders($eshopid = null, $externalid = null, $orderid = null, $orderidfrom = null, $orderidto = null, $orderdatefrom = null, $orderdateto = null, $orderstate = null, $paymentstate = null, $ordertype = null, $email = null, $start = null, $num = null, $sort = null, $fields = null, string $contentType = self::contentTypes['getAllOrders'][0])
    {
        list($response) = $this->getAllOrdersWithHttpInfo($eshopid, $externalid, $orderid, $orderidfrom, $orderidto, $orderdatefrom, $orderdateto, $orderstate, $paymentstate, $ordertype, $email, $start, $num, $sort, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getAllOrdersWithHttpInfo
     *
     * @param  int[] $eshopid (optional)
     * @param  string[] $externalid (optional)
     * @param  int[] $orderid (optional)
     * @param  int $orderidfrom (optional)
     * @param  int $orderidto (optional)
     * @param  int $orderdatefrom (optional)
     * @param  int $orderdateto (optional)
     * @param  int[] $orderstate (optional)
     * @param  int[] $paymentstate (optional)
     * @param  int[] $ordertype (optional)
     * @param  string $email (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string $sort (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllOrders'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\GetAllOrdersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllOrdersWithHttpInfo($eshopid = null, $externalid = null, $orderid = null, $orderidfrom = null, $orderidto = null, $orderdatefrom = null, $orderdateto = null, $orderstate = null, $paymentstate = null, $ordertype = null, $email = null, $start = null, $num = null, $sort = null, $fields = null, string $contentType = self::contentTypes['getAllOrders'][0])
    {
        $request = $this->getAllOrdersRequest($eshopid, $externalid, $orderid, $orderidfrom, $orderidto, $orderdatefrom, $orderdateto, $orderstate, $paymentstate, $ordertype, $email, $start, $num, $sort, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\GetAllOrdersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\GetAllOrdersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\GetAllOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\GetAllOrdersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\GetAllOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllOrdersAsync
     *
     * @param  int[] $eshopid (optional)
     * @param  string[] $externalid (optional)
     * @param  int[] $orderid (optional)
     * @param  int $orderidfrom (optional)
     * @param  int $orderidto (optional)
     * @param  int $orderdatefrom (optional)
     * @param  int $orderdateto (optional)
     * @param  int[] $orderstate (optional)
     * @param  int[] $paymentstate (optional)
     * @param  int[] $ordertype (optional)
     * @param  string $email (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string $sort (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllOrdersAsync($eshopid = null, $externalid = null, $orderid = null, $orderidfrom = null, $orderidto = null, $orderdatefrom = null, $orderdateto = null, $orderstate = null, $paymentstate = null, $ordertype = null, $email = null, $start = null, $num = null, $sort = null, $fields = null, string $contentType = self::contentTypes['getAllOrders'][0])
    {
        return $this->getAllOrdersAsyncWithHttpInfo($eshopid, $externalid, $orderid, $orderidfrom, $orderidto, $orderdatefrom, $orderdateto, $orderstate, $paymentstate, $ordertype, $email, $start, $num, $sort, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllOrdersAsyncWithHttpInfo
     *
     * @param  int[] $eshopid (optional)
     * @param  string[] $externalid (optional)
     * @param  int[] $orderid (optional)
     * @param  int $orderidfrom (optional)
     * @param  int $orderidto (optional)
     * @param  int $orderdatefrom (optional)
     * @param  int $orderdateto (optional)
     * @param  int[] $orderstate (optional)
     * @param  int[] $paymentstate (optional)
     * @param  int[] $ordertype (optional)
     * @param  string $email (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string $sort (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllOrdersAsyncWithHttpInfo($eshopid = null, $externalid = null, $orderid = null, $orderidfrom = null, $orderidto = null, $orderdatefrom = null, $orderdateto = null, $orderstate = null, $paymentstate = null, $ordertype = null, $email = null, $start = null, $num = null, $sort = null, $fields = null, string $contentType = self::contentTypes['getAllOrders'][0])
    {
        $returnType = '\Spy\SitooClient\Model\GetAllOrdersResponse';
        $request = $this->getAllOrdersRequest($eshopid, $externalid, $orderid, $orderidfrom, $orderidto, $orderdatefrom, $orderdateto, $orderstate, $paymentstate, $ordertype, $email, $start, $num, $sort, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllOrders'
     *
     * @param  int[] $eshopid (optional)
     * @param  string[] $externalid (optional)
     * @param  int[] $orderid (optional)
     * @param  int $orderidfrom (optional)
     * @param  int $orderidto (optional)
     * @param  int $orderdatefrom (optional)
     * @param  int $orderdateto (optional)
     * @param  int[] $orderstate (optional)
     * @param  int[] $paymentstate (optional)
     * @param  int[] $ordertype (optional)
     * @param  string $email (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string $sort (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllOrdersRequest($eshopid = null, $externalid = null, $orderid = null, $orderidfrom = null, $orderidto = null, $orderdatefrom = null, $orderdateto = null, $orderstate = null, $paymentstate = null, $ordertype = null, $email = null, $start = null, $num = null, $sort = null, $fields = null, string $contentType = self::contentTypes['getAllOrders'][0])
    {

















        $resourcePath = '/orders.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eshopid,
            'eshopid', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $externalid,
            'externalid', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderid,
            'orderid', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderidfrom,
            'orderidfrom', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderidto,
            'orderidto', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderdatefrom,
            'orderdatefrom', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderdateto,
            'orderdateto', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderstate,
            'orderstate', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentstate,
            'paymentstate', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordertype,
            'ordertype', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $num,
            'num', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrder
     *
     * @param  int $siteid siteid (required)
     * @param  int $orderid orderid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrder'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\OrderRead
     */
    public function getOrder($siteid, $orderid, string $contentType = self::contentTypes['getOrder'][0])
    {
        list($response) = $this->getOrderWithHttpInfo($siteid, $orderid, $contentType);
        return $response;
    }

    /**
     * Operation getOrderWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrder'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\OrderRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderWithHttpInfo($siteid, $orderid, string $contentType = self::contentTypes['getOrder'][0])
    {
        $request = $this->getOrderRequest($siteid, $orderid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\OrderRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\OrderRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\OrderRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\OrderRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\OrderRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderAsync
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderAsync($siteid, $orderid, string $contentType = self::contentTypes['getOrder'][0])
    {
        return $this->getOrderAsyncWithHttpInfo($siteid, $orderid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderAsyncWithHttpInfo($siteid, $orderid, string $contentType = self::contentTypes['getOrder'][0])
    {
        $returnType = '\Spy\SitooClient\Model\OrderRead';
        $request = $this->getOrderRequest($siteid, $orderid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrder'
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderRequest($siteid, $orderid, string $contentType = self::contentTypes['getOrder'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling getOrder'
            );
        }

        // verify the required parameter 'orderid' is set
        if ($orderid === null || (is_array($orderid) && count($orderid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderid when calling getOrder'
            );
        }


        $resourcePath = '/sites/{siteid}/orders/{orderid}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($orderid !== null) {
            $resourcePath = str_replace(
                '{' . 'orderid' . '}',
                ObjectSerializer::toPathValue($orderid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderDeliveries
     *
     * @param  int $siteid siteid (required)
     * @param  int $orderid orderid (required)
     * @param  bool $ignorestock ignorestock (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderDeliveries'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\GetOrderDeliveriesResponse
     */
    public function getOrderDeliveries($siteid, $orderid, $ignorestock = null, string $contentType = self::contentTypes['getOrderDeliveries'][0])
    {
        list($response) = $this->getOrderDeliveriesWithHttpInfo($siteid, $orderid, $ignorestock, $contentType);
        return $response;
    }

    /**
     * Operation getOrderDeliveriesWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  bool $ignorestock (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderDeliveries'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\GetOrderDeliveriesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderDeliveriesWithHttpInfo($siteid, $orderid, $ignorestock = null, string $contentType = self::contentTypes['getOrderDeliveries'][0])
    {
        $request = $this->getOrderDeliveriesRequest($siteid, $orderid, $ignorestock, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\GetOrderDeliveriesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\GetOrderDeliveriesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\GetOrderDeliveriesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\GetOrderDeliveriesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\GetOrderDeliveriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderDeliveriesAsync
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  bool $ignorestock (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderDeliveries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderDeliveriesAsync($siteid, $orderid, $ignorestock = null, string $contentType = self::contentTypes['getOrderDeliveries'][0])
    {
        return $this->getOrderDeliveriesAsyncWithHttpInfo($siteid, $orderid, $ignorestock, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderDeliveriesAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  bool $ignorestock (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderDeliveries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderDeliveriesAsyncWithHttpInfo($siteid, $orderid, $ignorestock = null, string $contentType = self::contentTypes['getOrderDeliveries'][0])
    {
        $returnType = '\Spy\SitooClient\Model\GetOrderDeliveriesResponse';
        $request = $this->getOrderDeliveriesRequest($siteid, $orderid, $ignorestock, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderDeliveries'
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  bool $ignorestock (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderDeliveries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderDeliveriesRequest($siteid, $orderid, $ignorestock = null, string $contentType = self::contentTypes['getOrderDeliveries'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling getOrderDeliveries'
            );
        }

        // verify the required parameter 'orderid' is set
        if ($orderid === null || (is_array($orderid) && count($orderid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderid when calling getOrderDeliveries'
            );
        }



        $resourcePath = '/sites/{siteid}/orders/{orderid}/orderdeliveries.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ignorestock,
            'ignorestock', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($orderid !== null) {
            $resourcePath = str_replace(
                '{' . 'orderid' . '}',
                ObjectSerializer::toPathValue($orderid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderLogItems
     *
     * @param  int $siteid siteid (required)
     * @param  int $orderid orderid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderLogItems'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\GetOrderLogItemsResponse
     */
    public function getOrderLogItems($siteid, $orderid, string $contentType = self::contentTypes['getOrderLogItems'][0])
    {
        list($response) = $this->getOrderLogItemsWithHttpInfo($siteid, $orderid, $contentType);
        return $response;
    }

    /**
     * Operation getOrderLogItemsWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderLogItems'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\GetOrderLogItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderLogItemsWithHttpInfo($siteid, $orderid, string $contentType = self::contentTypes['getOrderLogItems'][0])
    {
        $request = $this->getOrderLogItemsRequest($siteid, $orderid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\GetOrderLogItemsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\GetOrderLogItemsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\GetOrderLogItemsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\GetOrderLogItemsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\GetOrderLogItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderLogItemsAsync
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderLogItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderLogItemsAsync($siteid, $orderid, string $contentType = self::contentTypes['getOrderLogItems'][0])
    {
        return $this->getOrderLogItemsAsyncWithHttpInfo($siteid, $orderid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderLogItemsAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderLogItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderLogItemsAsyncWithHttpInfo($siteid, $orderid, string $contentType = self::contentTypes['getOrderLogItems'][0])
    {
        $returnType = '\Spy\SitooClient\Model\GetOrderLogItemsResponse';
        $request = $this->getOrderLogItemsRequest($siteid, $orderid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderLogItems'
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderLogItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderLogItemsRequest($siteid, $orderid, string $contentType = self::contentTypes['getOrderLogItems'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling getOrderLogItems'
            );
        }

        // verify the required parameter 'orderid' is set
        if ($orderid === null || (is_array($orderid) && count($orderid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderid when calling getOrderLogItems'
            );
        }


        $resourcePath = '/sites/{siteid}/orders/{orderid}/orderlogitems.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($orderid !== null) {
            $resourcePath = str_replace(
                '{' . 'orderid' . '}',
                ObjectSerializer::toPathValue($orderid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrders
     *
     * @param  int $siteid siteid (required)
     * @param  string[] $externalid externalid (optional)
     * @param  int[] $orderid orderid (optional)
     * @param  int $orderidfrom orderidfrom (optional)
     * @param  int $orderidto orderidto (optional)
     * @param  int $orderdatefrom orderdatefrom (optional)
     * @param  int $orderdateto orderdateto (optional)
     * @param  int[] $orderstate orderstate (optional)
     * @param  int[] $paymentstate paymentstate (optional)
     * @param  int[] $ordertype ordertype (optional)
     * @param  string $email email (optional)
     * @param  int $start start (optional)
     * @param  int $num num (optional)
     * @param  string $sort sort (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrders'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Spy\SitooClient\Model\GetOrdersResponse
     * @deprecated
     */
    public function getOrders($siteid, $externalid = null, $orderid = null, $orderidfrom = null, $orderidto = null, $orderdatefrom = null, $orderdateto = null, $orderstate = null, $paymentstate = null, $ordertype = null, $email = null, $start = null, $num = null, $sort = null, $fields = null, string $contentType = self::contentTypes['getOrders'][0])
    {
        list($response) = $this->getOrdersWithHttpInfo($siteid, $externalid, $orderid, $orderidfrom, $orderidto, $orderdatefrom, $orderdateto, $orderstate, $paymentstate, $ordertype, $email, $start, $num, $sort, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getOrdersWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  string[] $externalid (optional)
     * @param  int[] $orderid (optional)
     * @param  int $orderidfrom (optional)
     * @param  int $orderidto (optional)
     * @param  int $orderdatefrom (optional)
     * @param  int $orderdateto (optional)
     * @param  int[] $orderstate (optional)
     * @param  int[] $paymentstate (optional)
     * @param  int[] $ordertype (optional)
     * @param  string $email (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string $sort (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrders'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Spy\SitooClient\Model\GetOrdersResponse, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getOrdersWithHttpInfo($siteid, $externalid = null, $orderid = null, $orderidfrom = null, $orderidto = null, $orderdatefrom = null, $orderdateto = null, $orderstate = null, $paymentstate = null, $ordertype = null, $email = null, $start = null, $num = null, $sort = null, $fields = null, string $contentType = self::contentTypes['getOrders'][0])
    {
        $request = $this->getOrdersRequest($siteid, $externalid, $orderid, $orderidfrom, $orderidto, $orderdatefrom, $orderdateto, $orderstate, $paymentstate, $ordertype, $email, $start, $num, $sort, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Spy\SitooClient\Model\GetOrdersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Spy\SitooClient\Model\GetOrdersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Spy\SitooClient\Model\GetOrdersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Spy\SitooClient\Model\GetOrdersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Spy\SitooClient\Model\GetOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrdersAsync
     *
     * @param  int $siteid (required)
     * @param  string[] $externalid (optional)
     * @param  int[] $orderid (optional)
     * @param  int $orderidfrom (optional)
     * @param  int $orderidto (optional)
     * @param  int $orderdatefrom (optional)
     * @param  int $orderdateto (optional)
     * @param  int[] $orderstate (optional)
     * @param  int[] $paymentstate (optional)
     * @param  int[] $ordertype (optional)
     * @param  string $email (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string $sort (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getOrdersAsync($siteid, $externalid = null, $orderid = null, $orderidfrom = null, $orderidto = null, $orderdatefrom = null, $orderdateto = null, $orderstate = null, $paymentstate = null, $ordertype = null, $email = null, $start = null, $num = null, $sort = null, $fields = null, string $contentType = self::contentTypes['getOrders'][0])
    {
        return $this->getOrdersAsyncWithHttpInfo($siteid, $externalid, $orderid, $orderidfrom, $orderidto, $orderdatefrom, $orderdateto, $orderstate, $paymentstate, $ordertype, $email, $start, $num, $sort, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrdersAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  string[] $externalid (optional)
     * @param  int[] $orderid (optional)
     * @param  int $orderidfrom (optional)
     * @param  int $orderidto (optional)
     * @param  int $orderdatefrom (optional)
     * @param  int $orderdateto (optional)
     * @param  int[] $orderstate (optional)
     * @param  int[] $paymentstate (optional)
     * @param  int[] $ordertype (optional)
     * @param  string $email (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string $sort (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getOrdersAsyncWithHttpInfo($siteid, $externalid = null, $orderid = null, $orderidfrom = null, $orderidto = null, $orderdatefrom = null, $orderdateto = null, $orderstate = null, $paymentstate = null, $ordertype = null, $email = null, $start = null, $num = null, $sort = null, $fields = null, string $contentType = self::contentTypes['getOrders'][0])
    {
        $returnType = '\Spy\SitooClient\Model\GetOrdersResponse';
        $request = $this->getOrdersRequest($siteid, $externalid, $orderid, $orderidfrom, $orderidto, $orderdatefrom, $orderdateto, $orderstate, $paymentstate, $ordertype, $email, $start, $num, $sort, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrders'
     *
     * @param  int $siteid (required)
     * @param  string[] $externalid (optional)
     * @param  int[] $orderid (optional)
     * @param  int $orderidfrom (optional)
     * @param  int $orderidto (optional)
     * @param  int $orderdatefrom (optional)
     * @param  int $orderdateto (optional)
     * @param  int[] $orderstate (optional)
     * @param  int[] $paymentstate (optional)
     * @param  int[] $ordertype (optional)
     * @param  string $email (optional)
     * @param  int $start (optional)
     * @param  int $num (optional)
     * @param  string $sort (optional)
     * @param  string[] $fields list of fields, comma-separated (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getOrdersRequest($siteid, $externalid = null, $orderid = null, $orderidfrom = null, $orderidto = null, $orderdatefrom = null, $orderdateto = null, $orderstate = null, $paymentstate = null, $ordertype = null, $email = null, $start = null, $num = null, $sort = null, $fields = null, string $contentType = self::contentTypes['getOrders'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling getOrders'
            );
        }
















        $resourcePath = '/sites/{siteid}/orders.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $externalid,
            'externalid', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderid,
            'orderid', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderidfrom,
            'orderidfrom', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderidto,
            'orderidto', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderdatefrom,
            'orderdatefrom', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderdateto,
            'orderdateto', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderstate,
            'orderstate', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paymentstate,
            'paymentstate', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ordertype,
            'ordertype', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $num,
            'num', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrder
     *
     * @param  int $siteid siteid (required)
     * @param  int $orderid orderid (required)
     * @param  \Spy\SitooClient\Model\OrderWrite $orderWrite orderWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrder'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function updateOrder($siteid, $orderid, $orderWrite, string $contentType = self::contentTypes['updateOrder'][0])
    {
        list($response) = $this->updateOrderWithHttpInfo($siteid, $orderid, $orderWrite, $contentType);
        return $response;
    }

    /**
     * Operation updateOrderWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderWrite $orderWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrder'] to see the possible values for this operation
     *
     * @throws \Spy\SitooClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrderWithHttpInfo($siteid, $orderid, $orderWrite, string $contentType = self::contentTypes['updateOrder'][0])
    {
        $request = $this->updateOrderRequest($siteid, $orderid, $orderWrite, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrderAsync
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderWrite $orderWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrderAsync($siteid, $orderid, $orderWrite, string $contentType = self::contentTypes['updateOrder'][0])
    {
        return $this->updateOrderAsyncWithHttpInfo($siteid, $orderid, $orderWrite, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrderAsyncWithHttpInfo
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderWrite $orderWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrderAsyncWithHttpInfo($siteid, $orderid, $orderWrite, string $contentType = self::contentTypes['updateOrder'][0])
    {
        $returnType = 'bool';
        $request = $this->updateOrderRequest($siteid, $orderid, $orderWrite, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrder'
     *
     * @param  int $siteid (required)
     * @param  int $orderid (required)
     * @param  \Spy\SitooClient\Model\OrderWrite $orderWrite (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrderRequest($siteid, $orderid, $orderWrite, string $contentType = self::contentTypes['updateOrder'][0])
    {

        // verify the required parameter 'siteid' is set
        if ($siteid === null || (is_array($siteid) && count($siteid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteid when calling updateOrder'
            );
        }

        // verify the required parameter 'orderid' is set
        if ($orderid === null || (is_array($orderid) && count($orderid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderid when calling updateOrder'
            );
        }

        // verify the required parameter 'orderWrite' is set
        if ($orderWrite === null || (is_array($orderWrite) && count($orderWrite) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderWrite when calling updateOrder'
            );
        }


        $resourcePath = '/sites/{siteid}/orders/{orderid}.json';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($siteid !== null) {
            $resourcePath = str_replace(
                '{' . 'siteid' . '}',
                ObjectSerializer::toPathValue($siteid),
                $resourcePath
            );
        }
        // path params
        if ($orderid !== null) {
            $resourcePath = str_replace(
                '{' . 'orderid' . '}',
                ObjectSerializer::toPathValue($orderid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($orderWrite)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderWrite));
            } else {
                $httpBody = $orderWrite;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

		#region SPY Code
		$options[RequestOptions::HEADERS]	= [
			'X-OpenAPISpecVersion'	=> '1.0.0',
		];
		$bEnableXDebug	= $this->bXDebugOnNextRequest;

		if($bEnableXDebug === null)
		{
			$bEnableXDebug	= $this->bXDebugOnInstance;
		}

		$this->bXDebugOnNextRequest	= null;

		if($bEnableXDebug)
		{
			if(preg_match('/^(?:https?:\/\/)?([^\/:]+\.[^\/:]+)/i', $this->getConfig()->getHost(), $arrMatches) === 1)
			{
				$options['cookies'] = CookieJar::fromArray(
					[
						'XDEBUG_SESSION'	=> 'PHPSTORM',
					],
					$arrMatches[1]
				);
			}
		}
		#endregion

        return $options;
    }
}
