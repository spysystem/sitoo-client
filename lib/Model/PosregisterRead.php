<?php
/**
 * PosregisterRead
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Model;

use \ArrayAccess;
use \Spy\SitooClient\ObjectSerializer;

/**
 * PosregisterRead Class Doc Comment
 *
 * @category Class
 * @description Cash register. Point of Sale (POS).
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PosregisterRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'posregister-read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'registerid' => 'string',
        'manufacturerid' => 'string',
        'registerkey' => 'string',
        'company' => 'string',
        'companyid' => 'string',
        'address' => 'string',
        'address2' => 'string',
        'zip' => 'string',
        'city' => 'string',
        'state' => 'string',
        'countryid' => 'string',
        'currencycode' => 'string',
        'receiptlanguagetag' => 'string',
        'storesettingid' => 'int',
        'warehouseid' => 'int',
        'salestaxgroupid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'registerid' => null,
        'manufacturerid' => null,
        'registerkey' => null,
        'company' => null,
        'companyid' => null,
        'address' => null,
        'address2' => null,
        'zip' => null,
        'city' => null,
        'state' => null,
        'countryid' => null,
        'currencycode' => null,
        'receiptlanguagetag' => null,
        'storesettingid' => null,
        'warehouseid' => null,
        'salestaxgroupid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'registerid' => false,
		'manufacturerid' => false,
		'registerkey' => false,
		'company' => false,
		'companyid' => false,
		'address' => false,
		'address2' => false,
		'zip' => false,
		'city' => false,
		'state' => false,
		'countryid' => false,
		'currencycode' => false,
		'receiptlanguagetag' => false,
		'storesettingid' => false,
		'warehouseid' => false,
		'salestaxgroupid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of property to nullable mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPINullables()
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array
     */
    public function getOpenAPINullablesSetToNull()
    {
        return $this->openAPINullablesSetToNull;
    }

    public function setOpenAPINullablesSetToNull($nullablesSetToNull)
    {
        $this->openAPINullablesSetToNull=$nullablesSetToNull;

        return $this;
    }

    /**
     * Checks if a property is nullable
     *
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        if (isset(self::$openAPINullables[$property])) {
            return self::$openAPINullables[$property];
        }

        return false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        if (in_array($property, $this->getOpenAPINullablesSetToNull())) {
            return true;
        }
        return false;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'registerid' => 'registerid',
        'manufacturerid' => 'manufacturerid',
        'registerkey' => 'registerkey',
        'company' => 'company',
        'companyid' => 'companyid',
        'address' => 'address',
        'address2' => 'address2',
        'zip' => 'zip',
        'city' => 'city',
        'state' => 'state',
        'countryid' => 'countryid',
        'currencycode' => 'currencycode',
        'receiptlanguagetag' => 'receiptlanguagetag',
        'storesettingid' => 'storesettingid',
        'warehouseid' => 'warehouseid',
        'salestaxgroupid' => 'salestaxgroupid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'registerid' => 'setRegisterid',
        'manufacturerid' => 'setManufacturerid',
        'registerkey' => 'setRegisterkey',
        'company' => 'setCompany',
        'companyid' => 'setCompanyid',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'zip' => 'setZip',
        'city' => 'setCity',
        'state' => 'setState',
        'countryid' => 'setCountryid',
        'currencycode' => 'setCurrencycode',
        'receiptlanguagetag' => 'setReceiptlanguagetag',
        'storesettingid' => 'setStoresettingid',
        'warehouseid' => 'setWarehouseid',
        'salestaxgroupid' => 'setSalestaxgroupid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'registerid' => 'getRegisterid',
        'manufacturerid' => 'getManufacturerid',
        'registerkey' => 'getRegisterkey',
        'company' => 'getCompany',
        'companyid' => 'getCompanyid',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'zip' => 'getZip',
        'city' => 'getCity',
        'state' => 'getState',
        'countryid' => 'getCountryid',
        'currencycode' => 'getCurrencycode',
        'receiptlanguagetag' => 'getReceiptlanguagetag',
        'storesettingid' => 'getStoresettingid',
        'warehouseid' => 'getWarehouseid',
        'salestaxgroupid' => 'getSalestaxgroupid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('registerid', $data, null);
        $this->setIfExists('manufacturerid', $data, null);
        $this->setIfExists('registerkey', $data, null);
        $this->setIfExists('company', $data, null);
        $this->setIfExists('companyid', $data, null);
        $this->setIfExists('address', $data, null);
        $this->setIfExists('address2', $data, null);
        $this->setIfExists('zip', $data, null);
        $this->setIfExists('city', $data, null);
        $this->setIfExists('state', $data, null);
        $this->setIfExists('countryid', $data, null);
        $this->setIfExists('currencycode', $data, null);
        $this->setIfExists('receiptlanguagetag', $data, null);
        $this->setIfExists('storesettingid', $data, null);
        $this->setIfExists('warehouseid', $data, null);
        $this->setIfExists('salestaxgroupid', $data, null);
    }

    public function setIfExists(string $variableName, $fields, $defaultValue)
    {
        if (is_array($fields) && array_key_exists($variableName, $fields) && is_null($fields[$variableName]) && self::isNullable($variableName)) {
            array_push($this->openAPINullablesSetToNull, $variableName);
        }

        $this->container[$variableName] = isset($fields[$variableName]) ? $fields[$variableName] : $defaultValue;

        return $this;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets registerid
     *
     * @return string|null
     */
    public function getRegisterid()
    {
        return $this->container['registerid'];
    }

    /**
     * Sets registerid
     *
     * @param string|null $registerid Unique ID for this Cash Register.
     *
     * @return self
     */
    public function setRegisterid($registerid)
    {

        if (is_null($registerid)) {
            throw new \InvalidArgumentException('non-nullable registerid cannot be null');
        }

        $this->container['registerid'] = $registerid;

        return $this;
    }

    /**
     * Gets manufacturerid
     *
     * @return string|null
     */
    public function getManufacturerid()
    {
        return $this->container['manufacturerid'];
    }

    /**
     * Sets manufacturerid
     *
     * @param string|null $manufacturerid Manufacturer ID for this Cash Register used by the Tax Authorities (In Swedish: Tillverkningsnummer).
     *
     * @return self
     */
    public function setManufacturerid($manufacturerid)
    {

        if (is_null($manufacturerid)) {
            throw new \InvalidArgumentException('non-nullable manufacturerid cannot be null');
        }

        $this->container['manufacturerid'] = $manufacturerid;

        return $this;
    }

    /**
     * Gets registerkey
     *
     * @return string|null
     */
    public function getRegisterkey()
    {
        return $this->container['registerkey'];
    }

    /**
     * Sets registerkey
     *
     * @param string|null $registerkey Key for this Cash Register used by the Tax Authorities (In Swedish: Kassabeteckning).
     *
     * @return self
     */
    public function setRegisterkey($registerkey)
    {

        if (is_null($registerkey)) {
            throw new \InvalidArgumentException('non-nullable registerkey cannot be null');
        }

        $this->container['registerkey'] = $registerkey;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Company Name.
     *
     * @return self
     */
    public function setCompany($company)
    {

        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets companyid
     *
     * @return string|null
     */
    public function getCompanyid()
    {
        return $this->container['companyid'];
    }

    /**
     * Sets companyid
     *
     * @param string|null $companyid Company ID.
     *
     * @return self
     */
    public function setCompanyid($companyid)
    {

        if (is_null($companyid)) {
            throw new \InvalidArgumentException('non-nullable companyid cannot be null');
        }

        $this->container['companyid'] = $companyid;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Address line 1.
     *
     * @return self
     */
    public function setAddress($address)
    {

        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address line 2.
     *
     * @return self
     */
    public function setAddress2($address2)
    {

        if (is_null($address2)) {
            throw new \InvalidArgumentException('non-nullable address2 cannot be null');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Zip.
     *
     * @return self
     */
    public function setZip($zip)
    {

        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City.
     *
     * @return self
     */
    public function setCity($city)
    {

        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State.
     *
     * @return self
     */
    public function setState($state)
    {

        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets countryid
     *
     * @return string|null
     */
    public function getCountryid()
    {
        return $this->container['countryid'];
    }

    /**
     * Sets countryid
     *
     * @param string|null $countryid Country ID (ISO 3166-1, alpha-2).
     *
     * @return self
     */
    public function setCountryid($countryid)
    {

        if (is_null($countryid)) {
            throw new \InvalidArgumentException('non-nullable countryid cannot be null');
        }

        $this->container['countryid'] = $countryid;

        return $this;
    }

    /**
     * Gets currencycode
     *
     * @return string|null
     */
    public function getCurrencycode()
    {
        return $this->container['currencycode'];
    }

    /**
     * Sets currencycode
     *
     * @param string|null $currencycode Currency code (ISO 4217, alpha-3).
     *
     * @return self
     */
    public function setCurrencycode($currencycode)
    {

        if (is_null($currencycode)) {
            throw new \InvalidArgumentException('non-nullable currencycode cannot be null');
        }

        $this->container['currencycode'] = $currencycode;

        return $this;
    }

    /**
     * Gets receiptlanguagetag
     *
     * @return string|null
     */
    public function getReceiptlanguagetag()
    {
        return $this->container['receiptlanguagetag'];
    }

    /**
     * Sets receiptlanguagetag
     *
     * @param string|null $receiptlanguagetag Language used for receipts printed by the Cash Register (RFC 5646, BCP 47).
     *
     * @return self
     */
    public function setReceiptlanguagetag($receiptlanguagetag)
    {

        if (is_null($receiptlanguagetag)) {
            throw new \InvalidArgumentException('non-nullable receiptlanguagetag cannot be null');
        }

        $this->container['receiptlanguagetag'] = $receiptlanguagetag;

        return $this;
    }

    /**
     * Gets storesettingid
     *
     * @return int|null
     */
    public function getStoresettingid()
    {
        return $this->container['storesettingid'];
    }

    /**
     * Sets storesettingid
     *
     * @param int|null $storesettingid The ID for the store setting used by the Cash Register.
     *
     * @return self
     */
    public function setStoresettingid($storesettingid)
    {

        if (is_null($storesettingid)) {
            throw new \InvalidArgumentException('non-nullable storesettingid cannot be null');
        }

        $this->container['storesettingid'] = $storesettingid;

        return $this;
    }

    /**
     * Gets warehouseid
     *
     * @return int|null
     */
    public function getWarehouseid()
    {
        return $this->container['warehouseid'];
    }

    /**
     * Sets warehouseid
     *
     * @param int|null $warehouseid The ID for the warehouse used by the Cash Register.
     *
     * @return self
     */
    public function setWarehouseid($warehouseid)
    {

        if (is_null($warehouseid)) {
            throw new \InvalidArgumentException('non-nullable warehouseid cannot be null');
        }

        $this->container['warehouseid'] = $warehouseid;

        return $this;
    }

    /**
     * Gets salestaxgroupid
     *
     * @return int|null
     */
    public function getSalestaxgroupid()
    {
        return $this->container['salestaxgroupid'];
    }

    /**
     * Sets salestaxgroupid
     *
     * @param int|null $salestaxgroupid The ID for the salestaxgroup used by the Cash Register.
     *
     * @return self
     */
    public function setSalestaxgroupid($salestaxgroupid)
    {

        if (is_null($salestaxgroupid)) {
            throw new \InvalidArgumentException('non-nullable salestaxgroupid cannot be null');
        }

        $this->container['salestaxgroupid'] = $salestaxgroupid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


