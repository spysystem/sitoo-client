<?php
/**
 * GiftcardRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Model;

use \ArrayAccess;
use \Spy\SitooClient\ObjectSerializer;

/**
 * GiftcardRead Class Doc Comment
 *
 * @category Class
 * @description The gift card object.
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GiftcardRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return GiftcardReadModelFields
      */
    public static function GetModelFields(): GiftcardReadModelFields
    {
        return new GiftcardReadModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return GiftcardReadModelAttributes
      */
    public static function GetModelAttributes(): GiftcardReadModelAttributes
    {
        return new GiftcardReadModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'giftcard-read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'currencycode' => 'string',
        'cardnumber' => 'string',
        'cardnumberDisplay' => 'string',
        'redeemable' => 'bool',
        'dateExpires' => 'int',
        'dateCreated' => 'int',
        'moneyamount' => 'string',
        'requirespin' => 'bool',
        'transactions' => '\Spy\SitooClient\Model\GiftcardtransactionRead[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'currencycode' => null,
        'cardnumber' => null,
        'cardnumberDisplay' => null,
        'redeemable' => null,
        'dateExpires' => null,
        'dateCreated' => null,
        'moneyamount' => null,
        'requirespin' => null,
        'transactions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
		'currencycode' => false,
		'cardnumber' => false,
		'cardnumberDisplay' => false,
		'redeemable' => false,
		'dateExpires' => false,
		'dateCreated' => false,
		'moneyamount' => false,
		'requirespin' => false,
		'transactions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'currencycode' => 'currencycode',
        'cardnumber' => 'cardnumber',
        'cardnumberDisplay' => 'cardnumber_display',
        'redeemable' => 'redeemable',
        'dateExpires' => 'date_expires',
        'dateCreated' => 'date_created',
        'moneyamount' => 'moneyamount',
        'requirespin' => 'requirespin',
        'transactions' => 'transactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'currencycode' => 'setCurrencycode',
        'cardnumber' => 'setCardnumber',
        'cardnumberDisplay' => 'setCardnumberDisplay',
        'redeemable' => 'setRedeemable',
        'dateExpires' => 'setDateExpires',
        'dateCreated' => 'setDateCreated',
        'moneyamount' => 'setMoneyamount',
        'requirespin' => 'setRequirespin',
        'transactions' => 'setTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'currencycode' => 'getCurrencycode',
        'cardnumber' => 'getCardnumber',
        'cardnumberDisplay' => 'getCardnumberDisplay',
        'redeemable' => 'getRedeemable',
        'dateExpires' => 'getDateExpires',
        'dateCreated' => 'getDateCreated',
        'moneyamount' => 'getMoneyamount',
        'requirespin' => 'getRequirespin',
        'transactions' => 'getTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('currencycode', $data ?? [], null);
        $this->setIfExists('cardnumber', $data ?? [], null);
        $this->setIfExists('cardnumberDisplay', $data ?? [], null);
        $this->setIfExists('redeemable', $data ?? [], null);
        $this->setIfExists('dateExpires', $data ?? [], null);
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('moneyamount', $data ?? [], null);
        $this->setIfExists('requirespin', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['currencycode'] === null) {
            $invalidProperties[] = "'currencycode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of giftcard.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets currencycode
     *
     * @return string
     */
    public function getCurrencycode()
    {
        return $this->container['currencycode'];
    }

    /**
     * Sets currencycode
     *
     * @param string $currencycode Currency for the giftcard. (ISO 4217, alpha-3)
     *
     * @return self
     */
    public function setCurrencycode($currencycode)
    {
        if (is_null($currencycode)) {
            throw new \InvalidArgumentException('non-nullable currencycode cannot be null');
        }
        $this->container['currencycode'] = $currencycode;

        return $this;
    }

    /**
     * Gets cardnumber
     *
     * @return string|null
     */
    public function getCardnumber()
    {
        return $this->container['cardnumber'];
    }

    /**
     * Sets cardnumber
     *
     * @param string|null $cardnumber The unique id of the gift card (card number).
     *
     * @return self
     */
    public function setCardnumber($cardnumber)
    {
        if (is_null($cardnumber)) {
            throw new \InvalidArgumentException('non-nullable cardnumber cannot be null');
        }
        $this->container['cardnumber'] = $cardnumber;

        return $this;
    }

    /**
     * Gets cardnumberDisplay
     *
     * @return string|null
     */
    public function getCardnumberDisplay()
    {
        return $this->container['cardnumberDisplay'];
    }

    /**
     * Sets cardnumberDisplay
     *
     * @param string|null $cardnumberDisplay The masked card number, used for public display.
     *
     * @return self
     */
    public function setCardnumberDisplay($cardnumberDisplay)
    {
        if (is_null($cardnumberDisplay)) {
            throw new \InvalidArgumentException('non-nullable cardnumberDisplay cannot be null');
        }
        $this->container['cardnumberDisplay'] = $cardnumberDisplay;

        return $this;
    }

    /**
     * Gets redeemable
     *
     * @return bool|null
     */
    public function getRedeemable()
    {
        return $this->container['redeemable'];
    }

    /**
     * Sets redeemable
     *
     * @param bool|null $redeemable If true, the gift card is active for redeem with the moneyamount available.
     *
     * @return self
     */
    public function setRedeemable($redeemable)
    {
        if (is_null($redeemable)) {
            throw new \InvalidArgumentException('non-nullable redeemable cannot be null');
        }
        $this->container['redeemable'] = $redeemable;

        return $this;
    }

    /**
     * Gets dateExpires
     *
     * @return int|null
     */
    public function getDateExpires()
    {
        return $this->container['dateExpires'];
    }

    /**
     * Sets dateExpires
     *
     * @param int|null $dateExpires The date for the expiration of the gift card. (If passed, the gift card is invalid)
     *
     * @return self
     */
    public function setDateExpires($dateExpires)
    {
        if (is_null($dateExpires)) {
            throw new \InvalidArgumentException('non-nullable dateExpires cannot be null');
        }
        $this->container['dateExpires'] = $dateExpires;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return int|null
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param int|null $dateCreated The date that the gift card was created.
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets moneyamount
     *
     * @return string|null
     */
    public function getMoneyamount()
    {
        return $this->container['moneyamount'];
    }

    /**
     * Sets moneyamount
     *
     * @param string|null $moneyamount Current monetary value of the gift card.
     *
     * @return self
     */
    public function setMoneyamount($moneyamount)
    {
        if (is_null($moneyamount)) {
            throw new \InvalidArgumentException('non-nullable moneyamount cannot be null');
        }
        $this->container['moneyamount'] = $moneyamount;

        return $this;
    }

    /**
     * Gets requirespin
     *
     * @return bool|null
     */
    public function getRequirespin()
    {
        return $this->container['requirespin'];
    }

    /**
     * Sets requirespin
     *
     * @param bool|null $requirespin Indicates if PIN is required when redeeming the gift card.
     *
     * @return self
     */
    public function setRequirespin($requirespin)
    {
        if (is_null($requirespin)) {
            throw new \InvalidArgumentException('non-nullable requirespin cannot be null');
        }
        $this->container['requirespin'] = $requirespin;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Spy\SitooClient\Model\GiftcardtransactionRead[]|null
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Spy\SitooClient\Model\GiftcardtransactionRead[]|null $transactions The transactions for this gift card. An array of giftcardtransaction.
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            throw new \InvalidArgumentException('non-nullable transactions cannot be null');
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


