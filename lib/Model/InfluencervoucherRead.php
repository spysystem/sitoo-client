<?php
/**
 * InfluencervoucherRead
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Model;

use \ArrayAccess;
use \Spy\SitooClient\ObjectSerializer;

/**
 * InfluencervoucherRead Class Doc Comment
 *
 * @category Class
 * @description The influencer voucher object.
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InfluencervoucherRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return InfluencervoucherReadModelFields
      */
    public static function GetModelFields(): InfluencervoucherReadModelFields
    {
        return new InfluencervoucherReadModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return InfluencervoucherReadModelAttributes
      */
    public static function GetModelAttributes(): InfluencervoucherReadModelAttributes
    {
        return new InfluencervoucherReadModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'influencervoucher-read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'influencercode' => 'string',
        'influencername' => 'string',
        'voucherpassword' => 'string',
        'vouchercode' => 'string',
        'vouchername' => 'string',
        'vouchercomment' => 'string',
        'redeemable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'influencercode' => null,
        'influencername' => null,
        'voucherpassword' => null,
        'vouchercode' => null,
        'vouchername' => null,
        'vouchercomment' => null,
        'redeemable' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'influencercode' => false,
		'influencername' => false,
		'voucherpassword' => false,
		'vouchercode' => false,
		'vouchername' => false,
		'vouchercomment' => false,
		'redeemable' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of property to nullable mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPINullables()
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array
     */
    public function getOpenAPINullablesSetToNull()
    {
        return $this->openAPINullablesSetToNull;
    }

    public function setOpenAPINullablesSetToNull($nullablesSetToNull)
    {
        $this->openAPINullablesSetToNull=$nullablesSetToNull;

        return $this;
    }

    /**
     * Checks if a property is nullable
     *
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        if (isset(self::$openAPINullables[$property])) {
            return self::$openAPINullables[$property];
        }

        return false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        if (in_array($property, $this->getOpenAPINullablesSetToNull())) {
            return true;
        }
        return false;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'influencercode' => 'influencercode',
        'influencername' => 'influencername',
        'voucherpassword' => 'voucherpassword',
        'vouchercode' => 'vouchercode',
        'vouchername' => 'vouchername',
        'vouchercomment' => 'vouchercomment',
        'redeemable' => 'redeemable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'influencercode' => 'setInfluencercode',
        'influencername' => 'setInfluencername',
        'voucherpassword' => 'setVoucherpassword',
        'vouchercode' => 'setVouchercode',
        'vouchername' => 'setVouchername',
        'vouchercomment' => 'setVouchercomment',
        'redeemable' => 'setRedeemable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'influencercode' => 'getInfluencercode',
        'influencername' => 'getInfluencername',
        'voucherpassword' => 'getVoucherpassword',
        'vouchercode' => 'getVouchercode',
        'vouchername' => 'getVouchername',
        'vouchercomment' => 'getVouchercomment',
        'redeemable' => 'getRedeemable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('influencercode', $data, null);
        $this->setIfExists('influencername', $data, null);
        $this->setIfExists('voucherpassword', $data, null);
        $this->setIfExists('vouchercode', $data, null);
        $this->setIfExists('vouchername', $data, null);
        $this->setIfExists('vouchercomment', $data, null);
        $this->setIfExists('redeemable', $data, null);
    }

    public function setIfExists(string $variableName, $fields, $defaultValue)
    {
        if (is_array($fields) && array_key_exists($variableName, $fields) && is_null($fields[$variableName]) && self::isNullable($variableName)) {
            array_push($this->openAPINullablesSetToNull, $variableName);
        }

        $this->container[$variableName] = isset($fields[$variableName]) ? $fields[$variableName] : $defaultValue;

        return $this;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets influencercode
     *
     * @return string|null
     */
    public function getInfluencercode()
    {
        return $this->container['influencercode'];
    }

    /**
     * Sets influencercode
     *
     * @param string|null $influencercode The unique influencer code. Can only contain [0-9a-zA-Z&_-.]
     *
     * @return self
     */
    public function setInfluencercode($influencercode)
    {

        if (is_null($influencercode)) {
            throw new \InvalidArgumentException('non-nullable influencercode cannot be null');
        }

        $this->container['influencercode'] = $influencercode;

        return $this;
    }

    /**
     * Gets influencername
     *
     * @return string|null
     */
    public function getInfluencername()
    {
        return $this->container['influencername'];
    }

    /**
     * Sets influencername
     *
     * @param string|null $influencername The name of the influencer for this code.
     *
     * @return self
     */
    public function setInfluencername($influencername)
    {

        if (is_null($influencername)) {
            throw new \InvalidArgumentException('non-nullable influencername cannot be null');
        }

        $this->container['influencername'] = $influencername;

        return $this;
    }

    /**
     * Gets voucherpassword
     *
     * @return string|null
     */
    public function getVoucherpassword()
    {
        return $this->container['voucherpassword'];
    }

    /**
     * Sets voucherpassword
     *
     * @param string|null $voucherpassword The password used for unlocking voucher.
     *
     * @return self
     */
    public function setVoucherpassword($voucherpassword)
    {

        if (is_null($voucherpassword)) {
            throw new \InvalidArgumentException('non-nullable voucherpassword cannot be null');
        }

        $this->container['voucherpassword'] = $voucherpassword;

        return $this;
    }

    /**
     * Gets vouchercode
     *
     * @return string|null
     */
    public function getVouchercode()
    {
        return $this->container['vouchercode'];
    }

    /**
     * Sets vouchercode
     *
     * @param string|null $vouchercode Override voucher code used for this influencer code or null to leave voucher code.
     *
     * @return self
     */
    public function setVouchercode($vouchercode)
    {

        if (is_null($vouchercode)) {
            throw new \InvalidArgumentException('non-nullable vouchercode cannot be null');
        }

        $this->container['vouchercode'] = $vouchercode;

        return $this;
    }

    /**
     * Gets vouchername
     *
     * @return string|null
     */
    public function getVouchername()
    {
        return $this->container['vouchername'];
    }

    /**
     * Sets vouchername
     *
     * @param string|null $vouchername Override voucher name used for this influencer code or null to leave voucher name.
     *
     * @return self
     */
    public function setVouchername($vouchername)
    {

        if (is_null($vouchername)) {
            throw new \InvalidArgumentException('non-nullable vouchername cannot be null');
        }

        $this->container['vouchername'] = $vouchername;

        return $this;
    }

    /**
     * Gets vouchercomment
     *
     * @return string|null
     */
    public function getVouchercomment()
    {
        return $this->container['vouchercomment'];
    }

    /**
     * Sets vouchercomment
     *
     * @param string|null $vouchercomment Override voucher description used for this influencer code or null to leave voucher comment.
     *
     * @return self
     */
    public function setVouchercomment($vouchercomment)
    {

        if (is_null($vouchercomment)) {
            throw new \InvalidArgumentException('non-nullable vouchercomment cannot be null');
        }

        $this->container['vouchercomment'] = $vouchercomment;

        return $this;
    }

    /**
     * Gets redeemable
     *
     * @return bool|null
     */
    public function getRedeemable()
    {
        return $this->container['redeemable'];
    }

    /**
     * Sets redeemable
     *
     * @param bool|null $redeemable Whether the influencer voucher is redeemable
     *
     * @return self
     */
    public function setRedeemable($redeemable)
    {

        if (is_null($redeemable)) {
            throw new \InvalidArgumentException('non-nullable redeemable cannot be null');
        }

        $this->container['redeemable'] = $redeemable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


