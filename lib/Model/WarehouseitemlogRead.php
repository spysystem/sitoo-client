<?php
/**
 * WarehouseitemlogRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Model;

use \ArrayAccess;
use \Spy\SitooClient\ObjectSerializer;

/**
 * WarehouseitemlogRead Class Doc Comment
 *
 * @category Class
 * @description Log item that belongs to a warehousetransaction (ie. has a product&#39;s stock count and value for a transaction).
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WarehouseitemlogRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return WarehouseitemlogReadModelFields
      */
    public static function GetModelFields(): WarehouseitemlogReadModelFields
    {
        return new WarehouseitemlogReadModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return WarehouseitemlogReadModelAttributes
      */
    public static function GetModelAttributes(): WarehouseitemlogReadModelAttributes
    {
        return new WarehouseitemlogReadModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'warehouseitemlog-read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'warehouseitemlogid' => 'int',
        'warehouseitemid' => 'int',
        'warehousetransactionid' => 'int',
        'decimalquantity' => 'string',
        'decimaltotal' => 'string',
        'moneypricein' => 'string',
        'moneytotal' => 'string',
        'moneyvalue' => 'string',
        'sku' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'warehouseitemlogid' => null,
        'warehouseitemid' => null,
        'warehousetransactionid' => null,
        'decimalquantity' => null,
        'decimaltotal' => null,
        'moneypricein' => null,
        'moneytotal' => null,
        'moneyvalue' => null,
        'sku' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'warehouseitemlogid' => false,
		'warehouseitemid' => false,
		'warehousetransactionid' => false,
		'decimalquantity' => false,
		'decimaltotal' => false,
		'moneypricein' => false,
		'moneytotal' => false,
		'moneyvalue' => false,
		'sku' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'warehouseitemlogid' => 'warehouseitemlogid',
        'warehouseitemid' => 'warehouseitemid',
        'warehousetransactionid' => 'warehousetransactionid',
        'decimalquantity' => 'decimalquantity',
        'decimaltotal' => 'decimaltotal',
        'moneypricein' => 'moneypricein',
        'moneytotal' => 'moneytotal',
        'moneyvalue' => 'moneyvalue',
        'sku' => 'sku'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'warehouseitemlogid' => 'setWarehouseitemlogid',
        'warehouseitemid' => 'setWarehouseitemid',
        'warehousetransactionid' => 'setWarehousetransactionid',
        'decimalquantity' => 'setDecimalquantity',
        'decimaltotal' => 'setDecimaltotal',
        'moneypricein' => 'setMoneypricein',
        'moneytotal' => 'setMoneytotal',
        'moneyvalue' => 'setMoneyvalue',
        'sku' => 'setSku'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'warehouseitemlogid' => 'getWarehouseitemlogid',
        'warehouseitemid' => 'getWarehouseitemid',
        'warehousetransactionid' => 'getWarehousetransactionid',
        'decimalquantity' => 'getDecimalquantity',
        'decimaltotal' => 'getDecimaltotal',
        'moneypricein' => 'getMoneypricein',
        'moneytotal' => 'getMoneytotal',
        'moneyvalue' => 'getMoneyvalue',
        'sku' => 'getSku'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('warehouseitemlogid', $data ?? [], null);
        $this->setIfExists('warehouseitemid', $data ?? [], null);
        $this->setIfExists('warehousetransactionid', $data ?? [], null);
        $this->setIfExists('decimalquantity', $data ?? [], null);
        $this->setIfExists('decimaltotal', $data ?? [], null);
        $this->setIfExists('moneypricein', $data ?? [], null);
        $this->setIfExists('moneytotal', $data ?? [], null);
        $this->setIfExists('moneyvalue', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['decimalquantity'] === null) {
            $invalidProperties[] = "'decimalquantity' can't be null";
        }
        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets warehouseitemlogid
     *
     * @return int|null
     */
    public function getWarehouseitemlogid()
    {
        return $this->container['warehouseitemlogid'];
    }

    /**
     * Sets warehouseitemlogid
     *
     * @param int|null $warehouseitemlogid The unique ID of the warehouseitemlog.
     *
     * @return self
     */
    public function setWarehouseitemlogid($warehouseitemlogid)
    {

        if (is_null($warehouseitemlogid)) {
            throw new \InvalidArgumentException('non-nullable warehouseitemlogid cannot be null');
        }

        $this->container['warehouseitemlogid'] = $warehouseitemlogid;

        return $this;
    }

    /**
     * Gets warehouseitemid
     *
     * @return int|null
     */
    public function getWarehouseitemid()
    {
        return $this->container['warehouseitemid'];
    }

    /**
     * Sets warehouseitemid
     *
     * @param int|null $warehouseitemid The ID of the warehouseitem that this warehouseitemlog belongs to.
     *
     * @return self
     */
    public function setWarehouseitemid($warehouseitemid)
    {

        if (is_null($warehouseitemid)) {
            throw new \InvalidArgumentException('non-nullable warehouseitemid cannot be null');
        }

        $this->container['warehouseitemid'] = $warehouseitemid;

        return $this;
    }

    /**
     * Gets warehousetransactionid
     *
     * @return int|null
     */
    public function getWarehousetransactionid()
    {
        return $this->container['warehousetransactionid'];
    }

    /**
     * Sets warehousetransactionid
     *
     * @param int|null $warehousetransactionid The ID of the warehousetransaction that this warehouseitemlog belongs to.
     *
     * @return self
     */
    public function setWarehousetransactionid($warehousetransactionid)
    {

        if (is_null($warehousetransactionid)) {
            throw new \InvalidArgumentException('non-nullable warehousetransactionid cannot be null');
        }

        $this->container['warehousetransactionid'] = $warehousetransactionid;

        return $this;
    }

    /**
     * Gets decimalquantity
     *
     * @return string
     */
    public function getDecimalquantity()
    {
        return $this->container['decimalquantity'];
    }

    /**
     * Sets decimalquantity
     *
     * @param string $decimalquantity The change of stock in this transaction.
     *
     * @return self
     */
    public function setDecimalquantity($decimalquantity)
    {

        if (is_null($decimalquantity)) {
            throw new \InvalidArgumentException('non-nullable decimalquantity cannot be null');
        }

        $this->container['decimalquantity'] = $decimalquantity;

        return $this;
    }

    /**
     * Gets decimaltotal
     *
     * @return string|null
     */
    public function getDecimaltotal()
    {
        return $this->container['decimaltotal'];
    }

    /**
     * Sets decimaltotal
     *
     * @param string|null $decimaltotal The stock level after this transaction.
     *
     * @return self
     */
    public function setDecimaltotal($decimaltotal)
    {

        if (is_null($decimaltotal)) {
            throw new \InvalidArgumentException('non-nullable decimaltotal cannot be null');
        }

        $this->container['decimaltotal'] = $decimaltotal;

        return $this;
    }

    /**
     * Gets moneypricein
     *
     * @return string|null
     */
    public function getMoneypricein()
    {
        return $this->container['moneypricein'];
    }

    /**
     * Sets moneypricein
     *
     * @param string|null $moneypricein The purchase price per item for this transaction (Not applicable for all transaction types).
     *
     * @return self
     */
    public function setMoneypricein($moneypricein)
    {

        if (is_null($moneypricein)) {
            throw new \InvalidArgumentException('non-nullable moneypricein cannot be null');
        }

        $this->container['moneypricein'] = $moneypricein;

        return $this;
    }

    /**
     * Gets moneytotal
     *
     * @return string|null
     */
    public function getMoneytotal()
    {
        return $this->container['moneytotal'];
    }

    /**
     * Sets moneytotal
     *
     * @param string|null $moneytotal The value of this stock after this transaction.
     *
     * @return self
     */
    public function setMoneytotal($moneytotal)
    {

        if (is_null($moneytotal)) {
            throw new \InvalidArgumentException('non-nullable moneytotal cannot be null');
        }

        $this->container['moneytotal'] = $moneytotal;

        return $this;
    }

    /**
     * Gets moneyvalue
     *
     * @return string|null
     */
    public function getMoneyvalue()
    {
        return $this->container['moneyvalue'];
    }

    /**
     * Sets moneyvalue
     *
     * @param string|null $moneyvalue The sum value of this itemlog entry. (The warehouse value changed).
     *
     * @return self
     */
    public function setMoneyvalue($moneyvalue)
    {

        if (is_null($moneyvalue)) {
            throw new \InvalidArgumentException('non-nullable moneyvalue cannot be null');
        }

        $this->container['moneyvalue'] = $moneyvalue;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku The SKU for this stock item.
     *
     * @return self
     */
    public function setSku($sku)
    {

        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }

        $this->container['sku'] = $sku;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


