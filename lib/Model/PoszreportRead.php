<?php
/**
 * PoszreportRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Model;

use \ArrayAccess;
use \Spy\SitooClient\ObjectSerializer;

/**
 * PoszreportRead Class Doc Comment
 *
 * @category Class
 * @description Z-report for Sitoo POS Cash Register.
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PoszreportRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return PoszreportReadModelFields
      */
    public static function GetModelFields(): PoszreportReadModelFields
    {
        return new PoszreportReadModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return PoszreportReadModelAttributes
      */
    public static function GetModelAttributes(): PoszreportReadModelAttributes
    {
        return new PoszreportReadModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'poszreport-read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'zreportid' => 'int',
        'registerid' => 'string',
        'manufacturerid' => 'string',
        'registerkey' => 'string',
        'registernumber' => 'int',
        'datecreated' => 'int',
        'dateopened' => 'int',
        'eshopid' => 'int',
        'storeId' => 'string',
        'storeName' => 'string',
        'company' => 'string',
        'companyid' => 'string',
        'address' => 'string',
        'address2' => 'string',
        'address3' => 'string',
        'currencycode' => 'string',
        'staff' => 'string',
        'staffuserid' => 'string',
        'comment' => 'string',
        'moneysalestotal' => 'string',
        'moneysalestotalnet' => 'string',
        'numsales' => 'int',
        'numsalesitems' => 'int',
        'vatgroupssales' => '\Spy\SitooClient\Model\PoszreportvatgroupRead[]',
        'productgroupssales' => '\Spy\SitooClient\Model\PoszreportproductgroupRead[]',
        'moneysalesnotdeliveredtotal' => 'string',
        'moneysalesnotdeliveredtotalnet' => 'string',
        'numsalesnotdelivered' => 'int',
        'numsalesnotdelivereditems' => 'int',
        'vatgroupssalesnotdelivered' => '\Spy\SitooClient\Model\PoszreportvatgroupRead[]',
        'productgroupssalesnotdelivered' => '\Spy\SitooClient\Model\PoszreportproductgroupRead[]',
        'moneyrefundtotal' => 'string',
        'moneyrefundtotalnet' => 'string',
        'numrefund' => 'int',
        'numrefunditems' => 'int',
        'vatgroupsrefund' => '\Spy\SitooClient\Model\PoszreportvatgroupRead[]',
        'productgroupsrefund' => '\Spy\SitooClient\Model\PoszreportproductgroupRead[]',
        'moneyroundoff' => 'string',
        'salestaxessales' => '\Spy\SitooClient\Model\PoszreportsalestaxRead[]',
        'salestaxesrefund' => '\Spy\SitooClient\Model\PoszreportsalestaxRead[]',
        'moneysalestaxinadvance' => 'string',
        'moneysummarysales' => 'string',
        'moneysummaryrefund' => 'string',
        'moneysummarysubtotal' => 'string',
        'moneysummarysalestax' => 'string',
        'moneysummaryroundoff' => 'string',
        'moneysummarytotal' => 'string',
        'paymentssales' => '\Spy\SitooClient\Model\PoszreportpaymentRead[]',
        'paymentsrefund' => '\Spy\SitooClient\Model\PoszreportpaymentRead[]',
        'discountssales' => '\Spy\SitooClient\Model\PoszreportdiscountRead[]',
        'discountssalesnotdelivered' => '\Spy\SitooClient\Model\PoszreportdiscountRead[]',
        'discountsrefund' => '\Spy\SitooClient\Model\PoszreportdiscountRead[]',
        'moneycashIn' => 'string',
        'moneycashSalesrefunds' => 'string',
        'moneycashPetty' => 'string',
        'moneycashBank' => 'string',
        'moneycashExpected' => 'string',
        'moneycashCounted' => 'string',
        'moneycashDiff' => 'string',
        'moneycashBankfinal' => 'string',
        'moneycashOut' => 'string',
        'moneydiscount' => 'string',
        'numsalestypeproduct' => 'int',
        'numsalestypeservice' => 'int',
        'numsalestypegiftcard' => 'int',
        'numreceipts' => 'int',
        'numopendrawer' => 'int',
        'numpractice' => 'int',
        'moneypractice' => 'string',
        'moneygrandtotalsales' => 'string',
        'moneygrandtotalrefund' => 'string',
        'moneygrandtotalnet' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'zreportid' => null,
        'registerid' => null,
        'manufacturerid' => null,
        'registerkey' => null,
        'registernumber' => null,
        'datecreated' => null,
        'dateopened' => null,
        'eshopid' => null,
        'storeId' => null,
        'storeName' => null,
        'company' => null,
        'companyid' => null,
        'address' => null,
        'address2' => null,
        'address3' => null,
        'currencycode' => null,
        'staff' => null,
        'staffuserid' => null,
        'comment' => null,
        'moneysalestotal' => null,
        'moneysalestotalnet' => null,
        'numsales' => null,
        'numsalesitems' => null,
        'vatgroupssales' => null,
        'productgroupssales' => null,
        'moneysalesnotdeliveredtotal' => null,
        'moneysalesnotdeliveredtotalnet' => null,
        'numsalesnotdelivered' => null,
        'numsalesnotdelivereditems' => null,
        'vatgroupssalesnotdelivered' => null,
        'productgroupssalesnotdelivered' => null,
        'moneyrefundtotal' => null,
        'moneyrefundtotalnet' => null,
        'numrefund' => null,
        'numrefunditems' => null,
        'vatgroupsrefund' => null,
        'productgroupsrefund' => null,
        'moneyroundoff' => null,
        'salestaxessales' => null,
        'salestaxesrefund' => null,
        'moneysalestaxinadvance' => null,
        'moneysummarysales' => null,
        'moneysummaryrefund' => null,
        'moneysummarysubtotal' => null,
        'moneysummarysalestax' => null,
        'moneysummaryroundoff' => null,
        'moneysummarytotal' => null,
        'paymentssales' => null,
        'paymentsrefund' => null,
        'discountssales' => null,
        'discountssalesnotdelivered' => null,
        'discountsrefund' => null,
        'moneycashIn' => null,
        'moneycashSalesrefunds' => null,
        'moneycashPetty' => null,
        'moneycashBank' => null,
        'moneycashExpected' => null,
        'moneycashCounted' => null,
        'moneycashDiff' => null,
        'moneycashBankfinal' => null,
        'moneycashOut' => null,
        'moneydiscount' => null,
        'numsalestypeproduct' => null,
        'numsalestypeservice' => null,
        'numsalestypegiftcard' => null,
        'numreceipts' => null,
        'numopendrawer' => null,
        'numpractice' => null,
        'moneypractice' => null,
        'moneygrandtotalsales' => null,
        'moneygrandtotalrefund' => null,
        'moneygrandtotalnet' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'zreportid' => false,
		'registerid' => false,
		'manufacturerid' => false,
		'registerkey' => false,
		'registernumber' => false,
		'datecreated' => false,
		'dateopened' => false,
		'eshopid' => false,
		'storeId' => false,
		'storeName' => false,
		'company' => false,
		'companyid' => false,
		'address' => false,
		'address2' => false,
		'address3' => false,
		'currencycode' => false,
		'staff' => false,
		'staffuserid' => false,
		'comment' => false,
		'moneysalestotal' => false,
		'moneysalestotalnet' => false,
		'numsales' => false,
		'numsalesitems' => false,
		'vatgroupssales' => false,
		'productgroupssales' => false,
		'moneysalesnotdeliveredtotal' => false,
		'moneysalesnotdeliveredtotalnet' => false,
		'numsalesnotdelivered' => false,
		'numsalesnotdelivereditems' => false,
		'vatgroupssalesnotdelivered' => false,
		'productgroupssalesnotdelivered' => false,
		'moneyrefundtotal' => false,
		'moneyrefundtotalnet' => false,
		'numrefund' => false,
		'numrefunditems' => false,
		'vatgroupsrefund' => false,
		'productgroupsrefund' => false,
		'moneyroundoff' => false,
		'salestaxessales' => false,
		'salestaxesrefund' => false,
		'moneysalestaxinadvance' => false,
		'moneysummarysales' => false,
		'moneysummaryrefund' => false,
		'moneysummarysubtotal' => false,
		'moneysummarysalestax' => false,
		'moneysummaryroundoff' => false,
		'moneysummarytotal' => false,
		'paymentssales' => false,
		'paymentsrefund' => false,
		'discountssales' => false,
		'discountssalesnotdelivered' => false,
		'discountsrefund' => false,
		'moneycashIn' => false,
		'moneycashSalesrefunds' => false,
		'moneycashPetty' => false,
		'moneycashBank' => false,
		'moneycashExpected' => false,
		'moneycashCounted' => false,
		'moneycashDiff' => false,
		'moneycashBankfinal' => false,
		'moneycashOut' => false,
		'moneydiscount' => false,
		'numsalestypeproduct' => false,
		'numsalestypeservice' => false,
		'numsalestypegiftcard' => false,
		'numreceipts' => false,
		'numopendrawer' => false,
		'numpractice' => false,
		'moneypractice' => false,
		'moneygrandtotalsales' => false,
		'moneygrandtotalrefund' => false,
		'moneygrandtotalnet' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'zreportid' => 'zreportid',
        'registerid' => 'registerid',
        'manufacturerid' => 'manufacturerid',
        'registerkey' => 'registerkey',
        'registernumber' => 'registernumber',
        'datecreated' => 'datecreated',
        'dateopened' => 'dateopened',
        'eshopid' => 'eshopid',
        'storeId' => 'store_id',
        'storeName' => 'store_name',
        'company' => 'company',
        'companyid' => 'companyid',
        'address' => 'address',
        'address2' => 'address2',
        'address3' => 'address3',
        'currencycode' => 'currencycode',
        'staff' => 'staff',
        'staffuserid' => 'staffuserid',
        'comment' => 'comment',
        'moneysalestotal' => 'moneysalestotal',
        'moneysalestotalnet' => 'moneysalestotalnet',
        'numsales' => 'numsales',
        'numsalesitems' => 'numsalesitems',
        'vatgroupssales' => 'vatgroupssales',
        'productgroupssales' => 'productgroupssales',
        'moneysalesnotdeliveredtotal' => 'moneysalesnotdeliveredtotal',
        'moneysalesnotdeliveredtotalnet' => 'moneysalesnotdeliveredtotalnet',
        'numsalesnotdelivered' => 'numsalesnotdelivered',
        'numsalesnotdelivereditems' => 'numsalesnotdelivereditems',
        'vatgroupssalesnotdelivered' => 'vatgroupssalesnotdelivered',
        'productgroupssalesnotdelivered' => 'productgroupssalesnotdelivered',
        'moneyrefundtotal' => 'moneyrefundtotal',
        'moneyrefundtotalnet' => 'moneyrefundtotalnet',
        'numrefund' => 'numrefund',
        'numrefunditems' => 'numrefunditems',
        'vatgroupsrefund' => 'vatgroupsrefund',
        'productgroupsrefund' => 'productgroupsrefund',
        'moneyroundoff' => 'moneyroundoff',
        'salestaxessales' => 'salestaxessales',
        'salestaxesrefund' => 'salestaxesrefund',
        'moneysalestaxinadvance' => 'moneysalestaxinadvance',
        'moneysummarysales' => 'moneysummarysales',
        'moneysummaryrefund' => 'moneysummaryrefund',
        'moneysummarysubtotal' => 'moneysummarysubtotal',
        'moneysummarysalestax' => 'moneysummarysalestax',
        'moneysummaryroundoff' => 'moneysummaryroundoff',
        'moneysummarytotal' => 'moneysummarytotal',
        'paymentssales' => 'paymentssales',
        'paymentsrefund' => 'paymentsrefund',
        'discountssales' => 'discountssales',
        'discountssalesnotdelivered' => 'discountssalesnotdelivered',
        'discountsrefund' => 'discountsrefund',
        'moneycashIn' => 'moneycash_in',
        'moneycashSalesrefunds' => 'moneycash_salesrefunds',
        'moneycashPetty' => 'moneycash_petty',
        'moneycashBank' => 'moneycash_bank',
        'moneycashExpected' => 'moneycash_expected',
        'moneycashCounted' => 'moneycash_counted',
        'moneycashDiff' => 'moneycash_diff',
        'moneycashBankfinal' => 'moneycash_bankfinal',
        'moneycashOut' => 'moneycash_out',
        'moneydiscount' => 'moneydiscount',
        'numsalestypeproduct' => 'numsalestypeproduct',
        'numsalestypeservice' => 'numsalestypeservice',
        'numsalestypegiftcard' => 'numsalestypegiftcard',
        'numreceipts' => 'numreceipts',
        'numopendrawer' => 'numopendrawer',
        'numpractice' => 'numpractice',
        'moneypractice' => 'moneypractice',
        'moneygrandtotalsales' => 'moneygrandtotalsales',
        'moneygrandtotalrefund' => 'moneygrandtotalrefund',
        'moneygrandtotalnet' => 'moneygrandtotalnet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'zreportid' => 'setZreportid',
        'registerid' => 'setRegisterid',
        'manufacturerid' => 'setManufacturerid',
        'registerkey' => 'setRegisterkey',
        'registernumber' => 'setRegisternumber',
        'datecreated' => 'setDatecreated',
        'dateopened' => 'setDateopened',
        'eshopid' => 'setEshopid',
        'storeId' => 'setStoreId',
        'storeName' => 'setStoreName',
        'company' => 'setCompany',
        'companyid' => 'setCompanyid',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'currencycode' => 'setCurrencycode',
        'staff' => 'setStaff',
        'staffuserid' => 'setStaffuserid',
        'comment' => 'setComment',
        'moneysalestotal' => 'setMoneysalestotal',
        'moneysalestotalnet' => 'setMoneysalestotalnet',
        'numsales' => 'setNumsales',
        'numsalesitems' => 'setNumsalesitems',
        'vatgroupssales' => 'setVatgroupssales',
        'productgroupssales' => 'setProductgroupssales',
        'moneysalesnotdeliveredtotal' => 'setMoneysalesnotdeliveredtotal',
        'moneysalesnotdeliveredtotalnet' => 'setMoneysalesnotdeliveredtotalnet',
        'numsalesnotdelivered' => 'setNumsalesnotdelivered',
        'numsalesnotdelivereditems' => 'setNumsalesnotdelivereditems',
        'vatgroupssalesnotdelivered' => 'setVatgroupssalesnotdelivered',
        'productgroupssalesnotdelivered' => 'setProductgroupssalesnotdelivered',
        'moneyrefundtotal' => 'setMoneyrefundtotal',
        'moneyrefundtotalnet' => 'setMoneyrefundtotalnet',
        'numrefund' => 'setNumrefund',
        'numrefunditems' => 'setNumrefunditems',
        'vatgroupsrefund' => 'setVatgroupsrefund',
        'productgroupsrefund' => 'setProductgroupsrefund',
        'moneyroundoff' => 'setMoneyroundoff',
        'salestaxessales' => 'setSalestaxessales',
        'salestaxesrefund' => 'setSalestaxesrefund',
        'moneysalestaxinadvance' => 'setMoneysalestaxinadvance',
        'moneysummarysales' => 'setMoneysummarysales',
        'moneysummaryrefund' => 'setMoneysummaryrefund',
        'moneysummarysubtotal' => 'setMoneysummarysubtotal',
        'moneysummarysalestax' => 'setMoneysummarysalestax',
        'moneysummaryroundoff' => 'setMoneysummaryroundoff',
        'moneysummarytotal' => 'setMoneysummarytotal',
        'paymentssales' => 'setPaymentssales',
        'paymentsrefund' => 'setPaymentsrefund',
        'discountssales' => 'setDiscountssales',
        'discountssalesnotdelivered' => 'setDiscountssalesnotdelivered',
        'discountsrefund' => 'setDiscountsrefund',
        'moneycashIn' => 'setMoneycashIn',
        'moneycashSalesrefunds' => 'setMoneycashSalesrefunds',
        'moneycashPetty' => 'setMoneycashPetty',
        'moneycashBank' => 'setMoneycashBank',
        'moneycashExpected' => 'setMoneycashExpected',
        'moneycashCounted' => 'setMoneycashCounted',
        'moneycashDiff' => 'setMoneycashDiff',
        'moneycashBankfinal' => 'setMoneycashBankfinal',
        'moneycashOut' => 'setMoneycashOut',
        'moneydiscount' => 'setMoneydiscount',
        'numsalestypeproduct' => 'setNumsalestypeproduct',
        'numsalestypeservice' => 'setNumsalestypeservice',
        'numsalestypegiftcard' => 'setNumsalestypegiftcard',
        'numreceipts' => 'setNumreceipts',
        'numopendrawer' => 'setNumopendrawer',
        'numpractice' => 'setNumpractice',
        'moneypractice' => 'setMoneypractice',
        'moneygrandtotalsales' => 'setMoneygrandtotalsales',
        'moneygrandtotalrefund' => 'setMoneygrandtotalrefund',
        'moneygrandtotalnet' => 'setMoneygrandtotalnet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'zreportid' => 'getZreportid',
        'registerid' => 'getRegisterid',
        'manufacturerid' => 'getManufacturerid',
        'registerkey' => 'getRegisterkey',
        'registernumber' => 'getRegisternumber',
        'datecreated' => 'getDatecreated',
        'dateopened' => 'getDateopened',
        'eshopid' => 'getEshopid',
        'storeId' => 'getStoreId',
        'storeName' => 'getStoreName',
        'company' => 'getCompany',
        'companyid' => 'getCompanyid',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'currencycode' => 'getCurrencycode',
        'staff' => 'getStaff',
        'staffuserid' => 'getStaffuserid',
        'comment' => 'getComment',
        'moneysalestotal' => 'getMoneysalestotal',
        'moneysalestotalnet' => 'getMoneysalestotalnet',
        'numsales' => 'getNumsales',
        'numsalesitems' => 'getNumsalesitems',
        'vatgroupssales' => 'getVatgroupssales',
        'productgroupssales' => 'getProductgroupssales',
        'moneysalesnotdeliveredtotal' => 'getMoneysalesnotdeliveredtotal',
        'moneysalesnotdeliveredtotalnet' => 'getMoneysalesnotdeliveredtotalnet',
        'numsalesnotdelivered' => 'getNumsalesnotdelivered',
        'numsalesnotdelivereditems' => 'getNumsalesnotdelivereditems',
        'vatgroupssalesnotdelivered' => 'getVatgroupssalesnotdelivered',
        'productgroupssalesnotdelivered' => 'getProductgroupssalesnotdelivered',
        'moneyrefundtotal' => 'getMoneyrefundtotal',
        'moneyrefundtotalnet' => 'getMoneyrefundtotalnet',
        'numrefund' => 'getNumrefund',
        'numrefunditems' => 'getNumrefunditems',
        'vatgroupsrefund' => 'getVatgroupsrefund',
        'productgroupsrefund' => 'getProductgroupsrefund',
        'moneyroundoff' => 'getMoneyroundoff',
        'salestaxessales' => 'getSalestaxessales',
        'salestaxesrefund' => 'getSalestaxesrefund',
        'moneysalestaxinadvance' => 'getMoneysalestaxinadvance',
        'moneysummarysales' => 'getMoneysummarysales',
        'moneysummaryrefund' => 'getMoneysummaryrefund',
        'moneysummarysubtotal' => 'getMoneysummarysubtotal',
        'moneysummarysalestax' => 'getMoneysummarysalestax',
        'moneysummaryroundoff' => 'getMoneysummaryroundoff',
        'moneysummarytotal' => 'getMoneysummarytotal',
        'paymentssales' => 'getPaymentssales',
        'paymentsrefund' => 'getPaymentsrefund',
        'discountssales' => 'getDiscountssales',
        'discountssalesnotdelivered' => 'getDiscountssalesnotdelivered',
        'discountsrefund' => 'getDiscountsrefund',
        'moneycashIn' => 'getMoneycashIn',
        'moneycashSalesrefunds' => 'getMoneycashSalesrefunds',
        'moneycashPetty' => 'getMoneycashPetty',
        'moneycashBank' => 'getMoneycashBank',
        'moneycashExpected' => 'getMoneycashExpected',
        'moneycashCounted' => 'getMoneycashCounted',
        'moneycashDiff' => 'getMoneycashDiff',
        'moneycashBankfinal' => 'getMoneycashBankfinal',
        'moneycashOut' => 'getMoneycashOut',
        'moneydiscount' => 'getMoneydiscount',
        'numsalestypeproduct' => 'getNumsalestypeproduct',
        'numsalestypeservice' => 'getNumsalestypeservice',
        'numsalestypegiftcard' => 'getNumsalestypegiftcard',
        'numreceipts' => 'getNumreceipts',
        'numopendrawer' => 'getNumopendrawer',
        'numpractice' => 'getNumpractice',
        'moneypractice' => 'getMoneypractice',
        'moneygrandtotalsales' => 'getMoneygrandtotalsales',
        'moneygrandtotalrefund' => 'getMoneygrandtotalrefund',
        'moneygrandtotalnet' => 'getMoneygrandtotalnet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('zreportid', $data ?? [], null);
        $this->setIfExists('registerid', $data ?? [], null);
        $this->setIfExists('manufacturerid', $data ?? [], null);
        $this->setIfExists('registerkey', $data ?? [], null);
        $this->setIfExists('registernumber', $data ?? [], null);
        $this->setIfExists('datecreated', $data ?? [], null);
        $this->setIfExists('dateopened', $data ?? [], null);
        $this->setIfExists('eshopid', $data ?? [], null);
        $this->setIfExists('storeId', $data ?? [], null);
        $this->setIfExists('storeName', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('companyid', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('address2', $data ?? [], null);
        $this->setIfExists('address3', $data ?? [], null);
        $this->setIfExists('currencycode', $data ?? [], null);
        $this->setIfExists('staff', $data ?? [], null);
        $this->setIfExists('staffuserid', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('moneysalestotal', $data ?? [], null);
        $this->setIfExists('moneysalestotalnet', $data ?? [], null);
        $this->setIfExists('numsales', $data ?? [], null);
        $this->setIfExists('numsalesitems', $data ?? [], null);
        $this->setIfExists('vatgroupssales', $data ?? [], null);
        $this->setIfExists('productgroupssales', $data ?? [], null);
        $this->setIfExists('moneysalesnotdeliveredtotal', $data ?? [], null);
        $this->setIfExists('moneysalesnotdeliveredtotalnet', $data ?? [], null);
        $this->setIfExists('numsalesnotdelivered', $data ?? [], null);
        $this->setIfExists('numsalesnotdelivereditems', $data ?? [], null);
        $this->setIfExists('vatgroupssalesnotdelivered', $data ?? [], null);
        $this->setIfExists('productgroupssalesnotdelivered', $data ?? [], null);
        $this->setIfExists('moneyrefundtotal', $data ?? [], null);
        $this->setIfExists('moneyrefundtotalnet', $data ?? [], null);
        $this->setIfExists('numrefund', $data ?? [], null);
        $this->setIfExists('numrefunditems', $data ?? [], null);
        $this->setIfExists('vatgroupsrefund', $data ?? [], null);
        $this->setIfExists('productgroupsrefund', $data ?? [], null);
        $this->setIfExists('moneyroundoff', $data ?? [], null);
        $this->setIfExists('salestaxessales', $data ?? [], null);
        $this->setIfExists('salestaxesrefund', $data ?? [], null);
        $this->setIfExists('moneysalestaxinadvance', $data ?? [], null);
        $this->setIfExists('moneysummarysales', $data ?? [], null);
        $this->setIfExists('moneysummaryrefund', $data ?? [], null);
        $this->setIfExists('moneysummarysubtotal', $data ?? [], null);
        $this->setIfExists('moneysummarysalestax', $data ?? [], null);
        $this->setIfExists('moneysummaryroundoff', $data ?? [], null);
        $this->setIfExists('moneysummarytotal', $data ?? [], null);
        $this->setIfExists('paymentssales', $data ?? [], null);
        $this->setIfExists('paymentsrefund', $data ?? [], null);
        $this->setIfExists('discountssales', $data ?? [], null);
        $this->setIfExists('discountssalesnotdelivered', $data ?? [], null);
        $this->setIfExists('discountsrefund', $data ?? [], null);
        $this->setIfExists('moneycashIn', $data ?? [], null);
        $this->setIfExists('moneycashSalesrefunds', $data ?? [], null);
        $this->setIfExists('moneycashPetty', $data ?? [], null);
        $this->setIfExists('moneycashBank', $data ?? [], null);
        $this->setIfExists('moneycashExpected', $data ?? [], null);
        $this->setIfExists('moneycashCounted', $data ?? [], null);
        $this->setIfExists('moneycashDiff', $data ?? [], null);
        $this->setIfExists('moneycashBankfinal', $data ?? [], null);
        $this->setIfExists('moneycashOut', $data ?? [], null);
        $this->setIfExists('moneydiscount', $data ?? [], null);
        $this->setIfExists('numsalestypeproduct', $data ?? [], null);
        $this->setIfExists('numsalestypeservice', $data ?? [], null);
        $this->setIfExists('numsalestypegiftcard', $data ?? [], null);
        $this->setIfExists('numreceipts', $data ?? [], null);
        $this->setIfExists('numopendrawer', $data ?? [], null);
        $this->setIfExists('numpractice', $data ?? [], null);
        $this->setIfExists('moneypractice', $data ?? [], null);
        $this->setIfExists('moneygrandtotalsales', $data ?? [], null);
        $this->setIfExists('moneygrandtotalrefund', $data ?? [], null);
        $this->setIfExists('moneygrandtotalnet', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets zreportid
     *
     * @return int|null
     */
    public function getZreportid()
    {
        return $this->container['zreportid'];
    }

    /**
     * Sets zreportid
     *
     * @param int|null $zreportid ID for this report (report number).
     *
     * @return self
     */
    public function setZreportid($zreportid)
    {
        if (is_null($zreportid)) {
            throw new \InvalidArgumentException('non-nullable zreportid cannot be null');
        }
        $this->container['zreportid'] = $zreportid;

        return $this;
    }

    /**
     * Gets registerid
     *
     * @return string|null
     */
    public function getRegisterid()
    {
        return $this->container['registerid'];
    }

    /**
     * Sets registerid
     *
     * @param string|null $registerid Unique ID for this Cash Register.
     *
     * @return self
     */
    public function setRegisterid($registerid)
    {
        if (is_null($registerid)) {
            throw new \InvalidArgumentException('non-nullable registerid cannot be null');
        }
        $this->container['registerid'] = $registerid;

        return $this;
    }

    /**
     * Gets manufacturerid
     *
     * @return string|null
     */
    public function getManufacturerid()
    {
        return $this->container['manufacturerid'];
    }

    /**
     * Sets manufacturerid
     *
     * @param string|null $manufacturerid Manufacturer ID for this Cash Register.
     *
     * @return self
     */
    public function setManufacturerid($manufacturerid)
    {
        if (is_null($manufacturerid)) {
            throw new \InvalidArgumentException('non-nullable manufacturerid cannot be null');
        }
        $this->container['manufacturerid'] = $manufacturerid;

        return $this;
    }

    /**
     * Gets registerkey
     *
     * @return string|null
     */
    public function getRegisterkey()
    {
        return $this->container['registerkey'];
    }

    /**
     * Sets registerkey
     *
     * @param string|null $registerkey Key for this Cash Register used by the Tax Authorities and also printed on receipts.
     *
     * @return self
     */
    public function setRegisterkey($registerkey)
    {
        if (is_null($registerkey)) {
            throw new \InvalidArgumentException('non-nullable registerkey cannot be null');
        }
        $this->container['registerkey'] = $registerkey;

        return $this;
    }

    /**
     * Gets registernumber
     *
     * @return int|null
     */
    public function getRegisternumber()
    {
        return $this->container['registernumber'];
    }

    /**
     * Sets registernumber
     *
     * @param int|null $registernumber Number for this Cash Register (E.g 1, 2, 3...).
     *
     * @return self
     */
    public function setRegisternumber($registernumber)
    {
        if (is_null($registernumber)) {
            throw new \InvalidArgumentException('non-nullable registernumber cannot be null');
        }
        $this->container['registernumber'] = $registernumber;

        return $this;
    }

    /**
     * Gets datecreated
     *
     * @return int|null
     */
    public function getDatecreated()
    {
        return $this->container['datecreated'];
    }

    /**
     * Sets datecreated
     *
     * @param int|null $datecreated Timestamp for when this report was created.
     *
     * @return self
     */
    public function setDatecreated($datecreated)
    {
        if (is_null($datecreated)) {
            throw new \InvalidArgumentException('non-nullable datecreated cannot be null');
        }
        $this->container['datecreated'] = $datecreated;

        return $this;
    }

    /**
     * Gets dateopened
     *
     * @return int|null
     */
    public function getDateopened()
    {
        return $this->container['dateopened'];
    }

    /**
     * Sets dateopened
     *
     * @param int|null $dateopened Timestamp for when the register was opened or null if generated with legacy versions of Sitoo POS.
     *
     * @return self
     */
    public function setDateopened($dateopened)
    {
        if (is_null($dateopened)) {
            throw new \InvalidArgumentException('non-nullable dateopened cannot be null');
        }
        $this->container['dateopened'] = $dateopened;

        return $this;
    }

    /**
     * Gets eshopid
     *
     * @return int|null
     */
    public function getEshopid()
    {
        return $this->container['eshopid'];
    }

    /**
     * Sets eshopid
     *
     * @param int|null $eshopid Eshop ID
     *
     * @return self
     */
    public function setEshopid($eshopid)
    {
        if (is_null($eshopid)) {
            throw new \InvalidArgumentException('non-nullable eshopid cannot be null');
        }
        $this->container['eshopid'] = $eshopid;

        return $this;
    }

    /**
     * Gets storeId
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId
     *
     * @param string|null $storeId Store ID (external ID of the Store in Sitoo)
     *
     * @return self
     */
    public function setStoreId($storeId)
    {
        if (is_null($storeId)) {
            throw new \InvalidArgumentException('non-nullable storeId cannot be null');
        }
        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets storeName
     *
     * @return string|null
     */
    public function getStoreName()
    {
        return $this->container['storeName'];
    }

    /**
     * Sets storeName
     *
     * @param string|null $storeName The name of the store
     *
     * @return self
     */
    public function setStoreName($storeName)
    {
        if (is_null($storeName)) {
            throw new \InvalidArgumentException('non-nullable storeName cannot be null');
        }
        $this->container['storeName'] = $storeName;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Company Name.
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets companyid
     *
     * @return string|null
     */
    public function getCompanyid()
    {
        return $this->container['companyid'];
    }

    /**
     * Sets companyid
     *
     * @param string|null $companyid Company ID.
     *
     * @return self
     */
    public function setCompanyid($companyid)
    {
        if (is_null($companyid)) {
            throw new \InvalidArgumentException('non-nullable companyid cannot be null');
        }
        $this->container['companyid'] = $companyid;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Address line 1 (street address).
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address line 2 (c/o or similar).
     *
     * @return self
     */
    public function setAddress2($address2)
    {
        if (is_null($address2)) {
            throw new \InvalidArgumentException('non-nullable address2 cannot be null');
        }
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     *
     * @return string|null
     */
    public function getAddress3()
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     *
     * @param string|null $address3 Address line 3 (zip, city and state).
     *
     * @return self
     */
    public function setAddress3($address3)
    {
        if (is_null($address3)) {
            throw new \InvalidArgumentException('non-nullable address3 cannot be null');
        }
        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets currencycode
     *
     * @return string|null
     */
    public function getCurrencycode()
    {
        return $this->container['currencycode'];
    }

    /**
     * Sets currencycode
     *
     * @param string|null $currencycode Currency for the report. (ISO 4217, alpha-3 uppercased)
     *
     * @return self
     */
    public function setCurrencycode($currencycode)
    {
        if (is_null($currencycode)) {
            throw new \InvalidArgumentException('non-nullable currencycode cannot be null');
        }
        $this->container['currencycode'] = $currencycode;

        return $this;
    }

    /**
     * Gets staff
     *
     * @return string|null
     */
    public function getStaff()
    {
        return $this->container['staff'];
    }

    /**
     * Sets staff
     *
     * @param string|null $staff The name of the staff that produced the report.
     *
     * @return self
     */
    public function setStaff($staff)
    {
        if (is_null($staff)) {
            throw new \InvalidArgumentException('non-nullable staff cannot be null');
        }
        $this->container['staff'] = $staff;

        return $this;
    }

    /**
     * Gets staffuserid
     *
     * @return string|null
     */
    public function getStaffuserid()
    {
        return $this->container['staffuserid'];
    }

    /**
     * Sets staffuserid
     *
     * @param string|null $staffuserid The user ID for the staff that produced the report.
     *
     * @return self
     */
    public function setStaffuserid($staffuserid)
    {
        if (is_null($staffuserid)) {
            throw new \InvalidArgumentException('non-nullable staffuserid cannot be null');
        }
        $this->container['staffuserid'] = $staffuserid;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment The comment that the staff entered for the report.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets moneysalestotal
     *
     * @return string|null
     */
    public function getMoneysalestotal()
    {
        return $this->container['moneysalestotal'];
    }

    /**
     * Sets moneysalestotal
     *
     * @param string|null $moneysalestotal The total gross money value for sales.
     *
     * @return self
     */
    public function setMoneysalestotal($moneysalestotal)
    {
        if (is_null($moneysalestotal)) {
            throw new \InvalidArgumentException('non-nullable moneysalestotal cannot be null');
        }
        $this->container['moneysalestotal'] = $moneysalestotal;

        return $this;
    }

    /**
     * Gets moneysalestotalnet
     *
     * @return string|null
     */
    public function getMoneysalestotalnet()
    {
        return $this->container['moneysalestotalnet'];
    }

    /**
     * Sets moneysalestotalnet
     *
     * @param string|null $moneysalestotalnet The total net money value for sales.
     *
     * @return self
     */
    public function setMoneysalestotalnet($moneysalestotalnet)
    {
        if (is_null($moneysalestotalnet)) {
            throw new \InvalidArgumentException('non-nullable moneysalestotalnet cannot be null');
        }
        $this->container['moneysalestotalnet'] = $moneysalestotalnet;

        return $this;
    }

    /**
     * Gets numsales
     *
     * @return int|null
     */
    public function getNumsales()
    {
        return $this->container['numsales'];
    }

    /**
     * Sets numsales
     *
     * @param int|null $numsales The total number of sales.
     *
     * @return self
     */
    public function setNumsales($numsales)
    {
        if (is_null($numsales)) {
            throw new \InvalidArgumentException('non-nullable numsales cannot be null');
        }
        $this->container['numsales'] = $numsales;

        return $this;
    }

    /**
     * Gets numsalesitems
     *
     * @return int|null
     */
    public function getNumsalesitems()
    {
        return $this->container['numsalesitems'];
    }

    /**
     * Sets numsalesitems
     *
     * @param int|null $numsalesitems The total number of items in sales.
     *
     * @return self
     */
    public function setNumsalesitems($numsalesitems)
    {
        if (is_null($numsalesitems)) {
            throw new \InvalidArgumentException('non-nullable numsalesitems cannot be null');
        }
        $this->container['numsalesitems'] = $numsalesitems;

        return $this;
    }

    /**
     * Gets vatgroupssales
     *
     * @return \Spy\SitooClient\Model\PoszreportvatgroupRead[]|null
     */
    public function getVatgroupssales()
    {
        return $this->container['vatgroupssales'];
    }

    /**
     * Sets vatgroupssales
     *
     * @param \Spy\SitooClient\Model\PoszreportvatgroupRead[]|null $vatgroupssales Sales grouped by vat values. See poszreportvatgroup for fields.
     *
     * @return self
     */
    public function setVatgroupssales($vatgroupssales)
    {
        if (is_null($vatgroupssales)) {
            throw new \InvalidArgumentException('non-nullable vatgroupssales cannot be null');
        }
        $this->container['vatgroupssales'] = $vatgroupssales;

        return $this;
    }

    /**
     * Gets productgroupssales
     *
     * @return \Spy\SitooClient\Model\PoszreportproductgroupRead[]|null
     */
    public function getProductgroupssales()
    {
        return $this->container['productgroupssales'];
    }

    /**
     * Sets productgroupssales
     *
     * @param \Spy\SitooClient\Model\PoszreportproductgroupRead[]|null $productgroupssales Sales grouped by product group. See poszreportproductgroup for fields.
     *
     * @return self
     */
    public function setProductgroupssales($productgroupssales)
    {
        if (is_null($productgroupssales)) {
            throw new \InvalidArgumentException('non-nullable productgroupssales cannot be null');
        }
        $this->container['productgroupssales'] = $productgroupssales;

        return $this;
    }

    /**
     * Gets moneysalesnotdeliveredtotal
     *
     * @return string|null
     */
    public function getMoneysalesnotdeliveredtotal()
    {
        return $this->container['moneysalesnotdeliveredtotal'];
    }

    /**
     * Sets moneysalesnotdeliveredtotal
     *
     * @param string|null $moneysalesnotdeliveredtotal The total gross money value for sales not delivered.
     *
     * @return self
     */
    public function setMoneysalesnotdeliveredtotal($moneysalesnotdeliveredtotal)
    {
        if (is_null($moneysalesnotdeliveredtotal)) {
            throw new \InvalidArgumentException('non-nullable moneysalesnotdeliveredtotal cannot be null');
        }
        $this->container['moneysalesnotdeliveredtotal'] = $moneysalesnotdeliveredtotal;

        return $this;
    }

    /**
     * Gets moneysalesnotdeliveredtotalnet
     *
     * @return string|null
     */
    public function getMoneysalesnotdeliveredtotalnet()
    {
        return $this->container['moneysalesnotdeliveredtotalnet'];
    }

    /**
     * Sets moneysalesnotdeliveredtotalnet
     *
     * @param string|null $moneysalesnotdeliveredtotalnet The total net money value for sales not delivered.
     *
     * @return self
     */
    public function setMoneysalesnotdeliveredtotalnet($moneysalesnotdeliveredtotalnet)
    {
        if (is_null($moneysalesnotdeliveredtotalnet)) {
            throw new \InvalidArgumentException('non-nullable moneysalesnotdeliveredtotalnet cannot be null');
        }
        $this->container['moneysalesnotdeliveredtotalnet'] = $moneysalesnotdeliveredtotalnet;

        return $this;
    }

    /**
     * Gets numsalesnotdelivered
     *
     * @return int|null
     */
    public function getNumsalesnotdelivered()
    {
        return $this->container['numsalesnotdelivered'];
    }

    /**
     * Sets numsalesnotdelivered
     *
     * @param int|null $numsalesnotdelivered The total number of sales where not all items were delivered.
     *
     * @return self
     */
    public function setNumsalesnotdelivered($numsalesnotdelivered)
    {
        if (is_null($numsalesnotdelivered)) {
            throw new \InvalidArgumentException('non-nullable numsalesnotdelivered cannot be null');
        }
        $this->container['numsalesnotdelivered'] = $numsalesnotdelivered;

        return $this;
    }

    /**
     * Gets numsalesnotdelivereditems
     *
     * @return int|null
     */
    public function getNumsalesnotdelivereditems()
    {
        return $this->container['numsalesnotdelivereditems'];
    }

    /**
     * Sets numsalesnotdelivereditems
     *
     * @param int|null $numsalesnotdelivereditems The total number of items in sales not delivered.
     *
     * @return self
     */
    public function setNumsalesnotdelivereditems($numsalesnotdelivereditems)
    {
        if (is_null($numsalesnotdelivereditems)) {
            throw new \InvalidArgumentException('non-nullable numsalesnotdelivereditems cannot be null');
        }
        $this->container['numsalesnotdelivereditems'] = $numsalesnotdelivereditems;

        return $this;
    }

    /**
     * Gets vatgroupssalesnotdelivered
     *
     * @return \Spy\SitooClient\Model\PoszreportvatgroupRead[]|null
     */
    public function getVatgroupssalesnotdelivered()
    {
        return $this->container['vatgroupssalesnotdelivered'];
    }

    /**
     * Sets vatgroupssalesnotdelivered
     *
     * @param \Spy\SitooClient\Model\PoszreportvatgroupRead[]|null $vatgroupssalesnotdelivered Sales not delivered grouped by vat values. See poszreportvatgroup for fields.
     *
     * @return self
     */
    public function setVatgroupssalesnotdelivered($vatgroupssalesnotdelivered)
    {
        if (is_null($vatgroupssalesnotdelivered)) {
            throw new \InvalidArgumentException('non-nullable vatgroupssalesnotdelivered cannot be null');
        }
        $this->container['vatgroupssalesnotdelivered'] = $vatgroupssalesnotdelivered;

        return $this;
    }

    /**
     * Gets productgroupssalesnotdelivered
     *
     * @return \Spy\SitooClient\Model\PoszreportproductgroupRead[]|null
     */
    public function getProductgroupssalesnotdelivered()
    {
        return $this->container['productgroupssalesnotdelivered'];
    }

    /**
     * Sets productgroupssalesnotdelivered
     *
     * @param \Spy\SitooClient\Model\PoszreportproductgroupRead[]|null $productgroupssalesnotdelivered Sales not delivered grouped by product group. See poszreportproductgroup for fields.
     *
     * @return self
     */
    public function setProductgroupssalesnotdelivered($productgroupssalesnotdelivered)
    {
        if (is_null($productgroupssalesnotdelivered)) {
            throw new \InvalidArgumentException('non-nullable productgroupssalesnotdelivered cannot be null');
        }
        $this->container['productgroupssalesnotdelivered'] = $productgroupssalesnotdelivered;

        return $this;
    }

    /**
     * Gets moneyrefundtotal
     *
     * @return string|null
     */
    public function getMoneyrefundtotal()
    {
        return $this->container['moneyrefundtotal'];
    }

    /**
     * Sets moneyrefundtotal
     *
     * @param string|null $moneyrefundtotal The total gross money value for refunds.
     *
     * @return self
     */
    public function setMoneyrefundtotal($moneyrefundtotal)
    {
        if (is_null($moneyrefundtotal)) {
            throw new \InvalidArgumentException('non-nullable moneyrefundtotal cannot be null');
        }
        $this->container['moneyrefundtotal'] = $moneyrefundtotal;

        return $this;
    }

    /**
     * Gets moneyrefundtotalnet
     *
     * @return string|null
     */
    public function getMoneyrefundtotalnet()
    {
        return $this->container['moneyrefundtotalnet'];
    }

    /**
     * Sets moneyrefundtotalnet
     *
     * @param string|null $moneyrefundtotalnet The total net money value for refunds.
     *
     * @return self
     */
    public function setMoneyrefundtotalnet($moneyrefundtotalnet)
    {
        if (is_null($moneyrefundtotalnet)) {
            throw new \InvalidArgumentException('non-nullable moneyrefundtotalnet cannot be null');
        }
        $this->container['moneyrefundtotalnet'] = $moneyrefundtotalnet;

        return $this;
    }

    /**
     * Gets numrefund
     *
     * @return int|null
     */
    public function getNumrefund()
    {
        return $this->container['numrefund'];
    }

    /**
     * Sets numrefund
     *
     * @param int|null $numrefund The total number of refunds.
     *
     * @return self
     */
    public function setNumrefund($numrefund)
    {
        if (is_null($numrefund)) {
            throw new \InvalidArgumentException('non-nullable numrefund cannot be null');
        }
        $this->container['numrefund'] = $numrefund;

        return $this;
    }

    /**
     * Gets numrefunditems
     *
     * @return int|null
     */
    public function getNumrefunditems()
    {
        return $this->container['numrefunditems'];
    }

    /**
     * Sets numrefunditems
     *
     * @param int|null $numrefunditems The total number of items in refunds.
     *
     * @return self
     */
    public function setNumrefunditems($numrefunditems)
    {
        if (is_null($numrefunditems)) {
            throw new \InvalidArgumentException('non-nullable numrefunditems cannot be null');
        }
        $this->container['numrefunditems'] = $numrefunditems;

        return $this;
    }

    /**
     * Gets vatgroupsrefund
     *
     * @return \Spy\SitooClient\Model\PoszreportvatgroupRead[]|null
     */
    public function getVatgroupsrefund()
    {
        return $this->container['vatgroupsrefund'];
    }

    /**
     * Sets vatgroupsrefund
     *
     * @param \Spy\SitooClient\Model\PoszreportvatgroupRead[]|null $vatgroupsrefund Refunds grouped by vat values. See poszreportvatgroup for fields.
     *
     * @return self
     */
    public function setVatgroupsrefund($vatgroupsrefund)
    {
        if (is_null($vatgroupsrefund)) {
            throw new \InvalidArgumentException('non-nullable vatgroupsrefund cannot be null');
        }
        $this->container['vatgroupsrefund'] = $vatgroupsrefund;

        return $this;
    }

    /**
     * Gets productgroupsrefund
     *
     * @return \Spy\SitooClient\Model\PoszreportproductgroupRead[]|null
     */
    public function getProductgroupsrefund()
    {
        return $this->container['productgroupsrefund'];
    }

    /**
     * Sets productgroupsrefund
     *
     * @param \Spy\SitooClient\Model\PoszreportproductgroupRead[]|null $productgroupsrefund Refunds grouped by product group. See poszreportproductgroup for fields.
     *
     * @return self
     */
    public function setProductgroupsrefund($productgroupsrefund)
    {
        if (is_null($productgroupsrefund)) {
            throw new \InvalidArgumentException('non-nullable productgroupsrefund cannot be null');
        }
        $this->container['productgroupsrefund'] = $productgroupsrefund;

        return $this;
    }

    /**
     * Gets moneyroundoff
     *
     * @return string|null
     */
    public function getMoneyroundoff()
    {
        return $this->container['moneyroundoff'];
    }

    /**
     * Sets moneyroundoff
     *
     * @param string|null $moneyroundoff The total money value for roundoff.
     *
     * @return self
     */
    public function setMoneyroundoff($moneyroundoff)
    {
        if (is_null($moneyroundoff)) {
            throw new \InvalidArgumentException('non-nullable moneyroundoff cannot be null');
        }
        $this->container['moneyroundoff'] = $moneyroundoff;

        return $this;
    }

    /**
     * Gets salestaxessales
     *
     * @return \Spy\SitooClient\Model\PoszreportsalestaxRead[]|null
     */
    public function getSalestaxessales()
    {
        return $this->container['salestaxessales'];
    }

    /**
     * Sets salestaxessales
     *
     * @param \Spy\SitooClient\Model\PoszreportsalestaxRead[]|null $salestaxessales Collected sales taxes for sales grouped by name, code and taxvalue. See poszreportsalestax for fields.
     *
     * @return self
     */
    public function setSalestaxessales($salestaxessales)
    {
        if (is_null($salestaxessales)) {
            throw new \InvalidArgumentException('non-nullable salestaxessales cannot be null');
        }
        $this->container['salestaxessales'] = $salestaxessales;

        return $this;
    }

    /**
     * Gets salestaxesrefund
     *
     * @return \Spy\SitooClient\Model\PoszreportsalestaxRead[]|null
     */
    public function getSalestaxesrefund()
    {
        return $this->container['salestaxesrefund'];
    }

    /**
     * Sets salestaxesrefund
     *
     * @param \Spy\SitooClient\Model\PoszreportsalestaxRead[]|null $salestaxesrefund Collected sales taxes for refunds grouped by name, code and taxvalue. See poszreportsalestax for fields.
     *
     * @return self
     */
    public function setSalestaxesrefund($salestaxesrefund)
    {
        if (is_null($salestaxesrefund)) {
            throw new \InvalidArgumentException('non-nullable salestaxesrefund cannot be null');
        }
        $this->container['salestaxesrefund'] = $salestaxesrefund;

        return $this;
    }

    /**
     * Gets moneysalestaxinadvance
     *
     * @return string|null
     */
    public function getMoneysalestaxinadvance()
    {
        return $this->container['moneysalestaxinadvance'];
    }

    /**
     * Sets moneysalestaxinadvance
     *
     * @param string|null $moneysalestaxinadvance The total value of sales tax collected for items not delivered (if applicable).
     *
     * @return self
     */
    public function setMoneysalestaxinadvance($moneysalestaxinadvance)
    {
        if (is_null($moneysalestaxinadvance)) {
            throw new \InvalidArgumentException('non-nullable moneysalestaxinadvance cannot be null');
        }
        $this->container['moneysalestaxinadvance'] = $moneysalestaxinadvance;

        return $this;
    }

    /**
     * Gets moneysummarysales
     *
     * @return string|null
     */
    public function getMoneysummarysales()
    {
        return $this->container['moneysummarysales'];
    }

    /**
     * Sets moneysummarysales
     *
     * @param string|null $moneysummarysales The total money value for sales.
     *
     * @return self
     */
    public function setMoneysummarysales($moneysummarysales)
    {
        if (is_null($moneysummarysales)) {
            throw new \InvalidArgumentException('non-nullable moneysummarysales cannot be null');
        }
        $this->container['moneysummarysales'] = $moneysummarysales;

        return $this;
    }

    /**
     * Gets moneysummaryrefund
     *
     * @return string|null
     */
    public function getMoneysummaryrefund()
    {
        return $this->container['moneysummaryrefund'];
    }

    /**
     * Sets moneysummaryrefund
     *
     * @param string|null $moneysummaryrefund The total money value for refunds.
     *
     * @return self
     */
    public function setMoneysummaryrefund($moneysummaryrefund)
    {
        if (is_null($moneysummaryrefund)) {
            throw new \InvalidArgumentException('non-nullable moneysummaryrefund cannot be null');
        }
        $this->container['moneysummaryrefund'] = $moneysummaryrefund;

        return $this;
    }

    /**
     * Gets moneysummarysubtotal
     *
     * @return string|null
     */
    public function getMoneysummarysubtotal()
    {
        return $this->container['moneysummarysubtotal'];
    }

    /**
     * Sets moneysummarysubtotal
     *
     * @param string|null $moneysummarysubtotal The sub total money value (moneysummarysales - moneysummaryrefund).
     *
     * @return self
     */
    public function setMoneysummarysubtotal($moneysummarysubtotal)
    {
        if (is_null($moneysummarysubtotal)) {
            throw new \InvalidArgumentException('non-nullable moneysummarysubtotal cannot be null');
        }
        $this->container['moneysummarysubtotal'] = $moneysummarysubtotal;

        return $this;
    }

    /**
     * Gets moneysummarysalestax
     *
     * @return string|null
     */
    public function getMoneysummarysalestax()
    {
        return $this->container['moneysummarysalestax'];
    }

    /**
     * Sets moneysummarysalestax
     *
     * @param string|null $moneysummarysalestax The sub total money value for sales tax.
     *
     * @return self
     */
    public function setMoneysummarysalestax($moneysummarysalestax)
    {
        if (is_null($moneysummarysalestax)) {
            throw new \InvalidArgumentException('non-nullable moneysummarysalestax cannot be null');
        }
        $this->container['moneysummarysalestax'] = $moneysummarysalestax;

        return $this;
    }

    /**
     * Gets moneysummaryroundoff
     *
     * @return string|null
     */
    public function getMoneysummaryroundoff()
    {
        return $this->container['moneysummaryroundoff'];
    }

    /**
     * Sets moneysummaryroundoff
     *
     * @param string|null $moneysummaryroundoff The total money value for roundoff.
     *
     * @return self
     */
    public function setMoneysummaryroundoff($moneysummaryroundoff)
    {
        if (is_null($moneysummaryroundoff)) {
            throw new \InvalidArgumentException('non-nullable moneysummaryroundoff cannot be null');
        }
        $this->container['moneysummaryroundoff'] = $moneysummaryroundoff;

        return $this;
    }

    /**
     * Gets moneysummarytotal
     *
     * @return string|null
     */
    public function getMoneysummarytotal()
    {
        return $this->container['moneysummarytotal'];
    }

    /**
     * Sets moneysummarytotal
     *
     * @param string|null $moneysummarytotal The total money value for the report (moneysummarysubtotal + moneysummarysalestax + moneysummaryroundoff).
     *
     * @return self
     */
    public function setMoneysummarytotal($moneysummarytotal)
    {
        if (is_null($moneysummarytotal)) {
            throw new \InvalidArgumentException('non-nullable moneysummarytotal cannot be null');
        }
        $this->container['moneysummarytotal'] = $moneysummarytotal;

        return $this;
    }

    /**
     * Gets paymentssales
     *
     * @return \Spy\SitooClient\Model\PoszreportpaymentRead[]|null
     */
    public function getPaymentssales()
    {
        return $this->container['paymentssales'];
    }

    /**
     * Sets paymentssales
     *
     * @param \Spy\SitooClient\Model\PoszreportpaymentRead[]|null $paymentssales All payments for sales. See poszreportpayment for fields.
     *
     * @return self
     */
    public function setPaymentssales($paymentssales)
    {
        if (is_null($paymentssales)) {
            throw new \InvalidArgumentException('non-nullable paymentssales cannot be null');
        }
        $this->container['paymentssales'] = $paymentssales;

        return $this;
    }

    /**
     * Gets paymentsrefund
     *
     * @return \Spy\SitooClient\Model\PoszreportpaymentRead[]|null
     */
    public function getPaymentsrefund()
    {
        return $this->container['paymentsrefund'];
    }

    /**
     * Sets paymentsrefund
     *
     * @param \Spy\SitooClient\Model\PoszreportpaymentRead[]|null $paymentsrefund All payments for refunds. See poszreportpayment for fields.
     *
     * @return self
     */
    public function setPaymentsrefund($paymentsrefund)
    {
        if (is_null($paymentsrefund)) {
            throw new \InvalidArgumentException('non-nullable paymentsrefund cannot be null');
        }
        $this->container['paymentsrefund'] = $paymentsrefund;

        return $this;
    }

    /**
     * Gets discountssales
     *
     * @return \Spy\SitooClient\Model\PoszreportdiscountRead[]|null
     */
    public function getDiscountssales()
    {
        return $this->container['discountssales'];
    }

    /**
     * Sets discountssales
     *
     * @param \Spy\SitooClient\Model\PoszreportdiscountRead[]|null $discountssales Discounts grouped by vouchercode for sales. See poszreportdiscount for fields.
     *
     * @return self
     */
    public function setDiscountssales($discountssales)
    {
        if (is_null($discountssales)) {
            throw new \InvalidArgumentException('non-nullable discountssales cannot be null');
        }
        $this->container['discountssales'] = $discountssales;

        return $this;
    }

    /**
     * Gets discountssalesnotdelivered
     *
     * @return \Spy\SitooClient\Model\PoszreportdiscountRead[]|null
     */
    public function getDiscountssalesnotdelivered()
    {
        return $this->container['discountssalesnotdelivered'];
    }

    /**
     * Sets discountssalesnotdelivered
     *
     * @param \Spy\SitooClient\Model\PoszreportdiscountRead[]|null $discountssalesnotdelivered Discounts grouped by vouchercode for sales not delivered. See poszreportdiscount for fields.
     *
     * @return self
     */
    public function setDiscountssalesnotdelivered($discountssalesnotdelivered)
    {
        if (is_null($discountssalesnotdelivered)) {
            throw new \InvalidArgumentException('non-nullable discountssalesnotdelivered cannot be null');
        }
        $this->container['discountssalesnotdelivered'] = $discountssalesnotdelivered;

        return $this;
    }

    /**
     * Gets discountsrefund
     *
     * @return \Spy\SitooClient\Model\PoszreportdiscountRead[]|null
     */
    public function getDiscountsrefund()
    {
        return $this->container['discountsrefund'];
    }

    /**
     * Sets discountsrefund
     *
     * @param \Spy\SitooClient\Model\PoszreportdiscountRead[]|null $discountsrefund Discounts grouped by vouchercode for refunds. See poszreportdiscount for fields.
     *
     * @return self
     */
    public function setDiscountsrefund($discountsrefund)
    {
        if (is_null($discountsrefund)) {
            throw new \InvalidArgumentException('non-nullable discountsrefund cannot be null');
        }
        $this->container['discountsrefund'] = $discountsrefund;

        return $this;
    }

    /**
     * Gets moneycashIn
     *
     * @return string|null
     */
    public function getMoneycashIn()
    {
        return $this->container['moneycashIn'];
    }

    /**
     * Sets moneycashIn
     *
     * @param string|null $moneycashIn The entered money value for cash in the register when it was opened.
     *
     * @return self
     */
    public function setMoneycashIn($moneycashIn)
    {
        if (is_null($moneycashIn)) {
            throw new \InvalidArgumentException('non-nullable moneycashIn cannot be null');
        }
        $this->container['moneycashIn'] = $moneycashIn;

        return $this;
    }

    /**
     * Gets moneycashSalesrefunds
     *
     * @return string|null
     */
    public function getMoneycashSalesrefunds()
    {
        return $this->container['moneycashSalesrefunds'];
    }

    /**
     * Sets moneycashSalesrefunds
     *
     * @param string|null $moneycashSalesrefunds The total amount of cash from sales/refunds for register since it was opened.
     *
     * @return self
     */
    public function setMoneycashSalesrefunds($moneycashSalesrefunds)
    {
        if (is_null($moneycashSalesrefunds)) {
            throw new \InvalidArgumentException('non-nullable moneycashSalesrefunds cannot be null');
        }
        $this->container['moneycashSalesrefunds'] = $moneycashSalesrefunds;

        return $this;
    }

    /**
     * Gets moneycashPetty
     *
     * @return string|null
     */
    public function getMoneycashPetty()
    {
        return $this->container['moneycashPetty'];
    }

    /**
     * Sets moneycashPetty
     *
     * @param string|null $moneycashPetty The total petty cash change for register since it was opened.
     *
     * @return self
     */
    public function setMoneycashPetty($moneycashPetty)
    {
        if (is_null($moneycashPetty)) {
            throw new \InvalidArgumentException('non-nullable moneycashPetty cannot be null');
        }
        $this->container['moneycashPetty'] = $moneycashPetty;

        return $this;
    }

    /**
     * Gets moneycashBank
     *
     * @return string|null
     */
    public function getMoneycashBank()
    {
        return $this->container['moneycashBank'];
    }

    /**
     * Sets moneycashBank
     *
     * @param string|null $moneycashBank The total banking cash change for register since it was opened.
     *
     * @return self
     */
    public function setMoneycashBank($moneycashBank)
    {
        if (is_null($moneycashBank)) {
            throw new \InvalidArgumentException('non-nullable moneycashBank cannot be null');
        }
        $this->container['moneycashBank'] = $moneycashBank;

        return $this;
    }

    /**
     * Gets moneycashExpected
     *
     * @return string|null
     */
    public function getMoneycashExpected()
    {
        return $this->container['moneycashExpected'];
    }

    /**
     * Sets moneycashExpected
     *
     * @param string|null $moneycashExpected The calculated money value for cash in the register before it was counted.
     *
     * @return self
     */
    public function setMoneycashExpected($moneycashExpected)
    {
        if (is_null($moneycashExpected)) {
            throw new \InvalidArgumentException('non-nullable moneycashExpected cannot be null');
        }
        $this->container['moneycashExpected'] = $moneycashExpected;

        return $this;
    }

    /**
     * Gets moneycashCounted
     *
     * @return string|null
     */
    public function getMoneycashCounted()
    {
        return $this->container['moneycashCounted'];
    }

    /**
     * Sets moneycashCounted
     *
     * @param string|null $moneycashCounted The counted money value for cash in the register when closing.
     *
     * @return self
     */
    public function setMoneycashCounted($moneycashCounted)
    {
        if (is_null($moneycashCounted)) {
            throw new \InvalidArgumentException('non-nullable moneycashCounted cannot be null');
        }
        $this->container['moneycashCounted'] = $moneycashCounted;

        return $this;
    }

    /**
     * Gets moneycashDiff
     *
     * @return string|null
     */
    public function getMoneycashDiff()
    {
        return $this->container['moneycashDiff'];
    }

    /**
     * Sets moneycashDiff
     *
     * @param string|null $moneycashDiff The difference in money value for cash between expected and counted values.
     *
     * @return self
     */
    public function setMoneycashDiff($moneycashDiff)
    {
        if (is_null($moneycashDiff)) {
            throw new \InvalidArgumentException('non-nullable moneycashDiff cannot be null');
        }
        $this->container['moneycashDiff'] = $moneycashDiff;

        return $this;
    }

    /**
     * Gets moneycashBankfinal
     *
     * @return string|null
     */
    public function getMoneycashBankfinal()
    {
        return $this->container['moneycashBankfinal'];
    }

    /**
     * Sets moneycashBankfinal
     *
     * @param string|null $moneycashBankfinal The amount of cash banked after cash had been counted.
     *
     * @return self
     */
    public function setMoneycashBankfinal($moneycashBankfinal)
    {
        if (is_null($moneycashBankfinal)) {
            throw new \InvalidArgumentException('non-nullable moneycashBankfinal cannot be null');
        }
        $this->container['moneycashBankfinal'] = $moneycashBankfinal;

        return $this;
    }

    /**
     * Gets moneycashOut
     *
     * @return string|null
     */
    public function getMoneycashOut()
    {
        return $this->container['moneycashOut'];
    }

    /**
     * Sets moneycashOut
     *
     * @param string|null $moneycashOut The money value for cash in the register after it was closed.
     *
     * @return self
     */
    public function setMoneycashOut($moneycashOut)
    {
        if (is_null($moneycashOut)) {
            throw new \InvalidArgumentException('non-nullable moneycashOut cannot be null');
        }
        $this->container['moneycashOut'] = $moneycashOut;

        return $this;
    }

    /**
     * Gets moneydiscount
     *
     * @return string|null
     */
    public function getMoneydiscount()
    {
        return $this->container['moneydiscount'];
    }

    /**
     * Sets moneydiscount
     *
     * @param string|null $moneydiscount The total money amount for discounts of sales (incl. VAT). For discount details see discountssales and discountsrefund.
     *
     * @return self
     */
    public function setMoneydiscount($moneydiscount)
    {
        if (is_null($moneydiscount)) {
            throw new \InvalidArgumentException('non-nullable moneydiscount cannot be null');
        }
        $this->container['moneydiscount'] = $moneydiscount;

        return $this;
    }

    /**
     * Gets numsalestypeproduct
     *
     * @return int|null
     */
    public function getNumsalestypeproduct()
    {
        return $this->container['numsalestypeproduct'];
    }

    /**
     * Sets numsalestypeproduct
     *
     * @param int|null $numsalestypeproduct The total number of items of type \"product\".
     *
     * @return self
     */
    public function setNumsalestypeproduct($numsalestypeproduct)
    {
        if (is_null($numsalestypeproduct)) {
            throw new \InvalidArgumentException('non-nullable numsalestypeproduct cannot be null');
        }
        $this->container['numsalestypeproduct'] = $numsalestypeproduct;

        return $this;
    }

    /**
     * Gets numsalestypeservice
     *
     * @return int|null
     */
    public function getNumsalestypeservice()
    {
        return $this->container['numsalestypeservice'];
    }

    /**
     * Sets numsalestypeservice
     *
     * @param int|null $numsalestypeservice The total number of items of type \"service\".
     *
     * @return self
     */
    public function setNumsalestypeservice($numsalestypeservice)
    {
        if (is_null($numsalestypeservice)) {
            throw new \InvalidArgumentException('non-nullable numsalestypeservice cannot be null');
        }
        $this->container['numsalestypeservice'] = $numsalestypeservice;

        return $this;
    }

    /**
     * Gets numsalestypegiftcard
     *
     * @return int|null
     */
    public function getNumsalestypegiftcard()
    {
        return $this->container['numsalestypegiftcard'];
    }

    /**
     * Sets numsalestypegiftcard
     *
     * @param int|null $numsalestypegiftcard The total number of items of type \"gift card\".
     *
     * @return self
     */
    public function setNumsalestypegiftcard($numsalestypegiftcard)
    {
        if (is_null($numsalestypegiftcard)) {
            throw new \InvalidArgumentException('non-nullable numsalestypegiftcard cannot be null');
        }
        $this->container['numsalestypegiftcard'] = $numsalestypegiftcard;

        return $this;
    }

    /**
     * Gets numreceipts
     *
     * @return int|null
     */
    public function getNumreceipts()
    {
        return $this->container['numreceipts'];
    }

    /**
     * Sets numreceipts
     *
     * @param int|null $numreceipts The total number of receipts.
     *
     * @return self
     */
    public function setNumreceipts($numreceipts)
    {
        if (is_null($numreceipts)) {
            throw new \InvalidArgumentException('non-nullable numreceipts cannot be null');
        }
        $this->container['numreceipts'] = $numreceipts;

        return $this;
    }

    /**
     * Gets numopendrawer
     *
     * @return int|null
     */
    public function getNumopendrawer()
    {
        return $this->container['numopendrawer'];
    }

    /**
     * Sets numopendrawer
     *
     * @param int|null $numopendrawer The total number of time the cash register drawer was opened (except for normal transactions).
     *
     * @return self
     */
    public function setNumopendrawer($numopendrawer)
    {
        if (is_null($numopendrawer)) {
            throw new \InvalidArgumentException('non-nullable numopendrawer cannot be null');
        }
        $this->container['numopendrawer'] = $numopendrawer;

        return $this;
    }

    /**
     * Gets numpractice
     *
     * @return int|null
     */
    public function getNumpractice()
    {
        return $this->container['numpractice'];
    }

    /**
     * Sets numpractice
     *
     * @param int|null $numpractice The total number of transactions made in practice mode.
     *
     * @return self
     */
    public function setNumpractice($numpractice)
    {
        if (is_null($numpractice)) {
            throw new \InvalidArgumentException('non-nullable numpractice cannot be null');
        }
        $this->container['numpractice'] = $numpractice;

        return $this;
    }

    /**
     * Gets moneypractice
     *
     * @return string|null
     */
    public function getMoneypractice()
    {
        return $this->container['moneypractice'];
    }

    /**
     * Sets moneypractice
     *
     * @param string|null $moneypractice The total money value of transactions made in practice mode.
     *
     * @return self
     */
    public function setMoneypractice($moneypractice)
    {
        if (is_null($moneypractice)) {
            throw new \InvalidArgumentException('non-nullable moneypractice cannot be null');
        }
        $this->container['moneypractice'] = $moneypractice;

        return $this;
    }

    /**
     * Gets moneygrandtotalsales
     *
     * @return string|null
     */
    public function getMoneygrandtotalsales()
    {
        return $this->container['moneygrandtotalsales'];
    }

    /**
     * Sets moneygrandtotalsales
     *
     * @param string|null $moneygrandtotalsales The total money value for sales since the start of the cash register.
     *
     * @return self
     */
    public function setMoneygrandtotalsales($moneygrandtotalsales)
    {
        if (is_null($moneygrandtotalsales)) {
            throw new \InvalidArgumentException('non-nullable moneygrandtotalsales cannot be null');
        }
        $this->container['moneygrandtotalsales'] = $moneygrandtotalsales;

        return $this;
    }

    /**
     * Gets moneygrandtotalrefund
     *
     * @return string|null
     */
    public function getMoneygrandtotalrefund()
    {
        return $this->container['moneygrandtotalrefund'];
    }

    /**
     * Sets moneygrandtotalrefund
     *
     * @param string|null $moneygrandtotalrefund The total money value for refunds since the start of the cash register.
     *
     * @return self
     */
    public function setMoneygrandtotalrefund($moneygrandtotalrefund)
    {
        if (is_null($moneygrandtotalrefund)) {
            throw new \InvalidArgumentException('non-nullable moneygrandtotalrefund cannot be null');
        }
        $this->container['moneygrandtotalrefund'] = $moneygrandtotalrefund;

        return $this;
    }

    /**
     * Gets moneygrandtotalnet
     *
     * @return string|null
     */
    public function getMoneygrandtotalnet()
    {
        return $this->container['moneygrandtotalnet'];
    }

    /**
     * Sets moneygrandtotalnet
     *
     * @param string|null $moneygrandtotalnet The summary total money value since the start of the cash register (moneygrandtotalsales - moneygrandtotalrefund).
     *
     * @return self
     */
    public function setMoneygrandtotalnet($moneygrandtotalnet)
    {
        if (is_null($moneygrandtotalnet)) {
            throw new \InvalidArgumentException('non-nullable moneygrandtotalnet cannot be null');
        }
        $this->container['moneygrandtotalnet'] = $moneygrandtotalnet;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


