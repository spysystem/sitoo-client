<?php
/**
 * OrderWrite
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Model;

use \ArrayAccess;
use \Spy\SitooClient\ObjectSerializer;

/**
 * OrderWrite Class Doc Comment
 *
 * @category Class
 * @description The Sitoo order object.
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderWrite implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return OrderWriteModelFields
      */
    public static function GetModelFields(): OrderWriteModelFields
    {
        return new OrderWriteModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return OrderWriteModelAttributes
      */
    public static function GetModelAttributes(): OrderWriteModelAttributes
    {
        return new OrderWriteModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'order-write';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'externalid' => 'string',
        'creditorderid' => 'int',
        'email' => 'string',
        'namefirst' => 'string',
        'namelast' => 'string',
        'personalid' => 'string',
        'company' => 'string',
        'phone' => 'string',
        'invoiceAddress' => 'string',
        'invoiceAddress2' => 'string',
        'invoiceZip' => 'string',
        'invoiceCity' => 'string',
        'invoiceState' => 'string',
        'invoiceCountryid' => 'string',
        'deliveryAddress' => 'string',
        'deliveryAddress2' => 'string',
        'deliveryZip' => 'string',
        'deliveryCity' => 'string',
        'deliveryState' => 'string',
        'deliveryCountryid' => 'string',
        'comment' => 'string',
        'commentinternal' => 'string',
        'customerref' => 'string',
        'checkoutref' => 'string',
        'orderdate' => 'int',
        'orderstateid' => 'int',
        'paymentstateid' => 'int',
        'ordertypeid' => 'int',
        'warehouseid' => 'int',
        'datereserved' => 'int',
        'currencycode' => 'string',
        'additionaldata' => '\Spy\SitooClient\Model\OrderAdditionaldataWrite',
        'orderitems' => '\Spy\SitooClient\Model\OrderitemWrite[]',
        'payments' => '\Spy\SitooClient\Model\OrderpaymentWrite[]',
        'reservedpayments' => '\Spy\SitooClient\Model\OrderreservedpaymentWrite[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'externalid' => null,
        'creditorderid' => null,
        'email' => null,
        'namefirst' => null,
        'namelast' => null,
        'personalid' => null,
        'company' => null,
        'phone' => null,
        'invoiceAddress' => null,
        'invoiceAddress2' => null,
        'invoiceZip' => null,
        'invoiceCity' => null,
        'invoiceState' => null,
        'invoiceCountryid' => null,
        'deliveryAddress' => null,
        'deliveryAddress2' => null,
        'deliveryZip' => null,
        'deliveryCity' => null,
        'deliveryState' => null,
        'deliveryCountryid' => null,
        'comment' => null,
        'commentinternal' => null,
        'customerref' => null,
        'checkoutref' => null,
        'orderdate' => null,
        'orderstateid' => null,
        'paymentstateid' => null,
        'ordertypeid' => null,
        'warehouseid' => null,
        'datereserved' => null,
        'currencycode' => null,
        'additionaldata' => null,
        'orderitems' => null,
        'payments' => null,
        'reservedpayments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'externalid' => false,
		'creditorderid' => false,
		'email' => false,
		'namefirst' => false,
		'namelast' => false,
		'personalid' => false,
		'company' => false,
		'phone' => false,
		'invoiceAddress' => false,
		'invoiceAddress2' => false,
		'invoiceZip' => false,
		'invoiceCity' => false,
		'invoiceState' => false,
		'invoiceCountryid' => false,
		'deliveryAddress' => false,
		'deliveryAddress2' => false,
		'deliveryZip' => false,
		'deliveryCity' => false,
		'deliveryState' => false,
		'deliveryCountryid' => false,
		'comment' => false,
		'commentinternal' => false,
		'customerref' => false,
		'checkoutref' => false,
		'orderdate' => false,
		'orderstateid' => false,
		'paymentstateid' => false,
		'ordertypeid' => false,
		'warehouseid' => false,
		'datereserved' => false,
		'currencycode' => false,
		'additionaldata' => false,
		'orderitems' => false,
		'payments' => false,
		'reservedpayments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'externalid' => 'externalid',
        'creditorderid' => 'creditorderid',
        'email' => 'email',
        'namefirst' => 'namefirst',
        'namelast' => 'namelast',
        'personalid' => 'personalid',
        'company' => 'company',
        'phone' => 'phone',
        'invoiceAddress' => 'invoice_address',
        'invoiceAddress2' => 'invoice_address2',
        'invoiceZip' => 'invoice_zip',
        'invoiceCity' => 'invoice_city',
        'invoiceState' => 'invoice_state',
        'invoiceCountryid' => 'invoice_countryid',
        'deliveryAddress' => 'delivery_address',
        'deliveryAddress2' => 'delivery_address2',
        'deliveryZip' => 'delivery_zip',
        'deliveryCity' => 'delivery_city',
        'deliveryState' => 'delivery_state',
        'deliveryCountryid' => 'delivery_countryid',
        'comment' => 'comment',
        'commentinternal' => 'commentinternal',
        'customerref' => 'customerref',
        'checkoutref' => 'checkoutref',
        'orderdate' => 'orderdate',
        'orderstateid' => 'orderstateid',
        'paymentstateid' => 'paymentstateid',
        'ordertypeid' => 'ordertypeid',
        'warehouseid' => 'warehouseid',
        'datereserved' => 'datereserved',
        'currencycode' => 'currencycode',
        'additionaldata' => 'additionaldata',
        'orderitems' => 'orderitems',
        'payments' => 'payments',
        'reservedpayments' => 'reservedpayments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'externalid' => 'setExternalid',
        'creditorderid' => 'setCreditorderid',
        'email' => 'setEmail',
        'namefirst' => 'setNamefirst',
        'namelast' => 'setNamelast',
        'personalid' => 'setPersonalid',
        'company' => 'setCompany',
        'phone' => 'setPhone',
        'invoiceAddress' => 'setInvoiceAddress',
        'invoiceAddress2' => 'setInvoiceAddress2',
        'invoiceZip' => 'setInvoiceZip',
        'invoiceCity' => 'setInvoiceCity',
        'invoiceState' => 'setInvoiceState',
        'invoiceCountryid' => 'setInvoiceCountryid',
        'deliveryAddress' => 'setDeliveryAddress',
        'deliveryAddress2' => 'setDeliveryAddress2',
        'deliveryZip' => 'setDeliveryZip',
        'deliveryCity' => 'setDeliveryCity',
        'deliveryState' => 'setDeliveryState',
        'deliveryCountryid' => 'setDeliveryCountryid',
        'comment' => 'setComment',
        'commentinternal' => 'setCommentinternal',
        'customerref' => 'setCustomerref',
        'checkoutref' => 'setCheckoutref',
        'orderdate' => 'setOrderdate',
        'orderstateid' => 'setOrderstateid',
        'paymentstateid' => 'setPaymentstateid',
        'ordertypeid' => 'setOrdertypeid',
        'warehouseid' => 'setWarehouseid',
        'datereserved' => 'setDatereserved',
        'currencycode' => 'setCurrencycode',
        'additionaldata' => 'setAdditionaldata',
        'orderitems' => 'setOrderitems',
        'payments' => 'setPayments',
        'reservedpayments' => 'setReservedpayments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'externalid' => 'getExternalid',
        'creditorderid' => 'getCreditorderid',
        'email' => 'getEmail',
        'namefirst' => 'getNamefirst',
        'namelast' => 'getNamelast',
        'personalid' => 'getPersonalid',
        'company' => 'getCompany',
        'phone' => 'getPhone',
        'invoiceAddress' => 'getInvoiceAddress',
        'invoiceAddress2' => 'getInvoiceAddress2',
        'invoiceZip' => 'getInvoiceZip',
        'invoiceCity' => 'getInvoiceCity',
        'invoiceState' => 'getInvoiceState',
        'invoiceCountryid' => 'getInvoiceCountryid',
        'deliveryAddress' => 'getDeliveryAddress',
        'deliveryAddress2' => 'getDeliveryAddress2',
        'deliveryZip' => 'getDeliveryZip',
        'deliveryCity' => 'getDeliveryCity',
        'deliveryState' => 'getDeliveryState',
        'deliveryCountryid' => 'getDeliveryCountryid',
        'comment' => 'getComment',
        'commentinternal' => 'getCommentinternal',
        'customerref' => 'getCustomerref',
        'checkoutref' => 'getCheckoutref',
        'orderdate' => 'getOrderdate',
        'orderstateid' => 'getOrderstateid',
        'paymentstateid' => 'getPaymentstateid',
        'ordertypeid' => 'getOrdertypeid',
        'warehouseid' => 'getWarehouseid',
        'datereserved' => 'getDatereserved',
        'currencycode' => 'getCurrencycode',
        'additionaldata' => 'getAdditionaldata',
        'orderitems' => 'getOrderitems',
        'payments' => 'getPayments',
        'reservedpayments' => 'getReservedpayments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('externalid', $data ?? [], null);
        $this->setIfExists('creditorderid', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('namefirst', $data ?? [], null);
        $this->setIfExists('namelast', $data ?? [], null);
        $this->setIfExists('personalid', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('invoiceAddress', $data ?? [], null);
        $this->setIfExists('invoiceAddress2', $data ?? [], null);
        $this->setIfExists('invoiceZip', $data ?? [], null);
        $this->setIfExists('invoiceCity', $data ?? [], null);
        $this->setIfExists('invoiceState', $data ?? [], null);
        $this->setIfExists('invoiceCountryid', $data ?? [], null);
        $this->setIfExists('deliveryAddress', $data ?? [], null);
        $this->setIfExists('deliveryAddress2', $data ?? [], null);
        $this->setIfExists('deliveryZip', $data ?? [], null);
        $this->setIfExists('deliveryCity', $data ?? [], null);
        $this->setIfExists('deliveryState', $data ?? [], null);
        $this->setIfExists('deliveryCountryid', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('commentinternal', $data ?? [], null);
        $this->setIfExists('customerref', $data ?? [], null);
        $this->setIfExists('checkoutref', $data ?? [], null);
        $this->setIfExists('orderdate', $data ?? [], null);
        $this->setIfExists('orderstateid', $data ?? [], null);
        $this->setIfExists('paymentstateid', $data ?? [], null);
        $this->setIfExists('ordertypeid', $data ?? [], null);
        $this->setIfExists('warehouseid', $data ?? [], null);
        $this->setIfExists('datereserved', $data ?? [], null);
        $this->setIfExists('currencycode', $data ?? [], null);
        $this->setIfExists('additionaldata', $data ?? [], null);
        $this->setIfExists('orderitems', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('reservedpayments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ordertypeid'] === null) {
            $invalidProperties[] = "'ordertypeid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets externalid
     *
     * @return string|null
     */
    public function getExternalid()
    {
        return $this->container['externalid'];
    }

    /**
     * Sets externalid
     *
     * @param string|null $externalid External ID for the order. The externalid is unique for a system and can only contain [A-Za-z0-9_-] with a length of 1-40 characters.
     *
     * @return self
     */
    public function setExternalid($externalid)
    {

        if (is_null($externalid)) {
            throw new \InvalidArgumentException('non-nullable externalid cannot be null');
        }

        $this->container['externalid'] = $externalid;

        return $this;
    }

    /**
     * Gets creditorderid
     *
     * @return int|null
     */
    public function getCreditorderid()
    {
        return $this->container['creditorderid'];
    }

    /**
     * Sets creditorderid
     *
     * @param int|null $creditorderid The ID of the order that was the source of this refund.
     *
     * @return self
     */
    public function setCreditorderid($creditorderid)
    {

        if (is_null($creditorderid)) {
            throw new \InvalidArgumentException('non-nullable creditorderid cannot be null');
        }

        $this->container['creditorderid'] = $creditorderid;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email.
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets namefirst
     *
     * @return string|null
     */
    public function getNamefirst()
    {
        return $this->container['namefirst'];
    }

    /**
     * Sets namefirst
     *
     * @param string|null $namefirst First Name.
     *
     * @return self
     */
    public function setNamefirst($namefirst)
    {

        if (is_null($namefirst)) {
            throw new \InvalidArgumentException('non-nullable namefirst cannot be null');
        }

        $this->container['namefirst'] = $namefirst;

        return $this;
    }

    /**
     * Gets namelast
     *
     * @return string|null
     */
    public function getNamelast()
    {
        return $this->container['namelast'];
    }

    /**
     * Sets namelast
     *
     * @param string|null $namelast Last Name.
     *
     * @return self
     */
    public function setNamelast($namelast)
    {

        if (is_null($namelast)) {
            throw new \InvalidArgumentException('non-nullable namelast cannot be null');
        }

        $this->container['namelast'] = $namelast;

        return $this;
    }

    /**
     * Gets personalid
     *
     * @return string|null
     */
    public function getPersonalid()
    {
        return $this->container['personalid'];
    }

    /**
     * Sets personalid
     *
     * @param string|null $personalid Personal Number or Organizational ID.
     *
     * @return self
     */
    public function setPersonalid($personalid)
    {

        if (is_null($personalid)) {
            throw new \InvalidArgumentException('non-nullable personalid cannot be null');
        }

        $this->container['personalid'] = $personalid;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company Company Name.
     *
     * @return self
     */
    public function setCompany($company)
    {

        if (is_null($company)) {
            throw new \InvalidArgumentException('non-nullable company cannot be null');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone Number.
     *
     * @return self
     */
    public function setPhone($phone)
    {

        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets invoiceAddress
     *
     * @return string|null
     */
    public function getInvoiceAddress()
    {
        return $this->container['invoiceAddress'];
    }

    /**
     * Sets invoiceAddress
     *
     * @param string|null $invoiceAddress Invoice Address.
     *
     * @return self
     */
    public function setInvoiceAddress($invoiceAddress)
    {

        if (is_null($invoiceAddress)) {
            throw new \InvalidArgumentException('non-nullable invoiceAddress cannot be null');
        }

        $this->container['invoiceAddress'] = $invoiceAddress;

        return $this;
    }

    /**
     * Gets invoiceAddress2
     *
     * @return string|null
     */
    public function getInvoiceAddress2()
    {
        return $this->container['invoiceAddress2'];
    }

    /**
     * Sets invoiceAddress2
     *
     * @param string|null $invoiceAddress2 Invoice Address 2.
     *
     * @return self
     */
    public function setInvoiceAddress2($invoiceAddress2)
    {

        if (is_null($invoiceAddress2)) {
            throw new \InvalidArgumentException('non-nullable invoiceAddress2 cannot be null');
        }

        $this->container['invoiceAddress2'] = $invoiceAddress2;

        return $this;
    }

    /**
     * Gets invoiceZip
     *
     * @return string|null
     */
    public function getInvoiceZip()
    {
        return $this->container['invoiceZip'];
    }

    /**
     * Sets invoiceZip
     *
     * @param string|null $invoiceZip Invoice Zip.
     *
     * @return self
     */
    public function setInvoiceZip($invoiceZip)
    {

        if (is_null($invoiceZip)) {
            throw new \InvalidArgumentException('non-nullable invoiceZip cannot be null');
        }

        $this->container['invoiceZip'] = $invoiceZip;

        return $this;
    }

    /**
     * Gets invoiceCity
     *
     * @return string|null
     */
    public function getInvoiceCity()
    {
        return $this->container['invoiceCity'];
    }

    /**
     * Sets invoiceCity
     *
     * @param string|null $invoiceCity Invoice City.
     *
     * @return self
     */
    public function setInvoiceCity($invoiceCity)
    {

        if (is_null($invoiceCity)) {
            throw new \InvalidArgumentException('non-nullable invoiceCity cannot be null');
        }

        $this->container['invoiceCity'] = $invoiceCity;

        return $this;
    }

    /**
     * Gets invoiceState
     *
     * @return string|null
     */
    public function getInvoiceState()
    {
        return $this->container['invoiceState'];
    }

    /**
     * Sets invoiceState
     *
     * @param string|null $invoiceState Invoice State.
     *
     * @return self
     */
    public function setInvoiceState($invoiceState)
    {

        if (is_null($invoiceState)) {
            throw new \InvalidArgumentException('non-nullable invoiceState cannot be null');
        }

        $this->container['invoiceState'] = $invoiceState;

        return $this;
    }

    /**
     * Gets invoiceCountryid
     *
     * @return string|null
     */
    public function getInvoiceCountryid()
    {
        return $this->container['invoiceCountryid'];
    }

    /**
     * Sets invoiceCountryid
     *
     * @param string|null $invoiceCountryid Invoice Country ID (2-letter ISO 3166).
     *
     * @return self
     */
    public function setInvoiceCountryid($invoiceCountryid)
    {

        if (is_null($invoiceCountryid)) {
            throw new \InvalidArgumentException('non-nullable invoiceCountryid cannot be null');
        }

        $this->container['invoiceCountryid'] = $invoiceCountryid;

        return $this;
    }

    /**
     * Gets deliveryAddress
     *
     * @return string|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['deliveryAddress'];
    }

    /**
     * Sets deliveryAddress
     *
     * @param string|null $deliveryAddress Delivery Address.
     *
     * @return self
     */
    public function setDeliveryAddress($deliveryAddress)
    {

        if (is_null($deliveryAddress)) {
            throw new \InvalidArgumentException('non-nullable deliveryAddress cannot be null');
        }

        $this->container['deliveryAddress'] = $deliveryAddress;

        return $this;
    }

    /**
     * Gets deliveryAddress2
     *
     * @return string|null
     */
    public function getDeliveryAddress2()
    {
        return $this->container['deliveryAddress2'];
    }

    /**
     * Sets deliveryAddress2
     *
     * @param string|null $deliveryAddress2 Delivery Address 2.
     *
     * @return self
     */
    public function setDeliveryAddress2($deliveryAddress2)
    {

        if (is_null($deliveryAddress2)) {
            throw new \InvalidArgumentException('non-nullable deliveryAddress2 cannot be null');
        }

        $this->container['deliveryAddress2'] = $deliveryAddress2;

        return $this;
    }

    /**
     * Gets deliveryZip
     *
     * @return string|null
     */
    public function getDeliveryZip()
    {
        return $this->container['deliveryZip'];
    }

    /**
     * Sets deliveryZip
     *
     * @param string|null $deliveryZip Delivery Zip.
     *
     * @return self
     */
    public function setDeliveryZip($deliveryZip)
    {

        if (is_null($deliveryZip)) {
            throw new \InvalidArgumentException('non-nullable deliveryZip cannot be null');
        }

        $this->container['deliveryZip'] = $deliveryZip;

        return $this;
    }

    /**
     * Gets deliveryCity
     *
     * @return string|null
     */
    public function getDeliveryCity()
    {
        return $this->container['deliveryCity'];
    }

    /**
     * Sets deliveryCity
     *
     * @param string|null $deliveryCity Delivery City.
     *
     * @return self
     */
    public function setDeliveryCity($deliveryCity)
    {

        if (is_null($deliveryCity)) {
            throw new \InvalidArgumentException('non-nullable deliveryCity cannot be null');
        }

        $this->container['deliveryCity'] = $deliveryCity;

        return $this;
    }

    /**
     * Gets deliveryState
     *
     * @return string|null
     */
    public function getDeliveryState()
    {
        return $this->container['deliveryState'];
    }

    /**
     * Sets deliveryState
     *
     * @param string|null $deliveryState Delivery State.
     *
     * @return self
     */
    public function setDeliveryState($deliveryState)
    {

        if (is_null($deliveryState)) {
            throw new \InvalidArgumentException('non-nullable deliveryState cannot be null');
        }

        $this->container['deliveryState'] = $deliveryState;

        return $this;
    }

    /**
     * Gets deliveryCountryid
     *
     * @return string|null
     */
    public function getDeliveryCountryid()
    {
        return $this->container['deliveryCountryid'];
    }

    /**
     * Sets deliveryCountryid
     *
     * @param string|null $deliveryCountryid Delivery Country ID (2-letter ISO 3166).
     *
     * @return self
     */
    public function setDeliveryCountryid($deliveryCountryid)
    {

        if (is_null($deliveryCountryid)) {
            throw new \InvalidArgumentException('non-nullable deliveryCountryid cannot be null');
        }

        $this->container['deliveryCountryid'] = $deliveryCountryid;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Order comment.
     *
     * @return self
     */
    public function setComment($comment)
    {

        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets commentinternal
     *
     * @return string|null
     */
    public function getCommentinternal()
    {
        return $this->container['commentinternal'];
    }

    /**
     * Sets commentinternal
     *
     * @param string|null $commentinternal Internal staff comment.
     *
     * @return self
     */
    public function setCommentinternal($commentinternal)
    {

        if (is_null($commentinternal)) {
            throw new \InvalidArgumentException('non-nullable commentinternal cannot be null');
        }

        $this->container['commentinternal'] = $commentinternal;

        return $this;
    }

    /**
     * Gets customerref
     *
     * @return string|null
     */
    public function getCustomerref()
    {
        return $this->container['customerref'];
    }

    /**
     * Sets customerref
     *
     * @param string|null $customerref Customer Reference.
     *
     * @return self
     */
    public function setCustomerref($customerref)
    {

        if (is_null($customerref)) {
            throw new \InvalidArgumentException('non-nullable customerref cannot be null');
        }

        $this->container['customerref'] = $customerref;

        return $this;
    }

    /**
     * Gets checkoutref
     *
     * @return string|null
     */
    public function getCheckoutref()
    {
        return $this->container['checkoutref'];
    }

    /**
     * Sets checkoutref
     *
     * @param string|null $checkoutref Checkout Reference (typically set by payment providers).
     *
     * @return self
     */
    public function setCheckoutref($checkoutref)
    {

        if (is_null($checkoutref)) {
            throw new \InvalidArgumentException('non-nullable checkoutref cannot be null');
        }

        $this->container['checkoutref'] = $checkoutref;

        return $this;
    }

    /**
     * Gets orderdate
     *
     * @return int|null
     */
    public function getOrderdate()
    {
        return $this->container['orderdate'];
    }

    /**
     * Sets orderdate
     *
     * @param int|null $orderdate The date of the order. In a POST request, the default is the current timestamp. Orders generated from the POS will have the date of when the transaction was made. Note! if the POS is offline when the transaction is made, then the order will be created on the backend at a later time, but the date will still be set to when the transaction was made.
     *
     * @return self
     */
    public function setOrderdate($orderdate)
    {

        if (is_null($orderdate)) {
            throw new \InvalidArgumentException('non-nullable orderdate cannot be null');
        }

        $this->container['orderdate'] = $orderdate;

        return $this;
    }

    /**
     * Gets orderstateid
     *
     * @return int|null
     */
    public function getOrderstateid()
    {
        return $this->container['orderstateid'];
    }

    /**
     * Sets orderstateid
     *
     * @param int|null $orderstateid Order state.
     *
     * @return self
     */
    public function setOrderstateid($orderstateid)
    {

        if (is_null($orderstateid)) {
            throw new \InvalidArgumentException('non-nullable orderstateid cannot be null');
        }

        $this->container['orderstateid'] = $orderstateid;

        return $this;
    }

    /**
     * Gets paymentstateid
     *
     * @return int|null
     */
    public function getPaymentstateid()
    {
        return $this->container['paymentstateid'];
    }

    /**
     * Sets paymentstateid
     *
     * @param int|null $paymentstateid Payment state.
     *
     * @return self
     */
    public function setPaymentstateid($paymentstateid)
    {

        if (is_null($paymentstateid)) {
            throw new \InvalidArgumentException('non-nullable paymentstateid cannot be null');
        }

        $this->container['paymentstateid'] = $paymentstateid;

        return $this;
    }

    /**
     * Gets ordertypeid
     *
     * @return int
     */
    public function getOrdertypeid()
    {
        return $this->container['ordertypeid'];
    }

    /**
     * Sets ordertypeid
     *
     * @param int $ordertypeid Order type.
     *
     * @return self
     */
    public function setOrdertypeid($ordertypeid)
    {

        if (is_null($ordertypeid)) {
            throw new \InvalidArgumentException('non-nullable ordertypeid cannot be null');
        }

        $this->container['ordertypeid'] = $ordertypeid;

        return $this;
    }

    /**
     * Gets warehouseid
     *
     * @return int|null
     */
    public function getWarehouseid()
    {
        return $this->container['warehouseid'];
    }

    /**
     * Sets warehouseid
     *
     * @param int|null $warehouseid The ID of the warehouse that this order is registered for.
     *
     * @return self
     */
    public function setWarehouseid($warehouseid)
    {

        if (is_null($warehouseid)) {
            throw new \InvalidArgumentException('non-nullable warehouseid cannot be null');
        }

        $this->container['warehouseid'] = $warehouseid;

        return $this;
    }

    /**
     * Gets datereserved
     *
     * @return int|null
     */
    public function getDatereserved()
    {
        return $this->container['datereserved'];
    }

    /**
     * Sets datereserved
     *
     * @param int|null $datereserved The date that a warehouse stock reservation is valid until. (Null value is allowed for no reservation)
     *
     * @return self
     */
    public function setDatereserved($datereserved)
    {

        if (is_null($datereserved)) {
            throw new \InvalidArgumentException('non-nullable datereserved cannot be null');
        }

        $this->container['datereserved'] = $datereserved;

        return $this;
    }

    /**
     * Gets currencycode
     *
     * @return string|null
     */
    public function getCurrencycode()
    {
        return $this->container['currencycode'];
    }

    /**
     * Sets currencycode
     *
     * @param string|null $currencycode Currency for the order. (ISO 4217, alpha-3 uppercased) If not provided, defaults to system currency.
     *
     * @return self
     */
    public function setCurrencycode($currencycode)
    {

        if (is_null($currencycode)) {
            throw new \InvalidArgumentException('non-nullable currencycode cannot be null');
        }

        $this->container['currencycode'] = $currencycode;

        return $this;
    }

    /**
     * Gets additionaldata
     *
     * @return \Spy\SitooClient\Model\OrderAdditionaldataWrite|null
     */
    public function getAdditionaldata()
    {
        return $this->container['additionaldata'];
    }

    /**
     * Sets additionaldata
     *
     * @param \Spy\SitooClient\Model\OrderAdditionaldataWrite|null $additionaldata additionaldata
     *
     * @return self
     */
    public function setAdditionaldata($additionaldata)
    {

        if (is_null($additionaldata)) {
            throw new \InvalidArgumentException('non-nullable additionaldata cannot be null');
        }

        $this->container['additionaldata'] = $additionaldata;

        return $this;
    }

    /**
     * Gets orderitems
     *
     * @return \Spy\SitooClient\Model\OrderitemWrite[]|null
     */
    public function getOrderitems()
    {
        return $this->container['orderitems'];
    }

    /**
     * Sets orderitems
     *
     * @param \Spy\SitooClient\Model\OrderitemWrite[]|null $orderitems The order items for this order. An array of orderitem.
     *
     * @return self
     */
    public function setOrderitems($orderitems)
    {

        if (is_null($orderitems)) {
            throw new \InvalidArgumentException('non-nullable orderitems cannot be null');
        }

        $this->container['orderitems'] = $orderitems;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Spy\SitooClient\Model\OrderpaymentWrite[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Spy\SitooClient\Model\OrderpaymentWrite[]|null $payments The payments for this order. An array of orderpayment.
     *
     * @return self
     */
    public function setPayments($payments)
    {

        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }

        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets reservedpayments
     *
     * @return \Spy\SitooClient\Model\OrderreservedpaymentWrite[]|null
     */
    public function getReservedpayments()
    {
        return $this->container['reservedpayments'];
    }

    /**
     * Sets reservedpayments
     *
     * @param \Spy\SitooClient\Model\OrderreservedpaymentWrite[]|null $reservedpayments The reserved payments for this order. An array of orderreservedpayment.
     *
     * @return self
     */
    public function setReservedpayments($reservedpayments)
    {

        if (is_null($reservedpayments)) {
            throw new \InvalidArgumentException('non-nullable reservedpayments cannot be null');
        }

        $this->container['reservedpayments'] = $reservedpayments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


