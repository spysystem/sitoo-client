<?php
/**
 * VoucherWrite
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Model;

use \ArrayAccess;
use \Spy\SitooClient\ObjectSerializer;

/**
 * VoucherWrite Class Doc Comment
 *
 * @category Class
 * @description Vouchers are used for creating campaigns.
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VoucherWrite implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return VoucherWriteModelFields
      */
    public static function GetModelFields(): VoucherWriteModelFields
    {
        return new VoucherWriteModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return VoucherWriteModelAttributes
      */
    public static function GetModelAttributes(): VoucherWriteModelAttributes
    {
        return new VoucherWriteModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'voucher-write';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'activepos' => 'bool',
        'vouchercode' => 'string',
        'voucherpassword' => 'string',
        'vouchername' => 'string',
        'vouchercomment' => 'string',
        'datestart' => 'int',
        'dateend' => 'int',
        'tags' => 'string[]',
        'vouchertype' => 'int',
        'valueX' => 'int',
        'valueY' => 'int',
        'valueZ' => 'int',
        'moneyM' => 'string',
        'moneyN' => 'string',
        'vouchername1' => 'string',
        'vouchercode1' => 'string',
        'vouchername2' => 'string',
        'vouchercode2' => 'string',
        'maxuses' => 'int',
        'priority' => 'int',
        'pricelisttags' => 'string[]',
        'products' => 'int[]',
        'productoptions' => '\Spy\SitooClient\Model\VoucherproductoptionWrite[]',
        'discountoptions' => '\Spy\SitooClient\Model\VoucherdiscountoptionWrite[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'activepos' => null,
        'vouchercode' => null,
        'voucherpassword' => null,
        'vouchername' => null,
        'vouchercomment' => null,
        'datestart' => null,
        'dateend' => null,
        'tags' => null,
        'vouchertype' => null,
        'valueX' => null,
        'valueY' => null,
        'valueZ' => null,
        'moneyM' => null,
        'moneyN' => null,
        'vouchername1' => null,
        'vouchercode1' => null,
        'vouchername2' => null,
        'vouchercode2' => null,
        'maxuses' => null,
        'priority' => null,
        'pricelisttags' => null,
        'products' => null,
        'productoptions' => null,
        'discountoptions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'activepos' => false,
		'vouchercode' => false,
		'voucherpassword' => false,
		'vouchername' => false,
		'vouchercomment' => false,
		'datestart' => false,
		'dateend' => false,
		'tags' => false,
		'vouchertype' => false,
		'valueX' => false,
		'valueY' => false,
		'valueZ' => false,
		'moneyM' => false,
		'moneyN' => false,
		'vouchername1' => false,
		'vouchercode1' => false,
		'vouchername2' => false,
		'vouchercode2' => false,
		'maxuses' => false,
		'priority' => false,
		'pricelisttags' => false,
		'products' => false,
		'productoptions' => false,
		'discountoptions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activepos' => 'activepos',
        'vouchercode' => 'vouchercode',
        'voucherpassword' => 'voucherpassword',
        'vouchername' => 'vouchername',
        'vouchercomment' => 'vouchercomment',
        'datestart' => 'datestart',
        'dateend' => 'dateend',
        'tags' => 'tags',
        'vouchertype' => 'vouchertype',
        'valueX' => 'value_x',
        'valueY' => 'value_y',
        'valueZ' => 'value_z',
        'moneyM' => 'money_m',
        'moneyN' => 'money_n',
        'vouchername1' => 'vouchername1',
        'vouchercode1' => 'vouchercode1',
        'vouchername2' => 'vouchername2',
        'vouchercode2' => 'vouchercode2',
        'maxuses' => 'maxuses',
        'priority' => 'priority',
        'pricelisttags' => 'pricelisttags',
        'products' => 'products',
        'productoptions' => 'productoptions',
        'discountoptions' => 'discountoptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activepos' => 'setActivepos',
        'vouchercode' => 'setVouchercode',
        'voucherpassword' => 'setVoucherpassword',
        'vouchername' => 'setVouchername',
        'vouchercomment' => 'setVouchercomment',
        'datestart' => 'setDatestart',
        'dateend' => 'setDateend',
        'tags' => 'setTags',
        'vouchertype' => 'setVouchertype',
        'valueX' => 'setValueX',
        'valueY' => 'setValueY',
        'valueZ' => 'setValueZ',
        'moneyM' => 'setMoneyM',
        'moneyN' => 'setMoneyN',
        'vouchername1' => 'setVouchername1',
        'vouchercode1' => 'setVouchercode1',
        'vouchername2' => 'setVouchername2',
        'vouchercode2' => 'setVouchercode2',
        'maxuses' => 'setMaxuses',
        'priority' => 'setPriority',
        'pricelisttags' => 'setPricelisttags',
        'products' => 'setProducts',
        'productoptions' => 'setProductoptions',
        'discountoptions' => 'setDiscountoptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activepos' => 'getActivepos',
        'vouchercode' => 'getVouchercode',
        'voucherpassword' => 'getVoucherpassword',
        'vouchername' => 'getVouchername',
        'vouchercomment' => 'getVouchercomment',
        'datestart' => 'getDatestart',
        'dateend' => 'getDateend',
        'tags' => 'getTags',
        'vouchertype' => 'getVouchertype',
        'valueX' => 'getValueX',
        'valueY' => 'getValueY',
        'valueZ' => 'getValueZ',
        'moneyM' => 'getMoneyM',
        'moneyN' => 'getMoneyN',
        'vouchername1' => 'getVouchername1',
        'vouchercode1' => 'getVouchercode1',
        'vouchername2' => 'getVouchername2',
        'vouchercode2' => 'getVouchercode2',
        'maxuses' => 'getMaxuses',
        'priority' => 'getPriority',
        'pricelisttags' => 'getPricelisttags',
        'products' => 'getProducts',
        'productoptions' => 'getProductoptions',
        'discountoptions' => 'getDiscountoptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('activepos', $data ?? [], null);
        $this->setIfExists('vouchercode', $data ?? [], null);
        $this->setIfExists('voucherpassword', $data ?? [], null);
        $this->setIfExists('vouchername', $data ?? [], null);
        $this->setIfExists('vouchercomment', $data ?? [], null);
        $this->setIfExists('datestart', $data ?? [], null);
        $this->setIfExists('dateend', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('vouchertype', $data ?? [], null);
        $this->setIfExists('valueX', $data ?? [], null);
        $this->setIfExists('valueY', $data ?? [], null);
        $this->setIfExists('valueZ', $data ?? [], null);
        $this->setIfExists('moneyM', $data ?? [], null);
        $this->setIfExists('moneyN', $data ?? [], null);
        $this->setIfExists('vouchername1', $data ?? [], null);
        $this->setIfExists('vouchercode1', $data ?? [], null);
        $this->setIfExists('vouchername2', $data ?? [], null);
        $this->setIfExists('vouchercode2', $data ?? [], null);
        $this->setIfExists('maxuses', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('pricelisttags', $data ?? [], null);
        $this->setIfExists('products', $data ?? [], null);
        $this->setIfExists('productoptions', $data ?? [], null);
        $this->setIfExists('discountoptions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vouchername'] === null) {
            $invalidProperties[] = "'vouchername' can't be null";
        }
        if ($this->container['vouchertype'] === null) {
            $invalidProperties[] = "'vouchertype' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activepos
     *
     * @return bool|null
     */
    public function getActivepos()
    {
        return $this->container['activepos'];
    }

    /**
     * Sets activepos
     *
     * @param bool|null $activepos If true then this voucher is active in the POS.
     *
     * @return self
     */
    public function setActivepos($activepos)
    {

        if (is_null($activepos)) {
            throw new \InvalidArgumentException('non-nullable activepos cannot be null');
        }

        $this->container['activepos'] = $activepos;

        return $this;
    }

    /**
     * Gets vouchercode
     *
     * @return string|null
     */
    public function getVouchercode()
    {
        return $this->container['vouchercode'];
    }

    /**
     * Sets vouchercode
     *
     * @param string|null $vouchercode Code used for this voucher. (Used for grouping vouchers in reports and stats)
     *
     * @return self
     */
    public function setVouchercode($vouchercode)
    {

        if (is_null($vouchercode)) {
            throw new \InvalidArgumentException('non-nullable vouchercode cannot be null');
        }

        $this->container['vouchercode'] = $vouchercode;

        return $this;
    }

    /**
     * Gets voucherpassword
     *
     * @return string|null
     */
    public function getVoucherpassword()
    {
        return $this->container['voucherpassword'];
    }

    /**
     * Sets voucherpassword
     *
     * @param string|null $voucherpassword Optional password used for this voucher.
     *
     * @return self
     */
    public function setVoucherpassword($voucherpassword)
    {

        if (is_null($voucherpassword)) {
            throw new \InvalidArgumentException('non-nullable voucherpassword cannot be null');
        }

        $this->container['voucherpassword'] = $voucherpassword;

        return $this;
    }

    /**
     * Gets vouchername
     *
     * @return string
     */
    public function getVouchername()
    {
        return $this->container['vouchername'];
    }

    /**
     * Sets vouchername
     *
     * @param string $vouchername Name of this voucher.
     *
     * @return self
     */
    public function setVouchername($vouchername)
    {

        if (is_null($vouchername)) {
            throw new \InvalidArgumentException('non-nullable vouchername cannot be null');
        }

        $this->container['vouchername'] = $vouchername;

        return $this;
    }

    /**
     * Gets vouchercomment
     *
     * @return string|null
     */
    public function getVouchercomment()
    {
        return $this->container['vouchercomment'];
    }

    /**
     * Sets vouchercomment
     *
     * @param string|null $vouchercomment Internal description for this voucher.
     *
     * @return self
     */
    public function setVouchercomment($vouchercomment)
    {

        if (is_null($vouchercomment)) {
            throw new \InvalidArgumentException('non-nullable vouchercomment cannot be null');
        }

        $this->container['vouchercomment'] = $vouchercomment;

        return $this;
    }

    /**
     * Gets datestart
     *
     * @return int|null
     */
    public function getDatestart()
    {
        return $this->container['datestart'];
    }

    /**
     * Sets datestart
     *
     * @param int|null $datestart The start date for the validity of this voucher. No start date if value is null.
     *
     * @return self
     */
    public function setDatestart($datestart)
    {

        if (is_null($datestart)) {
            throw new \InvalidArgumentException('non-nullable datestart cannot be null');
        }

        $this->container['datestart'] = $datestart;

        return $this;
    }

    /**
     * Gets dateend
     *
     * @return int|null
     */
    public function getDateend()
    {
        return $this->container['dateend'];
    }

    /**
     * Sets dateend
     *
     * @param int|null $dateend The end date for the validity of this voucher. No end date if value is null.
     *
     * @return self
     */
    public function setDateend($dateend)
    {

        if (is_null($dateend)) {
            throw new \InvalidArgumentException('non-nullable dateend cannot be null');
        }

        $this->container['dateend'] = $dateend;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags The tags for this voucher. If added, then the voucher will only be applied for stores with the same tags.
     *
     * @return self
     */
    public function setTags($tags)
    {

        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets vouchertype
     *
     * @return int
     */
    public function getVouchertype()
    {
        return $this->container['vouchertype'];
    }

    /**
     * Sets vouchertype
     *
     * @param int $vouchertype Voucher Type
     *
     * @return self
     */
    public function setVouchertype($vouchertype)
    {

        if (is_null($vouchertype)) {
            throw new \InvalidArgumentException('non-nullable vouchertype cannot be null');
        }

        $this->container['vouchertype'] = $vouchertype;

        return $this;
    }

    /**
     * Gets valueX
     *
     * @return int|null
     */
    public function getValueX()
    {
        return $this->container['valueX'];
    }

    /**
     * Sets valueX
     *
     * @param int|null $valueX The X value (integer) used for calculations on the voucher.
     *
     * @return self
     */
    public function setValueX($valueX)
    {

        if (is_null($valueX)) {
            throw new \InvalidArgumentException('non-nullable valueX cannot be null');
        }

        $this->container['valueX'] = $valueX;

        return $this;
    }

    /**
     * Gets valueY
     *
     * @return int|null
     */
    public function getValueY()
    {
        return $this->container['valueY'];
    }

    /**
     * Sets valueY
     *
     * @param int|null $valueY The Y value (integer) used for calculations on the voucher.
     *
     * @return self
     */
    public function setValueY($valueY)
    {

        if (is_null($valueY)) {
            throw new \InvalidArgumentException('non-nullable valueY cannot be null');
        }

        $this->container['valueY'] = $valueY;

        return $this;
    }

    /**
     * Gets valueZ
     *
     * @return int|null
     */
    public function getValueZ()
    {
        return $this->container['valueZ'];
    }

    /**
     * Sets valueZ
     *
     * @param int|null $valueZ The Z value (integer) used for calculations on the voucher.
     *
     * @return self
     */
    public function setValueZ($valueZ)
    {

        if (is_null($valueZ)) {
            throw new \InvalidArgumentException('non-nullable valueZ cannot be null');
        }

        $this->container['valueZ'] = $valueZ;

        return $this;
    }

    /**
     * Gets moneyM
     *
     * @return string|null
     */
    public function getMoneyM()
    {
        return $this->container['moneyM'];
    }

    /**
     * Sets moneyM
     *
     * @param string|null $moneyM The M value (money) used for calculations on the voucher.
     *
     * @return self
     */
    public function setMoneyM($moneyM)
    {

        if (is_null($moneyM)) {
            throw new \InvalidArgumentException('non-nullable moneyM cannot be null');
        }

        $this->container['moneyM'] = $moneyM;

        return $this;
    }

    /**
     * Gets moneyN
     *
     * @return string|null
     */
    public function getMoneyN()
    {
        return $this->container['moneyN'];
    }

    /**
     * Sets moneyN
     *
     * @param string|null $moneyN The N value (money) used for calculations on the voucher.
     *
     * @return self
     */
    public function setMoneyN($moneyN)
    {

        if (is_null($moneyN)) {
            throw new \InvalidArgumentException('non-nullable moneyN cannot be null');
        }

        $this->container['moneyN'] = $moneyN;

        return $this;
    }

    /**
     * Gets vouchername1
     *
     * @return string|null
     */
    public function getVouchername1()
    {
        return $this->container['vouchername1'];
    }

    /**
     * Sets vouchername1
     *
     * @param string|null $vouchername1 The vouchername used when voucher of type ProductBuy3For2Or2For1AndAHalf has triggered a 3 for 2 discount.
     *
     * @return self
     */
    public function setVouchername1($vouchername1)
    {

        if (is_null($vouchername1)) {
            throw new \InvalidArgumentException('non-nullable vouchername1 cannot be null');
        }

        $this->container['vouchername1'] = $vouchername1;

        return $this;
    }

    /**
     * Gets vouchercode1
     *
     * @return string|null
     */
    public function getVouchercode1()
    {
        return $this->container['vouchercode1'];
    }

    /**
     * Sets vouchercode1
     *
     * @param string|null $vouchercode1 The vouchercode used when voucher of type ProductBuy3For2Or2For1AndAHalf has triggered a 3 for 2 discount.
     *
     * @return self
     */
    public function setVouchercode1($vouchercode1)
    {

        if (is_null($vouchercode1)) {
            throw new \InvalidArgumentException('non-nullable vouchercode1 cannot be null');
        }

        $this->container['vouchercode1'] = $vouchercode1;

        return $this;
    }

    /**
     * Gets vouchername2
     *
     * @return string|null
     */
    public function getVouchername2()
    {
        return $this->container['vouchername2'];
    }

    /**
     * Sets vouchername2
     *
     * @param string|null $vouchername2 The vouchername used when voucher of type ProductBuy3For2Or2For1AndAHalf has triggered a 2 for 1.5 discount.
     *
     * @return self
     */
    public function setVouchername2($vouchername2)
    {

        if (is_null($vouchername2)) {
            throw new \InvalidArgumentException('non-nullable vouchername2 cannot be null');
        }

        $this->container['vouchername2'] = $vouchername2;

        return $this;
    }

    /**
     * Gets vouchercode2
     *
     * @return string|null
     */
    public function getVouchercode2()
    {
        return $this->container['vouchercode2'];
    }

    /**
     * Sets vouchercode2
     *
     * @param string|null $vouchercode2 The vouchercode used when voucher of type ProductBuy3For2Or2For1AndAHalf has triggered a 2 for 1.5 discount.
     *
     * @return self
     */
    public function setVouchercode2($vouchercode2)
    {

        if (is_null($vouchercode2)) {
            throw new \InvalidArgumentException('non-nullable vouchercode2 cannot be null');
        }

        $this->container['vouchercode2'] = $vouchercode2;

        return $this;
    }

    /**
     * Gets maxuses
     *
     * @return int|null
     */
    public function getMaxuses()
    {
        return $this->container['maxuses'];
    }

    /**
     * Sets maxuses
     *
     * @param int|null $maxuses The maximum number of times the voucher can be applied for a purchase.
     *
     * @return self
     */
    public function setMaxuses($maxuses)
    {

        if (is_null($maxuses)) {
            throw new \InvalidArgumentException('non-nullable maxuses cannot be null');
        }

        $this->container['maxuses'] = $maxuses;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority The priority of the voucher where 1 is highest and 5 is lowest.
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets pricelisttags
     *
     * @return string[]|null
     */
    public function getPricelisttags()
    {
        return $this->container['pricelisttags'];
    }

    /**
     * Sets pricelisttags
     *
     * @param string[]|null $pricelisttags These tags are used to activate price lists with the same tags.
     *
     * @return self
     */
    public function setPricelisttags($pricelisttags)
    {

        if (is_null($pricelisttags)) {
            throw new \InvalidArgumentException('non-nullable pricelisttags cannot be null');
        }

        $this->container['pricelisttags'] = $pricelisttags;

        return $this;
    }

    /**
     * Gets products
     *
     * @return int[]|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param int[]|null $products An array of product ID.
     *
     * @return self
     */
    public function setProducts($products)
    {

        if (is_null($products)) {
            throw new \InvalidArgumentException('non-nullable products cannot be null');
        }

        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets productoptions
     *
     * @return \Spy\SitooClient\Model\VoucherproductoptionWrite[]|null
     */
    public function getProductoptions()
    {
        return $this->container['productoptions'];
    }

    /**
     * Sets productoptions
     *
     * @param \Spy\SitooClient\Model\VoucherproductoptionWrite[]|null $productoptions An array of voucherproductoption used for vouchers of Package group type. Each option of the array must be fulfilled for the voucher to be applied.
     *
     * @return self
     */
    public function setProductoptions($productoptions)
    {

        if (is_null($productoptions)) {
            throw new \InvalidArgumentException('non-nullable productoptions cannot be null');
        }

        $this->container['productoptions'] = $productoptions;

        return $this;
    }

    /**
     * Gets discountoptions
     *
     * @return \Spy\SitooClient\Model\VoucherdiscountoptionWrite[]|null
     */
    public function getDiscountoptions()
    {
        return $this->container['discountoptions'];
    }

    /**
     * Sets discountoptions
     *
     * @param \Spy\SitooClient\Model\VoucherdiscountoptionWrite[]|null $discountoptions An array of voucherdiscountoption used for vouchers of type ProductBuyXGetDiscountList. Each discount option can be used if the products required have been added to the cart.
     *
     * @return self
     */
    public function setDiscountoptions($discountoptions)
    {

        if (is_null($discountoptions)) {
            throw new \InvalidArgumentException('non-nullable discountoptions cannot be null');
        }

        $this->container['discountoptions'] = $discountoptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


