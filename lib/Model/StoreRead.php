<?php
/**
 * StoreRead
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Model;

use \ArrayAccess;
use \Spy\SitooClient\ObjectSerializer;

/**
 * StoreRead Class Doc Comment
 *
 * @category Class
 * @description The store object in Sitoo
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class StoreRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'store-read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'storeid' => 'int',
        'eshopid' => 'int',
        'storetype' => 'int',
        'name' => 'string',
        'externalid' => 'string',
        'externalgroupid' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'address' => 'string',
        'address2' => 'string',
        'zip' => 'string',
        'city' => 'string',
        'state' => 'string',
        'countryid' => 'string',
        'latitude' => 'string',
        'longitude' => 'string',
        'nearbyStores' => 'string[]',
        'usetypeMovein' => 'int',
        'usetypeMoveout' => 'int',
        'usetypeManualin' => 'int',
        'usetypeManualout' => 'int',
        'usetypeShipmentin' => 'int',
        'usetypeShipmentout' => 'int',
        'tags' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'storeid' => null,
        'eshopid' => null,
        'storetype' => null,
        'name' => null,
        'externalid' => null,
        'externalgroupid' => null,
        'phone' => null,
        'email' => null,
        'address' => null,
        'address2' => null,
        'zip' => null,
        'city' => null,
        'state' => null,
        'countryid' => null,
        'latitude' => null,
        'longitude' => null,
        'nearbyStores' => null,
        'usetypeMovein' => null,
        'usetypeMoveout' => null,
        'usetypeManualin' => null,
        'usetypeManualout' => null,
        'usetypeShipmentin' => null,
        'usetypeShipmentout' => null,
        'tags' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static $openAPINullables = [
        'storeid' => false,
		'eshopid' => false,
		'storetype' => false,
		'name' => false,
		'externalid' => false,
		'externalgroupid' => false,
		'phone' => false,
		'email' => false,
		'address' => false,
		'address2' => false,
		'zip' => false,
		'city' => false,
		'state' => false,
		'countryid' => false,
		'latitude' => false,
		'longitude' => false,
		'nearbyStores' => false,
		'usetypeMovein' => false,
		'usetypeMoveout' => false,
		'usetypeManualin' => false,
		'usetypeManualout' => false,
		'usetypeShipmentin' => false,
		'usetypeShipmentout' => false,
		'tags' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of property to nullable mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPINullables()
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array
     */
    public function getOpenAPINullablesSetToNull()
    {
        return $this->openAPINullablesSetToNull;
    }

    public function setOpenAPINullablesSetToNull($nullablesSetToNull)
    {
        $this->openAPINullablesSetToNull=$nullablesSetToNull;

        return $this;
    }

    /**
     * Checks if a property is nullable
     *
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        if (isset(self::$openAPINullables[$property])) {
            return self::$openAPINullables[$property];
        }

        return false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        if (in_array($property, $this->getOpenAPINullablesSetToNull())) {
            return true;
        }
        return false;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'storeid' => 'storeid',
        'eshopid' => 'eshopid',
        'storetype' => 'storetype',
        'name' => 'name',
        'externalid' => 'externalid',
        'externalgroupid' => 'externalgroupid',
        'phone' => 'phone',
        'email' => 'email',
        'address' => 'address',
        'address2' => 'address2',
        'zip' => 'zip',
        'city' => 'city',
        'state' => 'state',
        'countryid' => 'countryid',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'nearbyStores' => 'nearby_stores',
        'usetypeMovein' => 'usetype_movein',
        'usetypeMoveout' => 'usetype_moveout',
        'usetypeManualin' => 'usetype_manualin',
        'usetypeManualout' => 'usetype_manualout',
        'usetypeShipmentin' => 'usetype_shipmentin',
        'usetypeShipmentout' => 'usetype_shipmentout',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'storeid' => 'setStoreid',
        'eshopid' => 'setEshopid',
        'storetype' => 'setStoretype',
        'name' => 'setName',
        'externalid' => 'setExternalid',
        'externalgroupid' => 'setExternalgroupid',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'address' => 'setAddress',
        'address2' => 'setAddress2',
        'zip' => 'setZip',
        'city' => 'setCity',
        'state' => 'setState',
        'countryid' => 'setCountryid',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'nearbyStores' => 'setNearbyStores',
        'usetypeMovein' => 'setUsetypeMovein',
        'usetypeMoveout' => 'setUsetypeMoveout',
        'usetypeManualin' => 'setUsetypeManualin',
        'usetypeManualout' => 'setUsetypeManualout',
        'usetypeShipmentin' => 'setUsetypeShipmentin',
        'usetypeShipmentout' => 'setUsetypeShipmentout',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'storeid' => 'getStoreid',
        'eshopid' => 'getEshopid',
        'storetype' => 'getStoretype',
        'name' => 'getName',
        'externalid' => 'getExternalid',
        'externalgroupid' => 'getExternalgroupid',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'address' => 'getAddress',
        'address2' => 'getAddress2',
        'zip' => 'getZip',
        'city' => 'getCity',
        'state' => 'getState',
        'countryid' => 'getCountryid',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'nearbyStores' => 'getNearbyStores',
        'usetypeMovein' => 'getUsetypeMovein',
        'usetypeMoveout' => 'getUsetypeMoveout',
        'usetypeManualin' => 'getUsetypeManualin',
        'usetypeManualout' => 'getUsetypeManualout',
        'usetypeShipmentin' => 'getUsetypeShipmentin',
        'usetypeShipmentout' => 'getUsetypeShipmentout',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('storeid', $data, null);
        $this->setIfExists('eshopid', $data, null);
        $this->setIfExists('storetype', $data, null);
        $this->setIfExists('name', $data, null);
        $this->setIfExists('externalid', $data, null);
        $this->setIfExists('externalgroupid', $data, null);
        $this->setIfExists('phone', $data, null);
        $this->setIfExists('email', $data, null);
        $this->setIfExists('address', $data, null);
        $this->setIfExists('address2', $data, null);
        $this->setIfExists('zip', $data, null);
        $this->setIfExists('city', $data, null);
        $this->setIfExists('state', $data, null);
        $this->setIfExists('countryid', $data, null);
        $this->setIfExists('latitude', $data, null);
        $this->setIfExists('longitude', $data, null);
        $this->setIfExists('nearbyStores', $data, null);
        $this->setIfExists('usetypeMovein', $data, null);
        $this->setIfExists('usetypeMoveout', $data, null);
        $this->setIfExists('usetypeManualin', $data, null);
        $this->setIfExists('usetypeManualout', $data, null);
        $this->setIfExists('usetypeShipmentin', $data, null);
        $this->setIfExists('usetypeShipmentout', $data, null);
        $this->setIfExists('tags', $data, null);
    }

    public function setIfExists(string $variableName, $fields, $defaultValue)
    {
        if (is_array($fields) && array_key_exists($variableName, $fields) && is_null($fields[$variableName]) && self::isNullable($variableName)) {
            array_push($this->openAPINullablesSetToNull, $variableName);
        }

        $this->container[$variableName] = isset($fields[$variableName]) ? $fields[$variableName] : $defaultValue;

        return $this;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['storetype'] === null) {
            $invalidProperties[] = "'storetype' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets storeid
     *
     * @return int|null
     */
    public function getStoreid()
    {
        return $this->container['storeid'];
    }

    /**
     * Sets storeid
     *
     * @param int|null $storeid Unique ID of store in Sitoo.
     *
     * @return self
     */
    public function setStoreid($storeid)
    {

        if (is_null($storeid)) {
            throw new \InvalidArgumentException('non-nullable storeid cannot be null');
        }

        $this->container['storeid'] = $storeid;

        return $this;
    }

    /**
     * Gets eshopid
     *
     * @return int|null
     */
    public function getEshopid()
    {
        return $this->container['eshopid'];
    }

    /**
     * Sets eshopid
     *
     * @param int|null $eshopid Eshop ID that store belongs to.
     *
     * @return self
     */
    public function setEshopid($eshopid)
    {

        if (is_null($eshopid)) {
            throw new \InvalidArgumentException('non-nullable eshopid cannot be null');
        }

        $this->container['eshopid'] = $eshopid;

        return $this;
    }

    /**
     * Gets storetype
     *
     * @return int
     */
    public function getStoretype()
    {
        return $this->container['storetype'];
    }

    /**
     * Sets storetype
     *
     * @param int $storetype The type of the store
     *
     * @return self
     */
    public function setStoretype($storetype)
    {

        if (is_null($storetype)) {
            throw new \InvalidArgumentException('non-nullable storetype cannot be null');
        }

        $this->container['storetype'] = $storetype;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the store
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets externalid
     *
     * @return string|null
     */
    public function getExternalid()
    {
        return $this->container['externalid'];
    }

    /**
     * Sets externalid
     *
     * @param string|null $externalid External ID for the store (or null).
     *
     * @return self
     */
    public function setExternalid($externalid)
    {

        if (is_null($externalid)) {
            throw new \InvalidArgumentException('non-nullable externalid cannot be null');
        }

        $this->container['externalid'] = $externalid;

        return $this;
    }

    /**
     * Gets externalgroupid
     *
     * @return string|null
     */
    public function getExternalgroupid()
    {
        return $this->container['externalgroupid'];
    }

    /**
     * Sets externalgroupid
     *
     * @param string|null $externalgroupid External Grouping ID for the store (or null).
     *
     * @return self
     */
    public function setExternalgroupid($externalgroupid)
    {

        if (is_null($externalgroupid)) {
            throw new \InvalidArgumentException('non-nullable externalgroupid cannot be null');
        }

        $this->container['externalgroupid'] = $externalgroupid;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone number for the store (or null).
     *
     * @return self
     */
    public function setPhone($phone)
    {

        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email for the store (or null).
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Address for the store.
     *
     * @return self
     */
    public function setAddress($address)
    {

        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 Address 2 for the store.
     *
     * @return self
     */
    public function setAddress2($address2)
    {

        if (is_null($address2)) {
            throw new \InvalidArgumentException('non-nullable address2 cannot be null');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Zip for the store.
     *
     * @return self
     */
    public function setZip($zip)
    {

        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }

        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City for the store.
     *
     * @return self
     */
    public function setCity($city)
    {

        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State for the store.
     *
     * @return self
     */
    public function setState($state)
    {

        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets countryid
     *
     * @return string|null
     */
    public function getCountryid()
    {
        return $this->container['countryid'];
    }

    /**
     * Sets countryid
     *
     * @param string|null $countryid Country ID for the store (2-letter ISO 3166).
     *
     * @return self
     */
    public function setCountryid($countryid)
    {

        if (is_null($countryid)) {
            throw new \InvalidArgumentException('non-nullable countryid cannot be null');
        }

        $this->container['countryid'] = $countryid;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return string|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param string|null $latitude Latitude in decimal degrees for location of store (or null).
     *
     * @return self
     */
    public function setLatitude($latitude)
    {

        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }

        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return string|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param string|null $longitude Longitude in decimal degrees for location of store (or null).
     *
     * @return self
     */
    public function setLongitude($longitude)
    {

        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }

        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets nearbyStores
     *
     * @return string[]|null
     */
    public function getNearbyStores()
    {
        return $this->container['nearbyStores'];
    }

    /**
     * Sets nearbyStores
     *
     * @param string[]|null $nearbyStores Array of storeid (integer) for nearby stores to this store.
     *
     * @return self
     */
    public function setNearbyStores($nearbyStores)
    {

        if (is_null($nearbyStores)) {
            throw new \InvalidArgumentException('non-nullable nearbyStores cannot be null');
        }

        $this->container['nearbyStores'] = $nearbyStores;

        return $this;
    }

    /**
     * Gets usetypeMovein
     *
     * @return int|null
     */
    public function getUsetypeMovein()
    {
        return $this->container['usetypeMovein'];
    }

    /**
     * Sets usetypeMovein
     *
     * @param int|null $usetypeMovein Default warehouse usetype for transfers of type Move In (or null).
     *
     * @return self
     */
    public function setUsetypeMovein($usetypeMovein)
    {

        if (is_null($usetypeMovein)) {
            throw new \InvalidArgumentException('non-nullable usetypeMovein cannot be null');
        }

        $this->container['usetypeMovein'] = $usetypeMovein;

        return $this;
    }

    /**
     * Gets usetypeMoveout
     *
     * @return int|null
     */
    public function getUsetypeMoveout()
    {
        return $this->container['usetypeMoveout'];
    }

    /**
     * Sets usetypeMoveout
     *
     * @param int|null $usetypeMoveout Default warehouse usetype for transfers of type Move Out (or null).
     *
     * @return self
     */
    public function setUsetypeMoveout($usetypeMoveout)
    {

        if (is_null($usetypeMoveout)) {
            throw new \InvalidArgumentException('non-nullable usetypeMoveout cannot be null');
        }

        $this->container['usetypeMoveout'] = $usetypeMoveout;

        return $this;
    }

    /**
     * Gets usetypeManualin
     *
     * @return int|null
     */
    public function getUsetypeManualin()
    {
        return $this->container['usetypeManualin'];
    }

    /**
     * Sets usetypeManualin
     *
     * @param int|null $usetypeManualin Default warehouse usetype for transfers of type Manual In (or null).
     *
     * @return self
     */
    public function setUsetypeManualin($usetypeManualin)
    {

        if (is_null($usetypeManualin)) {
            throw new \InvalidArgumentException('non-nullable usetypeManualin cannot be null');
        }

        $this->container['usetypeManualin'] = $usetypeManualin;

        return $this;
    }

    /**
     * Gets usetypeManualout
     *
     * @return int|null
     */
    public function getUsetypeManualout()
    {
        return $this->container['usetypeManualout'];
    }

    /**
     * Sets usetypeManualout
     *
     * @param int|null $usetypeManualout Default warehouse usetype for transfers of type Manual Out (or null).
     *
     * @return self
     */
    public function setUsetypeManualout($usetypeManualout)
    {

        if (is_null($usetypeManualout)) {
            throw new \InvalidArgumentException('non-nullable usetypeManualout cannot be null');
        }

        $this->container['usetypeManualout'] = $usetypeManualout;

        return $this;
    }

    /**
     * Gets usetypeShipmentin
     *
     * @return int|null
     */
    public function getUsetypeShipmentin()
    {
        return $this->container['usetypeShipmentin'];
    }

    /**
     * Sets usetypeShipmentin
     *
     * @param int|null $usetypeShipmentin Default warehouse usetype for transfers of type Shipment In (or null).
     *
     * @return self
     */
    public function setUsetypeShipmentin($usetypeShipmentin)
    {

        if (is_null($usetypeShipmentin)) {
            throw new \InvalidArgumentException('non-nullable usetypeShipmentin cannot be null');
        }

        $this->container['usetypeShipmentin'] = $usetypeShipmentin;

        return $this;
    }

    /**
     * Gets usetypeShipmentout
     *
     * @return int|null
     */
    public function getUsetypeShipmentout()
    {
        return $this->container['usetypeShipmentout'];
    }

    /**
     * Sets usetypeShipmentout
     *
     * @param int|null $usetypeShipmentout Default warehouse usetype for transfers of type Shipment Out (or null).
     *
     * @return self
     */
    public function setUsetypeShipmentout($usetypeShipmentout)
    {

        if (is_null($usetypeShipmentout)) {
            throw new \InvalidArgumentException('non-nullable usetypeShipmentout cannot be null');
        }

        $this->container['usetypeShipmentout'] = $usetypeShipmentout;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Array of tags for store.
     *
     * @return self
     */
    public function setTags($tags)
    {

        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }

        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


