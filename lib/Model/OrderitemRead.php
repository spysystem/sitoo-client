<?php
/**
 * OrderitemRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Model;

use \ArrayAccess;
use \Spy\SitooClient\ObjectSerializer;

/**
 * OrderitemRead Class Doc Comment
 *
 * @category Class
 * @description Order item for order.
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderitemRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return OrderitemReadModelFields
      */
    public static function GetModelFields(): OrderitemReadModelFields
    {
        return new OrderitemReadModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return OrderitemReadModelAttributes
      */
    public static function GetModelAttributes(): OrderitemReadModelAttributes
    {
        return new OrderitemReadModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orderitem-read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'orderitemid' => 'int',
        'orderitemtype' => 'int',
        'productid' => 'int',
        'productname' => 'string',
        'sku' => 'string',
        'productattributes' => 'string',
        'externalinput' => 'string',
        'externalinputtitle' => 'string',
        'unitlabel' => 'string',
        'quantity' => 'int',
        'decimalunitquantity' => 'string',
        'moneynetpriceperunit' => 'string',
        'moneypriceorg' => 'string',
        'vatvalue' => 'float',
        'deliveryinfo' => 'string',
        'moneyitemtotalNet' => 'string',
        'moneyitemtotalVat' => 'string',
        'vouchercode' => 'string',
        'vouchername' => 'string',
        'vouchercomment' => 'string',
        'vouchervalue' => 'float',
        'moneyoriginalprice' => 'string',
        'moneydiscountedprice' => 'string',
        'moneydiscount' => 'string',
        'salestaxes' => '\Spy\SitooClient\Model\OrderitemsalestaxRead[]',
        'additionaldata' => '\Spy\SitooClient\Model\OrderitemAdditionaldataRead',
        'decimalquantitytotal' => 'string',
        'moneynetpriceperquantity' => 'string',
        'moneyrowprice' => 'string',
        'moneyrowdiscount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'orderitemid' => null,
        'orderitemtype' => null,
        'productid' => null,
        'productname' => null,
        'sku' => null,
        'productattributes' => null,
        'externalinput' => null,
        'externalinputtitle' => null,
        'unitlabel' => null,
        'quantity' => null,
        'decimalunitquantity' => null,
        'moneynetpriceperunit' => null,
        'moneypriceorg' => null,
        'vatvalue' => null,
        'deliveryinfo' => null,
        'moneyitemtotalNet' => null,
        'moneyitemtotalVat' => null,
        'vouchercode' => null,
        'vouchername' => null,
        'vouchercomment' => null,
        'vouchervalue' => null,
        'moneyoriginalprice' => null,
        'moneydiscountedprice' => null,
        'moneydiscount' => null,
        'salestaxes' => null,
        'additionaldata' => null,
        'decimalquantitytotal' => null,
        'moneynetpriceperquantity' => null,
        'moneyrowprice' => null,
        'moneyrowdiscount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'orderitemid' => false,
		'orderitemtype' => false,
		'productid' => false,
		'productname' => false,
		'sku' => false,
		'productattributes' => false,
		'externalinput' => false,
		'externalinputtitle' => false,
		'unitlabel' => false,
		'quantity' => false,
		'decimalunitquantity' => false,
		'moneynetpriceperunit' => false,
		'moneypriceorg' => false,
		'vatvalue' => false,
		'deliveryinfo' => false,
		'moneyitemtotalNet' => false,
		'moneyitemtotalVat' => false,
		'vouchercode' => false,
		'vouchername' => false,
		'vouchercomment' => false,
		'vouchervalue' => false,
		'moneyoriginalprice' => false,
		'moneydiscountedprice' => false,
		'moneydiscount' => false,
		'salestaxes' => false,
		'additionaldata' => false,
		'decimalquantitytotal' => false,
		'moneynetpriceperquantity' => false,
		'moneyrowprice' => false,
		'moneyrowdiscount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderitemid' => 'orderitemid',
        'orderitemtype' => 'orderitemtype',
        'productid' => 'productid',
        'productname' => 'productname',
        'sku' => 'sku',
        'productattributes' => 'productattributes',
        'externalinput' => 'externalinput',
        'externalinputtitle' => 'externalinputtitle',
        'unitlabel' => 'unitlabel',
        'quantity' => 'quantity',
        'decimalunitquantity' => 'decimalunitquantity',
        'moneynetpriceperunit' => 'moneynetpriceperunit',
        'moneypriceorg' => 'moneypriceorg',
        'vatvalue' => 'vatvalue',
        'deliveryinfo' => 'deliveryinfo',
        'moneyitemtotalNet' => 'moneyitemtotal_net',
        'moneyitemtotalVat' => 'moneyitemtotal_vat',
        'vouchercode' => 'vouchercode',
        'vouchername' => 'vouchername',
        'vouchercomment' => 'vouchercomment',
        'vouchervalue' => 'vouchervalue',
        'moneyoriginalprice' => 'moneyoriginalprice',
        'moneydiscountedprice' => 'moneydiscountedprice',
        'moneydiscount' => 'moneydiscount',
        'salestaxes' => 'salestaxes',
        'additionaldata' => 'additionaldata',
        'decimalquantitytotal' => 'decimalquantitytotal',
        'moneynetpriceperquantity' => 'moneynetpriceperquantity',
        'moneyrowprice' => 'moneyrowprice',
        'moneyrowdiscount' => 'moneyrowdiscount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderitemid' => 'setOrderitemid',
        'orderitemtype' => 'setOrderitemtype',
        'productid' => 'setProductid',
        'productname' => 'setProductname',
        'sku' => 'setSku',
        'productattributes' => 'setProductattributes',
        'externalinput' => 'setExternalinput',
        'externalinputtitle' => 'setExternalinputtitle',
        'unitlabel' => 'setUnitlabel',
        'quantity' => 'setQuantity',
        'decimalunitquantity' => 'setDecimalunitquantity',
        'moneynetpriceperunit' => 'setMoneynetpriceperunit',
        'moneypriceorg' => 'setMoneypriceorg',
        'vatvalue' => 'setVatvalue',
        'deliveryinfo' => 'setDeliveryinfo',
        'moneyitemtotalNet' => 'setMoneyitemtotalNet',
        'moneyitemtotalVat' => 'setMoneyitemtotalVat',
        'vouchercode' => 'setVouchercode',
        'vouchername' => 'setVouchername',
        'vouchercomment' => 'setVouchercomment',
        'vouchervalue' => 'setVouchervalue',
        'moneyoriginalprice' => 'setMoneyoriginalprice',
        'moneydiscountedprice' => 'setMoneydiscountedprice',
        'moneydiscount' => 'setMoneydiscount',
        'salestaxes' => 'setSalestaxes',
        'additionaldata' => 'setAdditionaldata',
        'decimalquantitytotal' => 'setDecimalquantitytotal',
        'moneynetpriceperquantity' => 'setMoneynetpriceperquantity',
        'moneyrowprice' => 'setMoneyrowprice',
        'moneyrowdiscount' => 'setMoneyrowdiscount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderitemid' => 'getOrderitemid',
        'orderitemtype' => 'getOrderitemtype',
        'productid' => 'getProductid',
        'productname' => 'getProductname',
        'sku' => 'getSku',
        'productattributes' => 'getProductattributes',
        'externalinput' => 'getExternalinput',
        'externalinputtitle' => 'getExternalinputtitle',
        'unitlabel' => 'getUnitlabel',
        'quantity' => 'getQuantity',
        'decimalunitquantity' => 'getDecimalunitquantity',
        'moneynetpriceperunit' => 'getMoneynetpriceperunit',
        'moneypriceorg' => 'getMoneypriceorg',
        'vatvalue' => 'getVatvalue',
        'deliveryinfo' => 'getDeliveryinfo',
        'moneyitemtotalNet' => 'getMoneyitemtotalNet',
        'moneyitemtotalVat' => 'getMoneyitemtotalVat',
        'vouchercode' => 'getVouchercode',
        'vouchername' => 'getVouchername',
        'vouchercomment' => 'getVouchercomment',
        'vouchervalue' => 'getVouchervalue',
        'moneyoriginalprice' => 'getMoneyoriginalprice',
        'moneydiscountedprice' => 'getMoneydiscountedprice',
        'moneydiscount' => 'getMoneydiscount',
        'salestaxes' => 'getSalestaxes',
        'additionaldata' => 'getAdditionaldata',
        'decimalquantitytotal' => 'getDecimalquantitytotal',
        'moneynetpriceperquantity' => 'getMoneynetpriceperquantity',
        'moneyrowprice' => 'getMoneyrowprice',
        'moneyrowdiscount' => 'getMoneyrowdiscount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('orderitemid', $data ?? [], null);
        $this->setIfExists('orderitemtype', $data ?? [], null);
        $this->setIfExists('productid', $data ?? [], null);
        $this->setIfExists('productname', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('productattributes', $data ?? [], null);
        $this->setIfExists('externalinput', $data ?? [], null);
        $this->setIfExists('externalinputtitle', $data ?? [], null);
        $this->setIfExists('unitlabel', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('decimalunitquantity', $data ?? [], null);
        $this->setIfExists('moneynetpriceperunit', $data ?? [], null);
        $this->setIfExists('moneypriceorg', $data ?? [], null);
        $this->setIfExists('vatvalue', $data ?? [], null);
        $this->setIfExists('deliveryinfo', $data ?? [], null);
        $this->setIfExists('moneyitemtotalNet', $data ?? [], null);
        $this->setIfExists('moneyitemtotalVat', $data ?? [], null);
        $this->setIfExists('vouchercode', $data ?? [], null);
        $this->setIfExists('vouchername', $data ?? [], null);
        $this->setIfExists('vouchercomment', $data ?? [], null);
        $this->setIfExists('vouchervalue', $data ?? [], null);
        $this->setIfExists('moneyoriginalprice', $data ?? [], null);
        $this->setIfExists('moneydiscountedprice', $data ?? [], null);
        $this->setIfExists('moneydiscount', $data ?? [], null);
        $this->setIfExists('salestaxes', $data ?? [], null);
        $this->setIfExists('additionaldata', $data ?? [], null);
        $this->setIfExists('decimalquantitytotal', $data ?? [], null);
        $this->setIfExists('moneynetpriceperquantity', $data ?? [], null);
        $this->setIfExists('moneyrowprice', $data ?? [], null);
        $this->setIfExists('moneyrowdiscount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['productname'] === null) {
            $invalidProperties[] = "'productname' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orderitemid
     *
     * @return int|null
     */
    public function getOrderitemid()
    {
        return $this->container['orderitemid'];
    }

    /**
     * Sets orderitemid
     *
     * @param int|null $orderitemid Order item ID.
     *
     * @return self
     */
    public function setOrderitemid($orderitemid)
    {

        if (is_null($orderitemid)) {
            throw new \InvalidArgumentException('non-nullable orderitemid cannot be null');
        }

        $this->container['orderitemid'] = $orderitemid;

        return $this;
    }

    /**
     * Gets orderitemtype
     *
     * @return int|null
     */
    public function getOrderitemtype()
    {
        return $this->container['orderitemtype'];
    }

    /**
     * Sets orderitemtype
     *
     * @param int|null $orderitemtype Order item type.  Note that item of type Discount needs to be preceded by one of type Product (to which it belongs) and the field moneyrowdiscount should be used to set the value of the discount.
     *
     * @return self
     */
    public function setOrderitemtype($orderitemtype)
    {

        if (is_null($orderitemtype)) {
            throw new \InvalidArgumentException('non-nullable orderitemtype cannot be null');
        }

        $this->container['orderitemtype'] = $orderitemtype;

        return $this;
    }

    /**
     * Gets productid
     *
     * @return int|null
     */
    public function getProductid()
    {
        return $this->container['productid'];
    }

    /**
     * Sets productid
     *
     * @param int|null $productid Product ID. Backlink to a product. NOTE! The product ID may no longer exist in the system.
     *
     * @return self
     */
    public function setProductid($productid)
    {

        if (is_null($productid)) {
            throw new \InvalidArgumentException('non-nullable productid cannot be null');
        }

        $this->container['productid'] = $productid;

        return $this;
    }

    /**
     * Gets productname
     *
     * @return string
     */
    public function getProductname()
    {
        return $this->container['productname'];
    }

    /**
     * Sets productname
     *
     * @param string $productname Product Name. The title for the product at the time of the order.
     *
     * @return self
     */
    public function setProductname($productname)
    {

        if (is_null($productname)) {
            throw new \InvalidArgumentException('non-nullable productname cannot be null');
        }

        $this->container['productname'] = $productname;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string|null
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string|null $sku Stock-keeping unit (ie. the article number) for the product at the time of the order.
     *
     * @return self
     */
    public function setSku($sku)
    {

        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets productattributes
     *
     * @return string|null
     */
    public function getProductattributes()
    {
        return $this->container['productattributes'];
    }

    /**
     * Sets productattributes
     *
     * @param string|null $productattributes Product variant data (eg. \"Color: Red, Size: M\") for the product at the time of the order.
     *
     * @return self
     */
    public function setProductattributes($productattributes)
    {

        if (is_null($productattributes)) {
            throw new \InvalidArgumentException('non-nullable productattributes cannot be null');
        }

        $this->container['productattributes'] = $productattributes;

        return $this;
    }

    /**
     * Gets externalinput
     *
     * @return string|null
     */
    public function getExternalinput()
    {
        return $this->container['externalinput'];
    }

    /**
     * Sets externalinput
     *
     * @param string|null $externalinput Text entered by buyer (eg. text on a custom made t-shirt).
     *
     * @return self
     */
    public function setExternalinput($externalinput)
    {

        if (is_null($externalinput)) {
            throw new \InvalidArgumentException('non-nullable externalinput cannot be null');
        }

        $this->container['externalinput'] = $externalinput;

        return $this;
    }

    /**
     * Gets externalinputtitle
     *
     * @return string|null
     */
    public function getExternalinputtitle()
    {
        return $this->container['externalinputtitle'];
    }

    /**
     * Sets externalinputtitle
     *
     * @param string|null $externalinputtitle Title for text entered by buyer (eg. \"Your t-shirt text\").
     *
     * @return self
     */
    public function setExternalinputtitle($externalinputtitle)
    {

        if (is_null($externalinputtitle)) {
            throw new \InvalidArgumentException('non-nullable externalinputtitle cannot be null');
        }

        $this->container['externalinputtitle'] = $externalinputtitle;

        return $this;
    }

    /**
     * Gets unitlabel
     *
     * @return string|null
     */
    public function getUnitlabel()
    {
        return $this->container['unitlabel'];
    }

    /**
     * Sets unitlabel
     *
     * @param string|null $unitlabel Unit (typically empty) (eg. \"kg\").
     *
     * @return self
     */
    public function setUnitlabel($unitlabel)
    {

        if (is_null($unitlabel)) {
            throw new \InvalidArgumentException('non-nullable unitlabel cannot be null');
        }

        $this->container['unitlabel'] = $unitlabel;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Quantity, the number of items.
     *
     * @return self
     */
    public function setQuantity($quantity)
    {

        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets decimalunitquantity
     *
     * @return string|null
     */
    public function getDecimalunitquantity()
    {
        return $this->container['decimalunitquantity'];
    }

    /**
     * Sets decimalunitquantity
     *
     * @param string|null $decimalunitquantity Unit quantity if applicable, else null
     *
     * @return self
     */
    public function setDecimalunitquantity($decimalunitquantity)
    {

        if (is_null($decimalunitquantity)) {
            throw new \InvalidArgumentException('non-nullable decimalunitquantity cannot be null');
        }

        $this->container['decimalunitquantity'] = $decimalunitquantity;

        return $this;
    }

    /**
     * Gets moneynetpriceperunit
     *
     * @return string|null
     */
    public function getMoneynetpriceperunit()
    {
        return $this->container['moneynetpriceperunit'];
    }

    /**
     * Sets moneynetpriceperunit
     *
     * @param string|null $moneynetpriceperunit Net price per unit.
     *
     * @return self
     */
    public function setMoneynetpriceperunit($moneynetpriceperunit)
    {

        if (is_null($moneynetpriceperunit)) {
            throw new \InvalidArgumentException('non-nullable moneynetpriceperunit cannot be null');
        }

        $this->container['moneynetpriceperunit'] = $moneynetpriceperunit;

        return $this;
    }

    /**
     * Gets moneypriceorg
     *
     * @return string|null
     */
    public function getMoneypriceorg()
    {
        return $this->container['moneypriceorg'];
    }

    /**
     * Sets moneypriceorg
     *
     * @param string|null $moneypriceorg Regular net price of product per unit. (Suggested Retail Price)
     *
     * @return self
     */
    public function setMoneypriceorg($moneypriceorg)
    {

        if (is_null($moneypriceorg)) {
            throw new \InvalidArgumentException('non-nullable moneypriceorg cannot be null');
        }

        $this->container['moneypriceorg'] = $moneypriceorg;

        return $this;
    }

    /**
     * Gets vatvalue
     *
     * @return float|null
     */
    public function getVatvalue()
    {
        return $this->container['vatvalue'];
    }

    /**
     * Sets vatvalue
     *
     * @param float|null $vatvalue VAT percentage.
     *
     * @return self
     */
    public function setVatvalue($vatvalue)
    {

        if (is_null($vatvalue)) {
            throw new \InvalidArgumentException('non-nullable vatvalue cannot be null');
        }

        $this->container['vatvalue'] = $vatvalue;

        return $this;
    }

    /**
     * Gets deliveryinfo
     *
     * @return string|null
     */
    public function getDeliveryinfo()
    {
        return $this->container['deliveryinfo'];
    }

    /**
     * Sets deliveryinfo
     *
     * @param string|null $deliveryinfo Delivery info is information sent to the customer after the purchase.
     *
     * @return self
     */
    public function setDeliveryinfo($deliveryinfo)
    {

        if (is_null($deliveryinfo)) {
            throw new \InvalidArgumentException('non-nullable deliveryinfo cannot be null');
        }

        $this->container['deliveryinfo'] = $deliveryinfo;

        return $this;
    }

    /**
     * Gets moneyitemtotalNet
     *
     * @return string|null
     */
    public function getMoneyitemtotalNet()
    {
        return $this->container['moneyitemtotalNet'];
    }

    /**
     * Sets moneyitemtotalNet
     *
     * @param string|null $moneyitemtotalNet Net total (eg. $netpriceperunit * quantity).
     *
     * @return self
     */
    public function setMoneyitemtotalNet($moneyitemtotalNet)
    {

        if (is_null($moneyitemtotalNet)) {
            throw new \InvalidArgumentException('non-nullable moneyitemtotalNet cannot be null');
        }

        $this->container['moneyitemtotalNet'] = $moneyitemtotalNet;

        return $this;
    }

    /**
     * Gets moneyitemtotalVat
     *
     * @return string|null
     */
    public function getMoneyitemtotalVat()
    {
        return $this->container['moneyitemtotalVat'];
    }

    /**
     * Sets moneyitemtotalVat
     *
     * @param string|null $moneyitemtotalVat Vat total.
     *
     * @return self
     */
    public function setMoneyitemtotalVat($moneyitemtotalVat)
    {

        if (is_null($moneyitemtotalVat)) {
            throw new \InvalidArgumentException('non-nullable moneyitemtotalVat cannot be null');
        }

        $this->container['moneyitemtotalVat'] = $moneyitemtotalVat;

        return $this;
    }

    /**
     * Gets vouchercode
     *
     * @return string|null
     */
    public function getVouchercode()
    {
        return $this->container['vouchercode'];
    }

    /**
     * Sets vouchercode
     *
     * @param string|null $vouchercode Voucher code.
     *
     * @return self
     */
    public function setVouchercode($vouchercode)
    {

        if (is_null($vouchercode)) {
            throw new \InvalidArgumentException('non-nullable vouchercode cannot be null');
        }

        $this->container['vouchercode'] = $vouchercode;

        return $this;
    }

    /**
     * Gets vouchername
     *
     * @return string|null
     */
    public function getVouchername()
    {
        return $this->container['vouchername'];
    }

    /**
     * Sets vouchername
     *
     * @param string|null $vouchername Voucher name. The name shown when the code is applied.
     *
     * @return self
     */
    public function setVouchername($vouchername)
    {

        if (is_null($vouchername)) {
            throw new \InvalidArgumentException('non-nullable vouchername cannot be null');
        }

        $this->container['vouchername'] = $vouchername;

        return $this;
    }

    /**
     * Gets vouchercomment
     *
     * @return string|null
     */
    public function getVouchercomment()
    {
        return $this->container['vouchercomment'];
    }

    /**
     * Sets vouchercomment
     *
     * @param string|null $vouchercomment Voucher comment.
     *
     * @return self
     */
    public function setVouchercomment($vouchercomment)
    {

        if (is_null($vouchercomment)) {
            throw new \InvalidArgumentException('non-nullable vouchercomment cannot be null');
        }

        $this->container['vouchercomment'] = $vouchercomment;

        return $this;
    }

    /**
     * Gets vouchervalue
     *
     * @return float|null
     */
    public function getVouchervalue()
    {
        return $this->container['vouchervalue'];
    }

    /**
     * Sets vouchervalue
     *
     * @param float|null $vouchervalue Value of voucher. Percentage or fixed sum depending on ispercentage.
     *
     * @return self
     */
    public function setVouchervalue($vouchervalue)
    {

        if (is_null($vouchervalue)) {
            throw new \InvalidArgumentException('non-nullable vouchervalue cannot be null');
        }

        $this->container['vouchervalue'] = $vouchervalue;

        return $this;
    }

    /**
     * Gets moneyoriginalprice
     *
     * @return string|null
     */
    public function getMoneyoriginalprice()
    {
        return $this->container['moneyoriginalprice'];
    }

    /**
     * Sets moneyoriginalprice
     *
     * @param string|null $moneyoriginalprice Original price net per unit.
     *
     * @return self
     */
    public function setMoneyoriginalprice($moneyoriginalprice)
    {

        if (is_null($moneyoriginalprice)) {
            throw new \InvalidArgumentException('non-nullable moneyoriginalprice cannot be null');
        }

        $this->container['moneyoriginalprice'] = $moneyoriginalprice;

        return $this;
    }

    /**
     * Gets moneydiscountedprice
     *
     * @return string|null
     */
    public function getMoneydiscountedprice()
    {
        return $this->container['moneydiscountedprice'];
    }

    /**
     * Sets moneydiscountedprice
     *
     * @param string|null $moneydiscountedprice Discounted price per unit. Only set if moneyoriginalprice is set.
     *
     * @return self
     */
    public function setMoneydiscountedprice($moneydiscountedprice)
    {

        if (is_null($moneydiscountedprice)) {
            throw new \InvalidArgumentException('non-nullable moneydiscountedprice cannot be null');
        }

        $this->container['moneydiscountedprice'] = $moneydiscountedprice;

        return $this;
    }

    /**
     * Gets moneydiscount
     *
     * @return string|null
     */
    public function getMoneydiscount()
    {
        return $this->container['moneydiscount'];
    }

    /**
     * Sets moneydiscount
     *
     * @param string|null $moneydiscount Discount value per unit. Only set if moneyoriginalprice is set.
     *
     * @return self
     */
    public function setMoneydiscount($moneydiscount)
    {

        if (is_null($moneydiscount)) {
            throw new \InvalidArgumentException('non-nullable moneydiscount cannot be null');
        }

        $this->container['moneydiscount'] = $moneydiscount;

        return $this;
    }

    /**
     * Gets salestaxes
     *
     * @return \Spy\SitooClient\Model\OrderitemsalestaxRead[]|null
     */
    public function getSalestaxes()
    {
        return $this->container['salestaxes'];
    }

    /**
     * Sets salestaxes
     *
     * @param \Spy\SitooClient\Model\OrderitemsalestaxRead[]|null $salestaxes Array of orderitemsalestax applied to this orderitem.
     *
     * @return self
     */
    public function setSalestaxes($salestaxes)
    {

        if (is_null($salestaxes)) {
            throw new \InvalidArgumentException('non-nullable salestaxes cannot be null');
        }

        $this->container['salestaxes'] = $salestaxes;

        return $this;
    }

    /**
     * Gets additionaldata
     *
     * @return \Spy\SitooClient\Model\OrderitemAdditionaldataRead|null
     */
    public function getAdditionaldata()
    {
        return $this->container['additionaldata'];
    }

    /**
     * Sets additionaldata
     *
     * @param \Spy\SitooClient\Model\OrderitemAdditionaldataRead|null $additionaldata additionaldata
     *
     * @return self
     */
    public function setAdditionaldata($additionaldata)
    {

        if (is_null($additionaldata)) {
            throw new \InvalidArgumentException('non-nullable additionaldata cannot be null');
        }

        $this->container['additionaldata'] = $additionaldata;

        return $this;
    }

    /**
     * Gets decimalquantitytotal
     *
     * @return string|null
     */
    public function getDecimalquantitytotal()
    {
        return $this->container['decimalquantitytotal'];
    }

    /**
     * Sets decimalquantitytotal
     *
     * @param string|null $decimalquantitytotal Extended field. The total quantity. i.e. quantity x decimalunitquantity (or 1 if null)
     *
     * @return self
     */
    public function setDecimalquantitytotal($decimalquantitytotal)
    {

        if (is_null($decimalquantitytotal)) {
            throw new \InvalidArgumentException('non-nullable decimalquantitytotal cannot be null');
        }

        $this->container['decimalquantitytotal'] = $decimalquantitytotal;

        return $this;
    }

    /**
     * Gets moneynetpriceperquantity
     *
     * @return string|null
     */
    public function getMoneynetpriceperquantity()
    {
        return $this->container['moneynetpriceperquantity'];
    }

    /**
     * Sets moneynetpriceperquantity
     *
     * @param string|null $moneynetpriceperquantity Extended field. Net price per quantity. i.e. moneynetpriceperunit x decimalunitquantity (or 1 if null)
     *
     * @return self
     */
    public function setMoneynetpriceperquantity($moneynetpriceperquantity)
    {

        if (is_null($moneynetpriceperquantity)) {
            throw new \InvalidArgumentException('non-nullable moneynetpriceperquantity cannot be null');
        }

        $this->container['moneynetpriceperquantity'] = $moneynetpriceperquantity;

        return $this;
    }

    /**
     * Gets moneyrowprice
     *
     * @return string|null
     */
    public function getMoneyrowprice()
    {
        return $this->container['moneyrowprice'];
    }

    /**
     * Sets moneyrowprice
     *
     * @param string|null $moneyrowprice Total Row Price. (Only used for POST/PUT)
     *
     * @return self
     */
    public function setMoneyrowprice($moneyrowprice)
    {

        if (is_null($moneyrowprice)) {
            throw new \InvalidArgumentException('non-nullable moneyrowprice cannot be null');
        }

        $this->container['moneyrowprice'] = $moneyrowprice;

        return $this;
    }

    /**
     * Gets moneyrowdiscount
     *
     * @return string|null
     */
    public function getMoneyrowdiscount()
    {
        return $this->container['moneyrowdiscount'];
    }

    /**
     * Sets moneyrowdiscount
     *
     * @param string|null $moneyrowdiscount Total Row Discount. (Only used for POST/PUT)
     *
     * @return self
     */
    public function setMoneyrowdiscount($moneyrowdiscount)
    {

        if (is_null($moneyrowdiscount)) {
            throw new \InvalidArgumentException('non-nullable moneyrowdiscount cannot be null');
        }

        $this->container['moneyrowdiscount'] = $moneyrowdiscount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


