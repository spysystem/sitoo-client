<?php
/**
 * ShipmentWrite
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Model;

use \ArrayAccess;
use \Spy\SitooClient\ObjectSerializer;

/**
 * ShipmentWrite Class Doc Comment
 *
 * @category Class
 * @description A shipment is the object used for handling shipments in Sitoo systems. Shipments are common to all sites.
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShipmentWrite implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return ShipmentWriteModelFields
      */
    public static function GetModelFields(): ShipmentWriteModelFields
    {
        return new ShipmentWriteModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return ShipmentWriteModelAttributes
      */
    public static function GetModelAttributes(): ShipmentWriteModelAttributes
    {
        return new ShipmentWriteModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'shipment-write';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'shipmentstate' => 'int',
        'archived' => 'bool',
        'externalid' => 'string',
        'barcode' => 'string',
        'comment' => 'string',
        'emailowner' => 'string',
        'emailreceivedby' => 'string',
        'dateestimatedpickup' => 'int',
        'dateestimateddelivery' => 'int',
        'senderWarehouseid' => 'int',
        'senderName' => 'string',
        'senderAddress' => 'string',
        'senderAddress2' => 'string',
        'senderZip' => 'string',
        'senderCity' => 'string',
        'senderState' => 'string',
        'senderCountryid' => 'string',
        'senderReferencename' => 'string',
        'senderReferenceemail' => 'string',
        'senderReferencemobile' => 'string',
        'senderInstructions' => 'string',
        'receiverWarehouseid' => 'int',
        'receiverName' => 'string',
        'receiverAddress' => 'string',
        'receiverAddress2' => 'string',
        'receiverZip' => 'string',
        'receiverCity' => 'string',
        'receiverState' => 'string',
        'receiverCountryid' => 'string',
        'receiverReferencename' => 'string',
        'receiverReferenceemail' => 'string',
        'receiverReferencemobile' => 'string',
        'receiverInstructions' => 'string',
        'carrierName' => 'string',
        'carrierReference' => 'string',
        'carrierTrackingurl' => 'string',
        'shipmentpackages' => '\Spy\SitooClient\Model\ShipmentpackageWrite[]',
        'shipmentitems' => '\Spy\SitooClient\Model\ShipmentitemWrite[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'shipmentstate' => null,
        'archived' => null,
        'externalid' => null,
        'barcode' => null,
        'comment' => null,
        'emailowner' => null,
        'emailreceivedby' => null,
        'dateestimatedpickup' => null,
        'dateestimateddelivery' => null,
        'senderWarehouseid' => null,
        'senderName' => null,
        'senderAddress' => null,
        'senderAddress2' => null,
        'senderZip' => null,
        'senderCity' => null,
        'senderState' => null,
        'senderCountryid' => null,
        'senderReferencename' => null,
        'senderReferenceemail' => null,
        'senderReferencemobile' => null,
        'senderInstructions' => null,
        'receiverWarehouseid' => null,
        'receiverName' => null,
        'receiverAddress' => null,
        'receiverAddress2' => null,
        'receiverZip' => null,
        'receiverCity' => null,
        'receiverState' => null,
        'receiverCountryid' => null,
        'receiverReferencename' => null,
        'receiverReferenceemail' => null,
        'receiverReferencemobile' => null,
        'receiverInstructions' => null,
        'carrierName' => null,
        'carrierReference' => null,
        'carrierTrackingurl' => null,
        'shipmentpackages' => null,
        'shipmentitems' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'shipmentstate' => false,
		'archived' => false,
		'externalid' => false,
		'barcode' => false,
		'comment' => false,
		'emailowner' => false,
		'emailreceivedby' => false,
		'dateestimatedpickup' => false,
		'dateestimateddelivery' => false,
		'senderWarehouseid' => false,
		'senderName' => false,
		'senderAddress' => false,
		'senderAddress2' => false,
		'senderZip' => false,
		'senderCity' => false,
		'senderState' => false,
		'senderCountryid' => false,
		'senderReferencename' => false,
		'senderReferenceemail' => false,
		'senderReferencemobile' => false,
		'senderInstructions' => false,
		'receiverWarehouseid' => false,
		'receiverName' => false,
		'receiverAddress' => false,
		'receiverAddress2' => false,
		'receiverZip' => false,
		'receiverCity' => false,
		'receiverState' => false,
		'receiverCountryid' => false,
		'receiverReferencename' => false,
		'receiverReferenceemail' => false,
		'receiverReferencemobile' => false,
		'receiverInstructions' => false,
		'carrierName' => false,
		'carrierReference' => false,
		'carrierTrackingurl' => false,
		'shipmentpackages' => false,
		'shipmentitems' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipmentstate' => 'shipmentstate',
        'archived' => 'archived',
        'externalid' => 'externalid',
        'barcode' => 'barcode',
        'comment' => 'comment',
        'emailowner' => 'emailowner',
        'emailreceivedby' => 'emailreceivedby',
        'dateestimatedpickup' => 'dateestimatedpickup',
        'dateestimateddelivery' => 'dateestimateddelivery',
        'senderWarehouseid' => 'sender_warehouseid',
        'senderName' => 'sender_name',
        'senderAddress' => 'sender_address',
        'senderAddress2' => 'sender_address2',
        'senderZip' => 'sender_zip',
        'senderCity' => 'sender_city',
        'senderState' => 'sender_state',
        'senderCountryid' => 'sender_countryid',
        'senderReferencename' => 'sender_referencename',
        'senderReferenceemail' => 'sender_referenceemail',
        'senderReferencemobile' => 'sender_referencemobile',
        'senderInstructions' => 'sender_instructions',
        'receiverWarehouseid' => 'receiver_warehouseid',
        'receiverName' => 'receiver_name',
        'receiverAddress' => 'receiver_address',
        'receiverAddress2' => 'receiver_address2',
        'receiverZip' => 'receiver_zip',
        'receiverCity' => 'receiver_city',
        'receiverState' => 'receiver_state',
        'receiverCountryid' => 'receiver_countryid',
        'receiverReferencename' => 'receiver_referencename',
        'receiverReferenceemail' => 'receiver_referenceemail',
        'receiverReferencemobile' => 'receiver_referencemobile',
        'receiverInstructions' => 'receiver_instructions',
        'carrierName' => 'carrier_name',
        'carrierReference' => 'carrier_reference',
        'carrierTrackingurl' => 'carrier_trackingurl',
        'shipmentpackages' => 'shipmentpackages',
        'shipmentitems' => 'shipmentitems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipmentstate' => 'setShipmentstate',
        'archived' => 'setArchived',
        'externalid' => 'setExternalid',
        'barcode' => 'setBarcode',
        'comment' => 'setComment',
        'emailowner' => 'setEmailowner',
        'emailreceivedby' => 'setEmailreceivedby',
        'dateestimatedpickup' => 'setDateestimatedpickup',
        'dateestimateddelivery' => 'setDateestimateddelivery',
        'senderWarehouseid' => 'setSenderWarehouseid',
        'senderName' => 'setSenderName',
        'senderAddress' => 'setSenderAddress',
        'senderAddress2' => 'setSenderAddress2',
        'senderZip' => 'setSenderZip',
        'senderCity' => 'setSenderCity',
        'senderState' => 'setSenderState',
        'senderCountryid' => 'setSenderCountryid',
        'senderReferencename' => 'setSenderReferencename',
        'senderReferenceemail' => 'setSenderReferenceemail',
        'senderReferencemobile' => 'setSenderReferencemobile',
        'senderInstructions' => 'setSenderInstructions',
        'receiverWarehouseid' => 'setReceiverWarehouseid',
        'receiverName' => 'setReceiverName',
        'receiverAddress' => 'setReceiverAddress',
        'receiverAddress2' => 'setReceiverAddress2',
        'receiverZip' => 'setReceiverZip',
        'receiverCity' => 'setReceiverCity',
        'receiverState' => 'setReceiverState',
        'receiverCountryid' => 'setReceiverCountryid',
        'receiverReferencename' => 'setReceiverReferencename',
        'receiverReferenceemail' => 'setReceiverReferenceemail',
        'receiverReferencemobile' => 'setReceiverReferencemobile',
        'receiverInstructions' => 'setReceiverInstructions',
        'carrierName' => 'setCarrierName',
        'carrierReference' => 'setCarrierReference',
        'carrierTrackingurl' => 'setCarrierTrackingurl',
        'shipmentpackages' => 'setShipmentpackages',
        'shipmentitems' => 'setShipmentitems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipmentstate' => 'getShipmentstate',
        'archived' => 'getArchived',
        'externalid' => 'getExternalid',
        'barcode' => 'getBarcode',
        'comment' => 'getComment',
        'emailowner' => 'getEmailowner',
        'emailreceivedby' => 'getEmailreceivedby',
        'dateestimatedpickup' => 'getDateestimatedpickup',
        'dateestimateddelivery' => 'getDateestimateddelivery',
        'senderWarehouseid' => 'getSenderWarehouseid',
        'senderName' => 'getSenderName',
        'senderAddress' => 'getSenderAddress',
        'senderAddress2' => 'getSenderAddress2',
        'senderZip' => 'getSenderZip',
        'senderCity' => 'getSenderCity',
        'senderState' => 'getSenderState',
        'senderCountryid' => 'getSenderCountryid',
        'senderReferencename' => 'getSenderReferencename',
        'senderReferenceemail' => 'getSenderReferenceemail',
        'senderReferencemobile' => 'getSenderReferencemobile',
        'senderInstructions' => 'getSenderInstructions',
        'receiverWarehouseid' => 'getReceiverWarehouseid',
        'receiverName' => 'getReceiverName',
        'receiverAddress' => 'getReceiverAddress',
        'receiverAddress2' => 'getReceiverAddress2',
        'receiverZip' => 'getReceiverZip',
        'receiverCity' => 'getReceiverCity',
        'receiverState' => 'getReceiverState',
        'receiverCountryid' => 'getReceiverCountryid',
        'receiverReferencename' => 'getReceiverReferencename',
        'receiverReferenceemail' => 'getReceiverReferenceemail',
        'receiverReferencemobile' => 'getReceiverReferencemobile',
        'receiverInstructions' => 'getReceiverInstructions',
        'carrierName' => 'getCarrierName',
        'carrierReference' => 'getCarrierReference',
        'carrierTrackingurl' => 'getCarrierTrackingurl',
        'shipmentpackages' => 'getShipmentpackages',
        'shipmentitems' => 'getShipmentitems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('shipmentstate', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('externalid', $data ?? [], null);
        $this->setIfExists('barcode', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('emailowner', $data ?? [], null);
        $this->setIfExists('emailreceivedby', $data ?? [], null);
        $this->setIfExists('dateestimatedpickup', $data ?? [], null);
        $this->setIfExists('dateestimateddelivery', $data ?? [], null);
        $this->setIfExists('senderWarehouseid', $data ?? [], null);
        $this->setIfExists('senderName', $data ?? [], null);
        $this->setIfExists('senderAddress', $data ?? [], null);
        $this->setIfExists('senderAddress2', $data ?? [], null);
        $this->setIfExists('senderZip', $data ?? [], null);
        $this->setIfExists('senderCity', $data ?? [], null);
        $this->setIfExists('senderState', $data ?? [], null);
        $this->setIfExists('senderCountryid', $data ?? [], null);
        $this->setIfExists('senderReferencename', $data ?? [], null);
        $this->setIfExists('senderReferenceemail', $data ?? [], null);
        $this->setIfExists('senderReferencemobile', $data ?? [], null);
        $this->setIfExists('senderInstructions', $data ?? [], null);
        $this->setIfExists('receiverWarehouseid', $data ?? [], null);
        $this->setIfExists('receiverName', $data ?? [], null);
        $this->setIfExists('receiverAddress', $data ?? [], null);
        $this->setIfExists('receiverAddress2', $data ?? [], null);
        $this->setIfExists('receiverZip', $data ?? [], null);
        $this->setIfExists('receiverCity', $data ?? [], null);
        $this->setIfExists('receiverState', $data ?? [], null);
        $this->setIfExists('receiverCountryid', $data ?? [], null);
        $this->setIfExists('receiverReferencename', $data ?? [], null);
        $this->setIfExists('receiverReferenceemail', $data ?? [], null);
        $this->setIfExists('receiverReferencemobile', $data ?? [], null);
        $this->setIfExists('receiverInstructions', $data ?? [], null);
        $this->setIfExists('carrierName', $data ?? [], null);
        $this->setIfExists('carrierReference', $data ?? [], null);
        $this->setIfExists('carrierTrackingurl', $data ?? [], null);
        $this->setIfExists('shipmentpackages', $data ?? [], null);
        $this->setIfExists('shipmentitems', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipmentstate
     *
     * @return int|null
     */
    public function getShipmentstate()
    {
        return $this->container['shipmentstate'];
    }

    /**
     * Sets shipmentstate
     *
     * @param int|null $shipmentstate State of shipment.
     *
     * @return self
     */
    public function setShipmentstate($shipmentstate)
    {

        if (is_null($shipmentstate)) {
            throw new \InvalidArgumentException('non-nullable shipmentstate cannot be null');
        }

        $this->container['shipmentstate'] = $shipmentstate;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Flag indicating archived shipment.
     *
     * @return self
     */
    public function setArchived($archived)
    {

        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }

        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets externalid
     *
     * @return string|null
     */
    public function getExternalid()
    {
        return $this->container['externalid'];
    }

    /**
     * Sets externalid
     *
     * @param string|null $externalid External ID for shipment.
     *
     * @return self
     */
    public function setExternalid($externalid)
    {

        if (is_null($externalid)) {
            throw new \InvalidArgumentException('non-nullable externalid cannot be null');
        }

        $this->container['externalid'] = $externalid;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode Barcode used to identify this shipment. Needs to have a unique value.
     *
     * @return self
     */
    public function setBarcode($barcode)
    {

        if (is_null($barcode)) {
            throw new \InvalidArgumentException('non-nullable barcode cannot be null');
        }

        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Comment for the shipment.
     *
     * @return self
     */
    public function setComment($comment)
    {

        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }

        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets emailowner
     *
     * @return string|null
     */
    public function getEmailowner()
    {
        return $this->container['emailowner'];
    }

    /**
     * Sets emailowner
     *
     * @param string|null $emailowner The email of the owner of the shipment.
     *
     * @return self
     */
    public function setEmailowner($emailowner)
    {

        if (is_null($emailowner)) {
            throw new \InvalidArgumentException('non-nullable emailowner cannot be null');
        }

        $this->container['emailowner'] = $emailowner;

        return $this;
    }

    /**
     * Gets emailreceivedby
     *
     * @return string|null
     */
    public function getEmailreceivedby()
    {
        return $this->container['emailreceivedby'];
    }

    /**
     * Sets emailreceivedby
     *
     * @param string|null $emailreceivedby The email of the person responsible for processing the received shipment.
     *
     * @return self
     */
    public function setEmailreceivedby($emailreceivedby)
    {

        if (is_null($emailreceivedby)) {
            throw new \InvalidArgumentException('non-nullable emailreceivedby cannot be null');
        }

        $this->container['emailreceivedby'] = $emailreceivedby;

        return $this;
    }

    /**
     * Gets dateestimatedpickup
     *
     * @return int|null
     */
    public function getDateestimatedpickup()
    {
        return $this->container['dateestimatedpickup'];
    }

    /**
     * Sets dateestimatedpickup
     *
     * @param int|null $dateestimatedpickup The estimated date and time for pickup from sender or null if not set.
     *
     * @return self
     */
    public function setDateestimatedpickup($dateestimatedpickup)
    {

        if (is_null($dateestimatedpickup)) {
            throw new \InvalidArgumentException('non-nullable dateestimatedpickup cannot be null');
        }

        $this->container['dateestimatedpickup'] = $dateestimatedpickup;

        return $this;
    }

    /**
     * Gets dateestimateddelivery
     *
     * @return int|null
     */
    public function getDateestimateddelivery()
    {
        return $this->container['dateestimateddelivery'];
    }

    /**
     * Sets dateestimateddelivery
     *
     * @param int|null $dateestimateddelivery The estimated date and time for delivery to receiver or null if not set.
     *
     * @return self
     */
    public function setDateestimateddelivery($dateestimateddelivery)
    {

        if (is_null($dateestimateddelivery)) {
            throw new \InvalidArgumentException('non-nullable dateestimateddelivery cannot be null');
        }

        $this->container['dateestimateddelivery'] = $dateestimateddelivery;

        return $this;
    }

    /**
     * Gets senderWarehouseid
     *
     * @return int|null
     */
    public function getSenderWarehouseid()
    {
        return $this->container['senderWarehouseid'];
    }

    /**
     * Sets senderWarehouseid
     *
     * @param int|null $senderWarehouseid The warehouseid in Sitoo for sender or null if not applicable.
     *
     * @return self
     */
    public function setSenderWarehouseid($senderWarehouseid)
    {

        if (is_null($senderWarehouseid)) {
            throw new \InvalidArgumentException('non-nullable senderWarehouseid cannot be null');
        }

        $this->container['senderWarehouseid'] = $senderWarehouseid;

        return $this;
    }

    /**
     * Gets senderName
     *
     * @return string|null
     */
    public function getSenderName()
    {
        return $this->container['senderName'];
    }

    /**
     * Sets senderName
     *
     * @param string|null $senderName The name of the sender.
     *
     * @return self
     */
    public function setSenderName($senderName)
    {

        if (is_null($senderName)) {
            throw new \InvalidArgumentException('non-nullable senderName cannot be null');
        }

        $this->container['senderName'] = $senderName;

        return $this;
    }

    /**
     * Gets senderAddress
     *
     * @return string|null
     */
    public function getSenderAddress()
    {
        return $this->container['senderAddress'];
    }

    /**
     * Sets senderAddress
     *
     * @param string|null $senderAddress Address for the sender.
     *
     * @return self
     */
    public function setSenderAddress($senderAddress)
    {

        if (is_null($senderAddress)) {
            throw new \InvalidArgumentException('non-nullable senderAddress cannot be null');
        }

        $this->container['senderAddress'] = $senderAddress;

        return $this;
    }

    /**
     * Gets senderAddress2
     *
     * @return string|null
     */
    public function getSenderAddress2()
    {
        return $this->container['senderAddress2'];
    }

    /**
     * Sets senderAddress2
     *
     * @param string|null $senderAddress2 Address 2 for the sender.
     *
     * @return self
     */
    public function setSenderAddress2($senderAddress2)
    {

        if (is_null($senderAddress2)) {
            throw new \InvalidArgumentException('non-nullable senderAddress2 cannot be null');
        }

        $this->container['senderAddress2'] = $senderAddress2;

        return $this;
    }

    /**
     * Gets senderZip
     *
     * @return string|null
     */
    public function getSenderZip()
    {
        return $this->container['senderZip'];
    }

    /**
     * Sets senderZip
     *
     * @param string|null $senderZip Zip for the sender.
     *
     * @return self
     */
    public function setSenderZip($senderZip)
    {

        if (is_null($senderZip)) {
            throw new \InvalidArgumentException('non-nullable senderZip cannot be null');
        }

        $this->container['senderZip'] = $senderZip;

        return $this;
    }

    /**
     * Gets senderCity
     *
     * @return string|null
     */
    public function getSenderCity()
    {
        return $this->container['senderCity'];
    }

    /**
     * Sets senderCity
     *
     * @param string|null $senderCity City for the sender.
     *
     * @return self
     */
    public function setSenderCity($senderCity)
    {

        if (is_null($senderCity)) {
            throw new \InvalidArgumentException('non-nullable senderCity cannot be null');
        }

        $this->container['senderCity'] = $senderCity;

        return $this;
    }

    /**
     * Gets senderState
     *
     * @return string|null
     */
    public function getSenderState()
    {
        return $this->container['senderState'];
    }

    /**
     * Sets senderState
     *
     * @param string|null $senderState State for the sender.
     *
     * @return self
     */
    public function setSenderState($senderState)
    {

        if (is_null($senderState)) {
            throw new \InvalidArgumentException('non-nullable senderState cannot be null');
        }

        $this->container['senderState'] = $senderState;

        return $this;
    }

    /**
     * Gets senderCountryid
     *
     * @return string|null
     */
    public function getSenderCountryid()
    {
        return $this->container['senderCountryid'];
    }

    /**
     * Sets senderCountryid
     *
     * @param string|null $senderCountryid Country ID for the sender (2-letter ISO 3166).
     *
     * @return self
     */
    public function setSenderCountryid($senderCountryid)
    {

        if (is_null($senderCountryid)) {
            throw new \InvalidArgumentException('non-nullable senderCountryid cannot be null');
        }

        $this->container['senderCountryid'] = $senderCountryid;

        return $this;
    }

    /**
     * Gets senderReferencename
     *
     * @return string|null
     */
    public function getSenderReferencename()
    {
        return $this->container['senderReferencename'];
    }

    /**
     * Sets senderReferencename
     *
     * @param string|null $senderReferencename Reference name for the sender.
     *
     * @return self
     */
    public function setSenderReferencename($senderReferencename)
    {

        if (is_null($senderReferencename)) {
            throw new \InvalidArgumentException('non-nullable senderReferencename cannot be null');
        }

        $this->container['senderReferencename'] = $senderReferencename;

        return $this;
    }

    /**
     * Gets senderReferenceemail
     *
     * @return string|null
     */
    public function getSenderReferenceemail()
    {
        return $this->container['senderReferenceemail'];
    }

    /**
     * Sets senderReferenceemail
     *
     * @param string|null $senderReferenceemail Reference email for the sender.
     *
     * @return self
     */
    public function setSenderReferenceemail($senderReferenceemail)
    {

        if (is_null($senderReferenceemail)) {
            throw new \InvalidArgumentException('non-nullable senderReferenceemail cannot be null');
        }

        $this->container['senderReferenceemail'] = $senderReferenceemail;

        return $this;
    }

    /**
     * Gets senderReferencemobile
     *
     * @return string|null
     */
    public function getSenderReferencemobile()
    {
        return $this->container['senderReferencemobile'];
    }

    /**
     * Sets senderReferencemobile
     *
     * @param string|null $senderReferencemobile Reference mobile phone for the sender.
     *
     * @return self
     */
    public function setSenderReferencemobile($senderReferencemobile)
    {

        if (is_null($senderReferencemobile)) {
            throw new \InvalidArgumentException('non-nullable senderReferencemobile cannot be null');
        }

        $this->container['senderReferencemobile'] = $senderReferencemobile;

        return $this;
    }

    /**
     * Gets senderInstructions
     *
     * @return string|null
     */
    public function getSenderInstructions()
    {
        return $this->container['senderInstructions'];
    }

    /**
     * Sets senderInstructions
     *
     * @param string|null $senderInstructions Instructions for the sender.
     *
     * @return self
     */
    public function setSenderInstructions($senderInstructions)
    {

        if (is_null($senderInstructions)) {
            throw new \InvalidArgumentException('non-nullable senderInstructions cannot be null');
        }

        $this->container['senderInstructions'] = $senderInstructions;

        return $this;
    }

    /**
     * Gets receiverWarehouseid
     *
     * @return int|null
     */
    public function getReceiverWarehouseid()
    {
        return $this->container['receiverWarehouseid'];
    }

    /**
     * Sets receiverWarehouseid
     *
     * @param int|null $receiverWarehouseid The warehouseid in Sitoo for receiver or null if not applicable.
     *
     * @return self
     */
    public function setReceiverWarehouseid($receiverWarehouseid)
    {

        if (is_null($receiverWarehouseid)) {
            throw new \InvalidArgumentException('non-nullable receiverWarehouseid cannot be null');
        }

        $this->container['receiverWarehouseid'] = $receiverWarehouseid;

        return $this;
    }

    /**
     * Gets receiverName
     *
     * @return string|null
     */
    public function getReceiverName()
    {
        return $this->container['receiverName'];
    }

    /**
     * Sets receiverName
     *
     * @param string|null $receiverName The name of the receiver.
     *
     * @return self
     */
    public function setReceiverName($receiverName)
    {

        if (is_null($receiverName)) {
            throw new \InvalidArgumentException('non-nullable receiverName cannot be null');
        }

        $this->container['receiverName'] = $receiverName;

        return $this;
    }

    /**
     * Gets receiverAddress
     *
     * @return string|null
     */
    public function getReceiverAddress()
    {
        return $this->container['receiverAddress'];
    }

    /**
     * Sets receiverAddress
     *
     * @param string|null $receiverAddress Address for the receiver.
     *
     * @return self
     */
    public function setReceiverAddress($receiverAddress)
    {

        if (is_null($receiverAddress)) {
            throw new \InvalidArgumentException('non-nullable receiverAddress cannot be null');
        }

        $this->container['receiverAddress'] = $receiverAddress;

        return $this;
    }

    /**
     * Gets receiverAddress2
     *
     * @return string|null
     */
    public function getReceiverAddress2()
    {
        return $this->container['receiverAddress2'];
    }

    /**
     * Sets receiverAddress2
     *
     * @param string|null $receiverAddress2 Address 2 for the receiver.
     *
     * @return self
     */
    public function setReceiverAddress2($receiverAddress2)
    {

        if (is_null($receiverAddress2)) {
            throw new \InvalidArgumentException('non-nullable receiverAddress2 cannot be null');
        }

        $this->container['receiverAddress2'] = $receiverAddress2;

        return $this;
    }

    /**
     * Gets receiverZip
     *
     * @return string|null
     */
    public function getReceiverZip()
    {
        return $this->container['receiverZip'];
    }

    /**
     * Sets receiverZip
     *
     * @param string|null $receiverZip Zip for the receiver.
     *
     * @return self
     */
    public function setReceiverZip($receiverZip)
    {

        if (is_null($receiverZip)) {
            throw new \InvalidArgumentException('non-nullable receiverZip cannot be null');
        }

        $this->container['receiverZip'] = $receiverZip;

        return $this;
    }

    /**
     * Gets receiverCity
     *
     * @return string|null
     */
    public function getReceiverCity()
    {
        return $this->container['receiverCity'];
    }

    /**
     * Sets receiverCity
     *
     * @param string|null $receiverCity City for the receiver.
     *
     * @return self
     */
    public function setReceiverCity($receiverCity)
    {

        if (is_null($receiverCity)) {
            throw new \InvalidArgumentException('non-nullable receiverCity cannot be null');
        }

        $this->container['receiverCity'] = $receiverCity;

        return $this;
    }

    /**
     * Gets receiverState
     *
     * @return string|null
     */
    public function getReceiverState()
    {
        return $this->container['receiverState'];
    }

    /**
     * Sets receiverState
     *
     * @param string|null $receiverState State for the receiver.
     *
     * @return self
     */
    public function setReceiverState($receiverState)
    {

        if (is_null($receiverState)) {
            throw new \InvalidArgumentException('non-nullable receiverState cannot be null');
        }

        $this->container['receiverState'] = $receiverState;

        return $this;
    }

    /**
     * Gets receiverCountryid
     *
     * @return string|null
     */
    public function getReceiverCountryid()
    {
        return $this->container['receiverCountryid'];
    }

    /**
     * Sets receiverCountryid
     *
     * @param string|null $receiverCountryid Country ID for the receiver (2-letter ISO 3166).
     *
     * @return self
     */
    public function setReceiverCountryid($receiverCountryid)
    {

        if (is_null($receiverCountryid)) {
            throw new \InvalidArgumentException('non-nullable receiverCountryid cannot be null');
        }

        $this->container['receiverCountryid'] = $receiverCountryid;

        return $this;
    }

    /**
     * Gets receiverReferencename
     *
     * @return string|null
     */
    public function getReceiverReferencename()
    {
        return $this->container['receiverReferencename'];
    }

    /**
     * Sets receiverReferencename
     *
     * @param string|null $receiverReferencename Reference name for the receiver.
     *
     * @return self
     */
    public function setReceiverReferencename($receiverReferencename)
    {

        if (is_null($receiverReferencename)) {
            throw new \InvalidArgumentException('non-nullable receiverReferencename cannot be null');
        }

        $this->container['receiverReferencename'] = $receiverReferencename;

        return $this;
    }

    /**
     * Gets receiverReferenceemail
     *
     * @return string|null
     */
    public function getReceiverReferenceemail()
    {
        return $this->container['receiverReferenceemail'];
    }

    /**
     * Sets receiverReferenceemail
     *
     * @param string|null $receiverReferenceemail Reference email for the receiver.
     *
     * @return self
     */
    public function setReceiverReferenceemail($receiverReferenceemail)
    {

        if (is_null($receiverReferenceemail)) {
            throw new \InvalidArgumentException('non-nullable receiverReferenceemail cannot be null');
        }

        $this->container['receiverReferenceemail'] = $receiverReferenceemail;

        return $this;
    }

    /**
     * Gets receiverReferencemobile
     *
     * @return string|null
     */
    public function getReceiverReferencemobile()
    {
        return $this->container['receiverReferencemobile'];
    }

    /**
     * Sets receiverReferencemobile
     *
     * @param string|null $receiverReferencemobile Reference mobile phone for the receiver.
     *
     * @return self
     */
    public function setReceiverReferencemobile($receiverReferencemobile)
    {

        if (is_null($receiverReferencemobile)) {
            throw new \InvalidArgumentException('non-nullable receiverReferencemobile cannot be null');
        }

        $this->container['receiverReferencemobile'] = $receiverReferencemobile;

        return $this;
    }

    /**
     * Gets receiverInstructions
     *
     * @return string|null
     */
    public function getReceiverInstructions()
    {
        return $this->container['receiverInstructions'];
    }

    /**
     * Sets receiverInstructions
     *
     * @param string|null $receiverInstructions Instructions for the receiver.
     *
     * @return self
     */
    public function setReceiverInstructions($receiverInstructions)
    {

        if (is_null($receiverInstructions)) {
            throw new \InvalidArgumentException('non-nullable receiverInstructions cannot be null');
        }

        $this->container['receiverInstructions'] = $receiverInstructions;

        return $this;
    }

    /**
     * Gets carrierName
     *
     * @return string|null
     */
    public function getCarrierName()
    {
        return $this->container['carrierName'];
    }

    /**
     * Sets carrierName
     *
     * @param string|null $carrierName The name of the carrier.
     *
     * @return self
     */
    public function setCarrierName($carrierName)
    {

        if (is_null($carrierName)) {
            throw new \InvalidArgumentException('non-nullable carrierName cannot be null');
        }

        $this->container['carrierName'] = $carrierName;

        return $this;
    }

    /**
     * Gets carrierReference
     *
     * @return string|null
     */
    public function getCarrierReference()
    {
        return $this->container['carrierReference'];
    }

    /**
     * Sets carrierReference
     *
     * @param string|null $carrierReference The carrier reference for the shipment.
     *
     * @return self
     */
    public function setCarrierReference($carrierReference)
    {

        if (is_null($carrierReference)) {
            throw new \InvalidArgumentException('non-nullable carrierReference cannot be null');
        }

        $this->container['carrierReference'] = $carrierReference;

        return $this;
    }

    /**
     * Gets carrierTrackingurl
     *
     * @return string|null
     */
    public function getCarrierTrackingurl()
    {
        return $this->container['carrierTrackingurl'];
    }

    /**
     * Sets carrierTrackingurl
     *
     * @param string|null $carrierTrackingurl The carrier tracking url for the shipment.
     *
     * @return self
     */
    public function setCarrierTrackingurl($carrierTrackingurl)
    {

        if (is_null($carrierTrackingurl)) {
            throw new \InvalidArgumentException('non-nullable carrierTrackingurl cannot be null');
        }

        $this->container['carrierTrackingurl'] = $carrierTrackingurl;

        return $this;
    }

    /**
     * Gets shipmentpackages
     *
     * @return \Spy\SitooClient\Model\ShipmentpackageWrite[]|null
     */
    public function getShipmentpackages()
    {
        return $this->container['shipmentpackages'];
    }

    /**
     * Sets shipmentpackages
     *
     * @param \Spy\SitooClient\Model\ShipmentpackageWrite[]|null $shipmentpackages The packages in this shipment. An array of shipmentpackage.
     *
     * @return self
     */
    public function setShipmentpackages($shipmentpackages)
    {

        if (is_null($shipmentpackages)) {
            throw new \InvalidArgumentException('non-nullable shipmentpackages cannot be null');
        }

        $this->container['shipmentpackages'] = $shipmentpackages;

        return $this;
    }

    /**
     * Gets shipmentitems
     *
     * @return \Spy\SitooClient\Model\ShipmentitemWrite[]|null
     */
    public function getShipmentitems()
    {
        return $this->container['shipmentitems'];
    }

    /**
     * Sets shipmentitems
     *
     * @param \Spy\SitooClient\Model\ShipmentitemWrite[]|null $shipmentitems The items in this shipment. An array of shipmentitem.
     *
     * @return self
     */
    public function setShipmentitems($shipmentitems)
    {

        if (is_null($shipmentitems)) {
            throw new \InvalidArgumentException('non-nullable shipmentitems cannot be null');
        }

        $this->container['shipmentitems'] = $shipmentitems;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


