<?php
/**
 * OrderpaymentAdditionaldataRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Documentation for Sitoo
 *
 * Client for integrating to Sitoo
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Spy\SitooClient\Model;

use \ArrayAccess;
use \Spy\SitooClient\ObjectSerializer;

/**
 * OrderpaymentAdditionaldataRead Class Doc Comment
 *
 * @category Class
 * @description Additional data for this payment. The defined properties can be generated by Sitoo, any other properties are allowed as long as their values are of type string.
 * @package  Spy\SitooClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderpaymentAdditionaldataRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return OrderpaymentAdditionaldataReadModelFields
      */
    public static function GetModelFields(): OrderpaymentAdditionaldataReadModelFields
    {
        return new OrderpaymentAdditionaldataReadModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return OrderpaymentAdditionaldataReadModelAttributes
      */
    public static function GetModelAttributes(): OrderpaymentAdditionaldataReadModelAttributes
    {
        return new OrderpaymentAdditionaldataReadModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orderpayment-additionaldata-read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adyenCardalias' => 'string',
        'adyenCardtype' => 'string',
        'adyenPaymentmethod' => 'string',
        'adyenPaymentmethodvariant' => 'string',
        'adyenPspreference' => 'string',
        'adyenTenderreference' => 'string',
        'adyenTxdate' => 'string',
        'bamboraHost2tInternalreference' => 'string',
        'bamboraHost2tTerminalid' => 'string',
        'coineyTransactionref' => 'string',
        'custompaymentMobile' => 'string',
        'custompaymentPaymentid' => 'string',
        'giftcardCardnumber' => 'string',
        'giftcardCardnumberDisplay' => 'string',
        'izettlePanhash' => 'string',
        'izettleSitooreference' => 'string',
        'klarnaKlarnareference' => 'string',
        'klarnaMerchantid' => 'string',
        'klarnaOrderid' => 'string',
        'klarnav2Id' => 'string',
        'mobile' => 'string',
        'mobilepayPaymentid' => 'string',
        'netsAmount' => 'string',
        'netsIssuerid' => 'string',
        'netsSitooreference' => 'string',
        'netsTerminalid' => 'string',
        'paymentMethod' => 'string',
        'posOriginalsalesPaymentIndex' => 'string',
        'swishPaymentid' => 'string',
        'verifoneLppReferenceNumber' => 'string',
        'verifoneCardMaskedPan' => 'string',
        'virtualPayment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adyenCardalias' => null,
        'adyenCardtype' => null,
        'adyenPaymentmethod' => null,
        'adyenPaymentmethodvariant' => null,
        'adyenPspreference' => null,
        'adyenTenderreference' => null,
        'adyenTxdate' => null,
        'bamboraHost2tInternalreference' => null,
        'bamboraHost2tTerminalid' => null,
        'coineyTransactionref' => null,
        'custompaymentMobile' => null,
        'custompaymentPaymentid' => null,
        'giftcardCardnumber' => null,
        'giftcardCardnumberDisplay' => null,
        'izettlePanhash' => null,
        'izettleSitooreference' => null,
        'klarnaKlarnareference' => null,
        'klarnaMerchantid' => null,
        'klarnaOrderid' => null,
        'klarnav2Id' => null,
        'mobile' => null,
        'mobilepayPaymentid' => null,
        'netsAmount' => null,
        'netsIssuerid' => null,
        'netsSitooreference' => null,
        'netsTerminalid' => null,
        'paymentMethod' => null,
        'posOriginalsalesPaymentIndex' => null,
        'swishPaymentid' => null,
        'verifoneLppReferenceNumber' => null,
        'verifoneCardMaskedPan' => null,
        'virtualPayment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'adyenCardalias' => false,
		'adyenCardtype' => false,
		'adyenPaymentmethod' => false,
		'adyenPaymentmethodvariant' => false,
		'adyenPspreference' => false,
		'adyenTenderreference' => false,
		'adyenTxdate' => false,
		'bamboraHost2tInternalreference' => false,
		'bamboraHost2tTerminalid' => false,
		'coineyTransactionref' => false,
		'custompaymentMobile' => false,
		'custompaymentPaymentid' => false,
		'giftcardCardnumber' => false,
		'giftcardCardnumberDisplay' => false,
		'izettlePanhash' => false,
		'izettleSitooreference' => false,
		'klarnaKlarnareference' => false,
		'klarnaMerchantid' => false,
		'klarnaOrderid' => false,
		'klarnav2Id' => false,
		'mobile' => false,
		'mobilepayPaymentid' => false,
		'netsAmount' => false,
		'netsIssuerid' => false,
		'netsSitooreference' => false,
		'netsTerminalid' => false,
		'paymentMethod' => false,
		'posOriginalsalesPaymentIndex' => false,
		'swishPaymentid' => false,
		'verifoneLppReferenceNumber' => false,
		'verifoneCardMaskedPan' => false,
		'virtualPayment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adyenCardalias' => 'adyen-cardalias',
        'adyenCardtype' => 'adyen-cardtype',
        'adyenPaymentmethod' => 'adyen-paymentmethod',
        'adyenPaymentmethodvariant' => 'adyen-paymentmethodvariant',
        'adyenPspreference' => 'adyen-pspreference',
        'adyenTenderreference' => 'adyen-tenderreference',
        'adyenTxdate' => 'adyen-txdate',
        'bamboraHost2tInternalreference' => 'bambora-host2t-internalreference',
        'bamboraHost2tTerminalid' => 'bambora-host2t-terminalid',
        'coineyTransactionref' => 'coiney-transactionref',
        'custompaymentMobile' => 'custompayment-mobile',
        'custompaymentPaymentid' => 'custompayment-paymentid',
        'giftcardCardnumber' => 'giftcard-cardnumber',
        'giftcardCardnumberDisplay' => 'giftcard-cardnumber-display',
        'izettlePanhash' => 'izettle-panhash',
        'izettleSitooreference' => 'izettle-sitooreference',
        'klarnaKlarnareference' => 'klarna-klarnareference',
        'klarnaMerchantid' => 'klarna-merchantid',
        'klarnaOrderid' => 'klarna-orderid',
        'klarnav2Id' => 'klarnav2-id',
        'mobile' => 'mobile',
        'mobilepayPaymentid' => 'mobilepay-paymentid',
        'netsAmount' => 'nets-amount',
        'netsIssuerid' => 'nets-issuerid',
        'netsSitooreference' => 'nets-sitooreference',
        'netsTerminalid' => 'nets-terminalid',
        'paymentMethod' => 'payment-method',
        'posOriginalsalesPaymentIndex' => 'pos-originalsales-payment-index',
        'swishPaymentid' => 'swish-paymentid',
        'verifoneLppReferenceNumber' => 'verifone-lpp-reference-number',
        'verifoneCardMaskedPan' => 'verifone-card-masked-pan',
        'virtualPayment' => 'virtual-payment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adyenCardalias' => 'setAdyenCardalias',
        'adyenCardtype' => 'setAdyenCardtype',
        'adyenPaymentmethod' => 'setAdyenPaymentmethod',
        'adyenPaymentmethodvariant' => 'setAdyenPaymentmethodvariant',
        'adyenPspreference' => 'setAdyenPspreference',
        'adyenTenderreference' => 'setAdyenTenderreference',
        'adyenTxdate' => 'setAdyenTxdate',
        'bamboraHost2tInternalreference' => 'setBamboraHost2tInternalreference',
        'bamboraHost2tTerminalid' => 'setBamboraHost2tTerminalid',
        'coineyTransactionref' => 'setCoineyTransactionref',
        'custompaymentMobile' => 'setCustompaymentMobile',
        'custompaymentPaymentid' => 'setCustompaymentPaymentid',
        'giftcardCardnumber' => 'setGiftcardCardnumber',
        'giftcardCardnumberDisplay' => 'setGiftcardCardnumberDisplay',
        'izettlePanhash' => 'setIzettlePanhash',
        'izettleSitooreference' => 'setIzettleSitooreference',
        'klarnaKlarnareference' => 'setKlarnaKlarnareference',
        'klarnaMerchantid' => 'setKlarnaMerchantid',
        'klarnaOrderid' => 'setKlarnaOrderid',
        'klarnav2Id' => 'setKlarnav2Id',
        'mobile' => 'setMobile',
        'mobilepayPaymentid' => 'setMobilepayPaymentid',
        'netsAmount' => 'setNetsAmount',
        'netsIssuerid' => 'setNetsIssuerid',
        'netsSitooreference' => 'setNetsSitooreference',
        'netsTerminalid' => 'setNetsTerminalid',
        'paymentMethod' => 'setPaymentMethod',
        'posOriginalsalesPaymentIndex' => 'setPosOriginalsalesPaymentIndex',
        'swishPaymentid' => 'setSwishPaymentid',
        'verifoneLppReferenceNumber' => 'setVerifoneLppReferenceNumber',
        'verifoneCardMaskedPan' => 'setVerifoneCardMaskedPan',
        'virtualPayment' => 'setVirtualPayment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adyenCardalias' => 'getAdyenCardalias',
        'adyenCardtype' => 'getAdyenCardtype',
        'adyenPaymentmethod' => 'getAdyenPaymentmethod',
        'adyenPaymentmethodvariant' => 'getAdyenPaymentmethodvariant',
        'adyenPspreference' => 'getAdyenPspreference',
        'adyenTenderreference' => 'getAdyenTenderreference',
        'adyenTxdate' => 'getAdyenTxdate',
        'bamboraHost2tInternalreference' => 'getBamboraHost2tInternalreference',
        'bamboraHost2tTerminalid' => 'getBamboraHost2tTerminalid',
        'coineyTransactionref' => 'getCoineyTransactionref',
        'custompaymentMobile' => 'getCustompaymentMobile',
        'custompaymentPaymentid' => 'getCustompaymentPaymentid',
        'giftcardCardnumber' => 'getGiftcardCardnumber',
        'giftcardCardnumberDisplay' => 'getGiftcardCardnumberDisplay',
        'izettlePanhash' => 'getIzettlePanhash',
        'izettleSitooreference' => 'getIzettleSitooreference',
        'klarnaKlarnareference' => 'getKlarnaKlarnareference',
        'klarnaMerchantid' => 'getKlarnaMerchantid',
        'klarnaOrderid' => 'getKlarnaOrderid',
        'klarnav2Id' => 'getKlarnav2Id',
        'mobile' => 'getMobile',
        'mobilepayPaymentid' => 'getMobilepayPaymentid',
        'netsAmount' => 'getNetsAmount',
        'netsIssuerid' => 'getNetsIssuerid',
        'netsSitooreference' => 'getNetsSitooreference',
        'netsTerminalid' => 'getNetsTerminalid',
        'paymentMethod' => 'getPaymentMethod',
        'posOriginalsalesPaymentIndex' => 'getPosOriginalsalesPaymentIndex',
        'swishPaymentid' => 'getSwishPaymentid',
        'verifoneLppReferenceNumber' => 'getVerifoneLppReferenceNumber',
        'verifoneCardMaskedPan' => 'getVerifoneCardMaskedPan',
        'virtualPayment' => 'getVirtualPayment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('adyenCardalias', $data ?? [], null);
        $this->setIfExists('adyenCardtype', $data ?? [], null);
        $this->setIfExists('adyenPaymentmethod', $data ?? [], null);
        $this->setIfExists('adyenPaymentmethodvariant', $data ?? [], null);
        $this->setIfExists('adyenPspreference', $data ?? [], null);
        $this->setIfExists('adyenTenderreference', $data ?? [], null);
        $this->setIfExists('adyenTxdate', $data ?? [], null);
        $this->setIfExists('bamboraHost2tInternalreference', $data ?? [], null);
        $this->setIfExists('bamboraHost2tTerminalid', $data ?? [], null);
        $this->setIfExists('coineyTransactionref', $data ?? [], null);
        $this->setIfExists('custompaymentMobile', $data ?? [], null);
        $this->setIfExists('custompaymentPaymentid', $data ?? [], null);
        $this->setIfExists('giftcardCardnumber', $data ?? [], null);
        $this->setIfExists('giftcardCardnumberDisplay', $data ?? [], null);
        $this->setIfExists('izettlePanhash', $data ?? [], null);
        $this->setIfExists('izettleSitooreference', $data ?? [], null);
        $this->setIfExists('klarnaKlarnareference', $data ?? [], null);
        $this->setIfExists('klarnaMerchantid', $data ?? [], null);
        $this->setIfExists('klarnaOrderid', $data ?? [], null);
        $this->setIfExists('klarnav2Id', $data ?? [], null);
        $this->setIfExists('mobile', $data ?? [], null);
        $this->setIfExists('mobilepayPaymentid', $data ?? [], null);
        $this->setIfExists('netsAmount', $data ?? [], null);
        $this->setIfExists('netsIssuerid', $data ?? [], null);
        $this->setIfExists('netsSitooreference', $data ?? [], null);
        $this->setIfExists('netsTerminalid', $data ?? [], null);
        $this->setIfExists('paymentMethod', $data ?? [], null);
        $this->setIfExists('posOriginalsalesPaymentIndex', $data ?? [], null);
        $this->setIfExists('swishPaymentid', $data ?? [], null);
        $this->setIfExists('verifoneLppReferenceNumber', $data ?? [], null);
        $this->setIfExists('verifoneCardMaskedPan', $data ?? [], null);
        $this->setIfExists('virtualPayment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adyenCardalias
     *
     * @return string|null
     */
    public function getAdyenCardalias()
    {
        return $this->container['adyenCardalias'];
    }

    /**
     * Sets adyenCardalias
     *
     * @param string|null $adyenCardalias Adyen card number token
     *
     * @return self
     */
    public function setAdyenCardalias($adyenCardalias)
    {

        if (is_null($adyenCardalias)) {
            throw new \InvalidArgumentException('non-nullable adyenCardalias cannot be null');
        }

        $this->container['adyenCardalias'] = $adyenCardalias;

        return $this;
    }

    /**
     * Gets adyenCardtype
     *
     * @return string|null
     */
    public function getAdyenCardtype()
    {
        return $this->container['adyenCardtype'];
    }

    /**
     * Sets adyenCardtype
     *
     * @param string|null $adyenCardtype Adyen card type
     *
     * @return self
     */
    public function setAdyenCardtype($adyenCardtype)
    {

        if (is_null($adyenCardtype)) {
            throw new \InvalidArgumentException('non-nullable adyenCardtype cannot be null');
        }

        $this->container['adyenCardtype'] = $adyenCardtype;

        return $this;
    }

    /**
     * Gets adyenPaymentmethod
     *
     * @return string|null
     */
    public function getAdyenPaymentmethod()
    {
        return $this->container['adyenPaymentmethod'];
    }

    /**
     * Sets adyenPaymentmethod
     *
     * @param string|null $adyenPaymentmethod Adyen payment method
     *
     * @return self
     */
    public function setAdyenPaymentmethod($adyenPaymentmethod)
    {

        if (is_null($adyenPaymentmethod)) {
            throw new \InvalidArgumentException('non-nullable adyenPaymentmethod cannot be null');
        }

        $this->container['adyenPaymentmethod'] = $adyenPaymentmethod;

        return $this;
    }

    /**
     * Gets adyenPaymentmethodvariant
     *
     * @return string|null
     */
    public function getAdyenPaymentmethodvariant()
    {
        return $this->container['adyenPaymentmethodvariant'];
    }

    /**
     * Sets adyenPaymentmethodvariant
     *
     * @param string|null $adyenPaymentmethodvariant Adyen payment method variant
     *
     * @return self
     */
    public function setAdyenPaymentmethodvariant($adyenPaymentmethodvariant)
    {

        if (is_null($adyenPaymentmethodvariant)) {
            throw new \InvalidArgumentException('non-nullable adyenPaymentmethodvariant cannot be null');
        }

        $this->container['adyenPaymentmethodvariant'] = $adyenPaymentmethodvariant;

        return $this;
    }

    /**
     * Gets adyenPspreference
     *
     * @return string|null
     */
    public function getAdyenPspreference()
    {
        return $this->container['adyenPspreference'];
    }

    /**
     * Sets adyenPspreference
     *
     * @param string|null $adyenPspreference Adyen PSP reference
     *
     * @return self
     */
    public function setAdyenPspreference($adyenPspreference)
    {

        if (is_null($adyenPspreference)) {
            throw new \InvalidArgumentException('non-nullable adyenPspreference cannot be null');
        }

        $this->container['adyenPspreference'] = $adyenPspreference;

        return $this;
    }

    /**
     * Gets adyenTenderreference
     *
     * @return string|null
     */
    public function getAdyenTenderreference()
    {
        return $this->container['adyenTenderreference'];
    }

    /**
     * Sets adyenTenderreference
     *
     * @param string|null $adyenTenderreference Adyen tender reference
     *
     * @return self
     */
    public function setAdyenTenderreference($adyenTenderreference)
    {

        if (is_null($adyenTenderreference)) {
            throw new \InvalidArgumentException('non-nullable adyenTenderreference cannot be null');
        }

        $this->container['adyenTenderreference'] = $adyenTenderreference;

        return $this;
    }

    /**
     * Gets adyenTxdate
     *
     * @return string|null
     */
    public function getAdyenTxdate()
    {
        return $this->container['adyenTxdate'];
    }

    /**
     * Sets adyenTxdate
     *
     * @param string|null $adyenTxdate Adyen transaction date (ISO-8601)
     *
     * @return self
     */
    public function setAdyenTxdate($adyenTxdate)
    {

        if (is_null($adyenTxdate)) {
            throw new \InvalidArgumentException('non-nullable adyenTxdate cannot be null');
        }

        $this->container['adyenTxdate'] = $adyenTxdate;

        return $this;
    }

    /**
     * Gets bamboraHost2tInternalreference
     *
     * @return string|null
     */
    public function getBamboraHost2tInternalreference()
    {
        return $this->container['bamboraHost2tInternalreference'];
    }

    /**
     * Sets bamboraHost2tInternalreference
     *
     * @param string|null $bamboraHost2tInternalreference Internal reference for the payment in Bambora Terminal
     *
     * @return self
     */
    public function setBamboraHost2tInternalreference($bamboraHost2tInternalreference)
    {

        if (is_null($bamboraHost2tInternalreference)) {
            throw new \InvalidArgumentException('non-nullable bamboraHost2tInternalreference cannot be null');
        }

        $this->container['bamboraHost2tInternalreference'] = $bamboraHost2tInternalreference;

        return $this;
    }

    /**
     * Gets bamboraHost2tTerminalid
     *
     * @return string|null
     */
    public function getBamboraHost2tTerminalid()
    {
        return $this->container['bamboraHost2tTerminalid'];
    }

    /**
     * Sets bamboraHost2tTerminalid
     *
     * @param string|null $bamboraHost2tTerminalid ID for the Bambora Terminal
     *
     * @return self
     */
    public function setBamboraHost2tTerminalid($bamboraHost2tTerminalid)
    {

        if (is_null($bamboraHost2tTerminalid)) {
            throw new \InvalidArgumentException('non-nullable bamboraHost2tTerminalid cannot be null');
        }

        $this->container['bamboraHost2tTerminalid'] = $bamboraHost2tTerminalid;

        return $this;
    }

    /**
     * Gets coineyTransactionref
     *
     * @return string|null
     */
    public function getCoineyTransactionref()
    {
        return $this->container['coineyTransactionref'];
    }

    /**
     * Sets coineyTransactionref
     *
     * @param string|null $coineyTransactionref Transaction reference for Coiney payment
     *
     * @return self
     */
    public function setCoineyTransactionref($coineyTransactionref)
    {

        if (is_null($coineyTransactionref)) {
            throw new \InvalidArgumentException('non-nullable coineyTransactionref cannot be null');
        }

        $this->container['coineyTransactionref'] = $coineyTransactionref;

        return $this;
    }

    /**
     * Gets custompaymentMobile
     *
     * @return string|null
     */
    public function getCustompaymentMobile()
    {
        return $this->container['custompaymentMobile'];
    }

    /**
     * Sets custompaymentMobile
     *
     * @param string|null $custompaymentMobile Mobile number used for custom payment
     *
     * @return self
     */
    public function setCustompaymentMobile($custompaymentMobile)
    {

        if (is_null($custompaymentMobile)) {
            throw new \InvalidArgumentException('non-nullable custompaymentMobile cannot be null');
        }

        $this->container['custompaymentMobile'] = $custompaymentMobile;

        return $this;
    }

    /**
     * Gets custompaymentPaymentid
     *
     * @return string|null
     */
    public function getCustompaymentPaymentid()
    {
        return $this->container['custompaymentPaymentid'];
    }

    /**
     * Sets custompaymentPaymentid
     *
     * @param string|null $custompaymentPaymentid ID for custom payment
     *
     * @return self
     */
    public function setCustompaymentPaymentid($custompaymentPaymentid)
    {

        if (is_null($custompaymentPaymentid)) {
            throw new \InvalidArgumentException('non-nullable custompaymentPaymentid cannot be null');
        }

        $this->container['custompaymentPaymentid'] = $custompaymentPaymentid;

        return $this;
    }

    /**
     * Gets giftcardCardnumber
     *
     * @return string|null
     */
    public function getGiftcardCardnumber()
    {
        return $this->container['giftcardCardnumber'];
    }

    /**
     * Sets giftcardCardnumber
     *
     * @param string|null $giftcardCardnumber Card number of giftcard used for payment
     *
     * @return self
     */
    public function setGiftcardCardnumber($giftcardCardnumber)
    {

        if (is_null($giftcardCardnumber)) {
            throw new \InvalidArgumentException('non-nullable giftcardCardnumber cannot be null');
        }

        $this->container['giftcardCardnumber'] = $giftcardCardnumber;

        return $this;
    }

    /**
     * Gets giftcardCardnumberDisplay
     *
     * @return string|null
     */
    public function getGiftcardCardnumberDisplay()
    {
        return $this->container['giftcardCardnumberDisplay'];
    }

    /**
     * Sets giftcardCardnumberDisplay
     *
     * @param string|null $giftcardCardnumberDisplay The masked card number of giftcard used for payment
     *
     * @return self
     */
    public function setGiftcardCardnumberDisplay($giftcardCardnumberDisplay)
    {

        if (is_null($giftcardCardnumberDisplay)) {
            throw new \InvalidArgumentException('non-nullable giftcardCardnumberDisplay cannot be null');
        }

        $this->container['giftcardCardnumberDisplay'] = $giftcardCardnumberDisplay;

        return $this;
    }

    /**
     * Gets izettlePanhash
     *
     * @return string|null
     */
    public function getIzettlePanhash()
    {
        return $this->container['izettlePanhash'];
    }

    /**
     * Sets izettlePanhash
     *
     * @param string|null $izettlePanhash PAN hash value for iZettle
     *
     * @return self
     */
    public function setIzettlePanhash($izettlePanhash)
    {

        if (is_null($izettlePanhash)) {
            throw new \InvalidArgumentException('non-nullable izettlePanhash cannot be null');
        }

        $this->container['izettlePanhash'] = $izettlePanhash;

        return $this;
    }

    /**
     * Gets izettleSitooreference
     *
     * @return string|null
     */
    public function getIzettleSitooreference()
    {
        return $this->container['izettleSitooreference'];
    }

    /**
     * Sets izettleSitooreference
     *
     * @param string|null $izettleSitooreference The Sitoo instance reference for the payment in iZettle
     *
     * @return self
     */
    public function setIzettleSitooreference($izettleSitooreference)
    {

        if (is_null($izettleSitooreference)) {
            throw new \InvalidArgumentException('non-nullable izettleSitooreference cannot be null');
        }

        $this->container['izettleSitooreference'] = $izettleSitooreference;

        return $this;
    }

    /**
     * Gets klarnaKlarnareference
     *
     * @return string|null
     */
    public function getKlarnaKlarnareference()
    {
        return $this->container['klarnaKlarnareference'];
    }

    /**
     * Sets klarnaKlarnareference
     *
     * @param string|null $klarnaKlarnareference Klarna order reference
     *
     * @return self
     */
    public function setKlarnaKlarnareference($klarnaKlarnareference)
    {

        if (is_null($klarnaKlarnareference)) {
            throw new \InvalidArgumentException('non-nullable klarnaKlarnareference cannot be null');
        }

        $this->container['klarnaKlarnareference'] = $klarnaKlarnareference;

        return $this;
    }

    /**
     * Gets klarnaMerchantid
     *
     * @return string|null
     */
    public function getKlarnaMerchantid()
    {
        return $this->container['klarnaMerchantid'];
    }

    /**
     * Sets klarnaMerchantid
     *
     * @param string|null $klarnaMerchantid Klarna merchant ID
     *
     * @return self
     */
    public function setKlarnaMerchantid($klarnaMerchantid)
    {

        if (is_null($klarnaMerchantid)) {
            throw new \InvalidArgumentException('non-nullable klarnaMerchantid cannot be null');
        }

        $this->container['klarnaMerchantid'] = $klarnaMerchantid;

        return $this;
    }

    /**
     * Gets klarnaOrderid
     *
     * @return string|null
     */
    public function getKlarnaOrderid()
    {
        return $this->container['klarnaOrderid'];
    }

    /**
     * Sets klarnaOrderid
     *
     * @param string|null $klarnaOrderid Klarna order ID
     *
     * @return self
     */
    public function setKlarnaOrderid($klarnaOrderid)
    {

        if (is_null($klarnaOrderid)) {
            throw new \InvalidArgumentException('non-nullable klarnaOrderid cannot be null');
        }

        $this->container['klarnaOrderid'] = $klarnaOrderid;

        return $this;
    }

    /**
     * Gets klarnav2Id
     *
     * @return string|null
     */
    public function getKlarnav2Id()
    {
        return $this->container['klarnav2Id'];
    }

    /**
     * Sets klarnav2Id
     *
     * @param string|null $klarnav2Id Klarna ID for payment made with legacy v2 API
     *
     * @return self
     */
    public function setKlarnav2Id($klarnav2Id)
    {

        if (is_null($klarnav2Id)) {
            throw new \InvalidArgumentException('non-nullable klarnav2Id cannot be null');
        }

        $this->container['klarnav2Id'] = $klarnav2Id;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string|null
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string|null $mobile Mobile number used for payment
     *
     * @return self
     */
    public function setMobile($mobile)
    {

        if (is_null($mobile)) {
            throw new \InvalidArgumentException('non-nullable mobile cannot be null');
        }

        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets mobilepayPaymentid
     *
     * @return string|null
     */
    public function getMobilepayPaymentid()
    {
        return $this->container['mobilepayPaymentid'];
    }

    /**
     * Sets mobilepayPaymentid
     *
     * @param string|null $mobilepayPaymentid The ID for the MobilePay payment
     *
     * @return self
     */
    public function setMobilepayPaymentid($mobilepayPaymentid)
    {

        if (is_null($mobilepayPaymentid)) {
            throw new \InvalidArgumentException('non-nullable mobilepayPaymentid cannot be null');
        }

        $this->container['mobilepayPaymentid'] = $mobilepayPaymentid;

        return $this;
    }

    /**
     * Gets netsAmount
     *
     * @return string|null
     */
    public function getNetsAmount()
    {
        return $this->container['netsAmount'];
    }

    /**
     * Sets netsAmount
     *
     * @param string|null $netsAmount The amount for the payment in Nets Terminal
     *
     * @return self
     */
    public function setNetsAmount($netsAmount)
    {

        if (is_null($netsAmount)) {
            throw new \InvalidArgumentException('non-nullable netsAmount cannot be null');
        }

        $this->container['netsAmount'] = $netsAmount;

        return $this;
    }

    /**
     * Gets netsIssuerid
     *
     * @return string|null
     */
    public function getNetsIssuerid()
    {
        return $this->container['netsIssuerid'];
    }

    /**
     * Sets netsIssuerid
     *
     * @param string|null $netsIssuerid Property issuerId from LocalModeEventArgs in Nets Terminal
     *
     * @return self
     */
    public function setNetsIssuerid($netsIssuerid)
    {

        if (is_null($netsIssuerid)) {
            throw new \InvalidArgumentException('non-nullable netsIssuerid cannot be null');
        }

        $this->container['netsIssuerid'] = $netsIssuerid;

        return $this;
    }

    /**
     * Gets netsSitooreference
     *
     * @return string|null
     */
    public function getNetsSitooreference()
    {
        return $this->container['netsSitooreference'];
    }

    /**
     * Sets netsSitooreference
     *
     * @param string|null $netsSitooreference The Sitoo instance reference for the payment in Nets Terminal
     *
     * @return self
     */
    public function setNetsSitooreference($netsSitooreference)
    {

        if (is_null($netsSitooreference)) {
            throw new \InvalidArgumentException('non-nullable netsSitooreference cannot be null');
        }

        $this->container['netsSitooreference'] = $netsSitooreference;

        return $this;
    }

    /**
     * Gets netsTerminalid
     *
     * @return string|null
     */
    public function getNetsTerminalid()
    {
        return $this->container['netsTerminalid'];
    }

    /**
     * Sets netsTerminalid
     *
     * @param string|null $netsTerminalid Property terminalID from LocalModeEventArgs in Nets Terminal
     *
     * @return self
     */
    public function setNetsTerminalid($netsTerminalid)
    {

        if (is_null($netsTerminalid)) {
            throw new \InvalidArgumentException('non-nullable netsTerminalid cannot be null');
        }

        $this->container['netsTerminalid'] = $netsTerminalid;

        return $this;
    }

    /**
     * Gets paymentMethod
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['paymentMethod'];
    }

    /**
     * Sets paymentMethod
     *
     * @param string|null $paymentMethod The payment method used for this payment
     *
     * @return self
     */
    public function setPaymentMethod($paymentMethod)
    {

        if (is_null($paymentMethod)) {
            throw new \InvalidArgumentException('non-nullable paymentMethod cannot be null');
        }

        $this->container['paymentMethod'] = $paymentMethod;

        return $this;
    }

    /**
     * Gets posOriginalsalesPaymentIndex
     *
     * @return string|null
     */
    public function getPosOriginalsalesPaymentIndex()
    {
        return $this->container['posOriginalsalesPaymentIndex'];
    }

    /**
     * Sets posOriginalsalesPaymentIndex
     *
     * @param string|null $posOriginalsalesPaymentIndex Index referring to the payment from the original purchase being returned, indicated by the pos-originalsales-orderid field on the order
     *
     * @return self
     */
    public function setPosOriginalsalesPaymentIndex($posOriginalsalesPaymentIndex)
    {

        if (is_null($posOriginalsalesPaymentIndex)) {
            throw new \InvalidArgumentException('non-nullable posOriginalsalesPaymentIndex cannot be null');
        }

        $this->container['posOriginalsalesPaymentIndex'] = $posOriginalsalesPaymentIndex;

        return $this;
    }

    /**
     * Gets swishPaymentid
     *
     * @return string|null
     */
    public function getSwishPaymentid()
    {
        return $this->container['swishPaymentid'];
    }

    /**
     * Sets swishPaymentid
     *
     * @param string|null $swishPaymentid The ID for the Swish payment
     *
     * @return self
     */
    public function setSwishPaymentid($swishPaymentid)
    {

        if (is_null($swishPaymentid)) {
            throw new \InvalidArgumentException('non-nullable swishPaymentid cannot be null');
        }

        $this->container['swishPaymentid'] = $swishPaymentid;

        return $this;
    }

    /**
     * Gets verifoneLppReferenceNumber
     *
     * @return string|null
     */
    public function getVerifoneLppReferenceNumber()
    {
        return $this->container['verifoneLppReferenceNumber'];
    }

    /**
     * Sets verifoneLppReferenceNumber
     *
     * @param string|null $verifoneLppReferenceNumber Reference number for the payment in Verifone Terminal
     *
     * @return self
     */
    public function setVerifoneLppReferenceNumber($verifoneLppReferenceNumber)
    {

        if (is_null($verifoneLppReferenceNumber)) {
            throw new \InvalidArgumentException('non-nullable verifoneLppReferenceNumber cannot be null');
        }

        $this->container['verifoneLppReferenceNumber'] = $verifoneLppReferenceNumber;

        return $this;
    }

    /**
     * Gets verifoneCardMaskedPan
     *
     * @return string|null
     */
    public function getVerifoneCardMaskedPan()
    {
        return $this->container['verifoneCardMaskedPan'];
    }

    /**
     * Sets verifoneCardMaskedPan
     *
     * @param string|null $verifoneCardMaskedPan The masked card number for the payment in Verifone Terminal
     *
     * @return self
     */
    public function setVerifoneCardMaskedPan($verifoneCardMaskedPan)
    {

        if (is_null($verifoneCardMaskedPan)) {
            throw new \InvalidArgumentException('non-nullable verifoneCardMaskedPan cannot be null');
        }

        $this->container['verifoneCardMaskedPan'] = $verifoneCardMaskedPan;

        return $this;
    }

    /**
     * Gets virtualPayment
     *
     * @return string|null
     */
    public function getVirtualPayment()
    {
        return $this->container['virtualPayment'];
    }

    /**
     * Sets virtualPayment
     *
     * @param string|null $virtualPayment Set to \"true\" if the payment is not a real transaction, but simply an exchange done between 2 orders
     *
     * @return self
     */
    public function setVirtualPayment($virtualPayment)
    {

        if (is_null($virtualPayment)) {
            throw new \InvalidArgumentException('non-nullable virtualPayment cannot be null');
        }

        $this->container['virtualPayment'] = $virtualPayment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


